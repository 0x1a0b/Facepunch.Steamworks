using System;
using System.Runtime.InteropServices;

namespace SteamNative
{
	internal static partial class Platform
	{
		public interface Interface
		{
			bool IsValid { get; } 
			
			HSteamPipe /*(HSteamPipe)*/ ISteamClient_CreateSteamPipe();
			bool /*bool*/ ISteamClient_BReleaseSteamPipe( HSteamPipe /*HSteamPipe*/ hSteamPipe );
			HSteamUser /*(HSteamUser)*/ ISteamClient_ConnectToGlobalUser( HSteamPipe /*HSteamPipe*/ hSteamPipe );
			HSteamUser /*(HSteamUser)*/ ISteamClient_CreateLocalUser( out HSteamPipe /*HSteamPipe **/ phSteamPipe, AccountType /*EAccountType*/ eAccountType  );
			void /*void*/ ISteamClient_ReleaseUser( HSteamPipe /*HSteamPipe*/ hSteamPipe, HSteamUser /*HSteamUser*/ hUser );
			IntPtr /*class ISteamUser **/ ISteamClient_GetISteamUser( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamGameServer **/ ISteamClient_GetISteamGameServer( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			void /*void*/ ISteamClient_SetLocalIPBinding( uint /*uint32*/ unIP , ushort /*uint16*/ usPort  );
			IntPtr /*class ISteamFriends **/ ISteamClient_GetISteamFriends( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamUtils **/ ISteamClient_GetISteamUtils( HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamMatchmaking **/ ISteamClient_GetISteamMatchmaking( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamMatchmakingServers **/ ISteamClient_GetISteamMatchmakingServers( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*void **/ ISteamClient_GetISteamGenericInterface( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamUserStats **/ ISteamClient_GetISteamUserStats( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamGameServerStats **/ ISteamClient_GetISteamGameServerStats( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamApps **/ ISteamClient_GetISteamApps( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamNetworking **/ ISteamClient_GetISteamNetworking( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamRemoteStorage **/ ISteamClient_GetISteamRemoteStorage( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamScreenshots **/ ISteamClient_GetISteamScreenshots( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			uint /*uint32*/ ISteamClient_GetIPCCallCount();
			void /*void*/ ISteamClient_SetWarningMessageHook( IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction  );
			bool /*bool*/ ISteamClient_BShutdownIfAllPipesClosed();
			IntPtr /*class ISteamHTTP **/ ISteamClient_GetISteamHTTP( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamUnifiedMessages **/ ISteamClient_GetISteamUnifiedMessages( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamController **/ ISteamClient_GetISteamController( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamUGC **/ ISteamClient_GetISteamUGC( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamAppList **/ ISteamClient_GetISteamAppList( HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamMusic **/ ISteamClient_GetISteamMusic( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamMusicRemote **/ ISteamClient_GetISteamMusicRemote( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamHTMLSurface **/ ISteamClient_GetISteamHTMLSurface( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamInventory **/ ISteamClient_GetISteamInventory( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			IntPtr /*class ISteamVideo **/ ISteamClient_GetISteamVideo( HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			
			HSteamUser /*(HSteamUser)*/ ISteamUser_GetHSteamUser();
			bool /*bool*/ ISteamUser_BLoggedOn();
			CSteamID /*(class CSteamID)*/ ISteamUser_GetSteamID();
			int /*int*/ ISteamUser_InitiateGameConnection( IntPtr /*void **/ pAuthBlob , int /*int*/ cbMaxAuthBlob , CSteamID /*class CSteamID*/ steamIDGameServer, uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer , bool /*bool*/ bSecure  );
			void /*void*/ ISteamUser_TerminateGameConnection( uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer  );
			void /*void*/ ISteamUser_TrackAppUsageEvent( CGameID /*class CGameID*/ gameID, int /*int*/ eAppUsageEvent , string /*const char **/ pchExtraInfo  );
			bool /*bool*/ ISteamUser_GetUserDataFolder( System.Text.StringBuilder /*char **/ pchBuffer, int /*int*/ cubBuffer  );
			void /*void*/ ISteamUser_StartVoiceRecording();
			void /*void*/ ISteamUser_StopVoiceRecording();
			VoiceResult /*EVoiceResult*/ ISteamUser_GetAvailableVoice( out uint /*uint32 **/ pcbCompressed, out uint /*uint32 **/ pcbUncompressed, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate  );
			VoiceResult /*EVoiceResult*/ ISteamUser_GetVoice( bool /*bool*/ bWantCompressed , IntPtr /*void **/ pDestBuffer , uint /*uint32*/ cbDestBufferSize , out uint /*uint32 **/ nBytesWritten, bool /*bool*/ bWantUncompressed , IntPtr /*void **/ pUncompressedDestBuffer , uint /*uint32*/ cbUncompressedDestBufferSize , out uint /*uint32 **/ nUncompressBytesWritten, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate  );
			VoiceResult /*EVoiceResult*/ ISteamUser_DecompressVoice( IntPtr /*const void **/ pCompressed , uint /*uint32*/ cbCompressed , IntPtr /*void **/ pDestBuffer , uint /*uint32*/ cbDestBufferSize , out uint /*uint32 **/ nBytesWritten, uint /*uint32*/ nDesiredSampleRate  );
			uint /*uint32*/ ISteamUser_GetVoiceOptimalSampleRate();
			HAuthTicket /*(HAuthTicket)*/ ISteamUser_GetAuthSessionTicket( IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
			BeginAuthSessionResult /*EBeginAuthSessionResult*/ ISteamUser_BeginAuthSession( IntPtr /*const void **/ pAuthTicket , int /*int*/ cbAuthTicket , CSteamID /*class CSteamID*/ steamID );
			void /*void*/ ISteamUser_EndAuthSession( CSteamID /*class CSteamID*/ steamID );
			void /*void*/ ISteamUser_CancelAuthTicket( HAuthTicket /*HAuthTicket*/ hAuthTicket );
			UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ ISteamUser_UserHasLicenseForApp( CSteamID /*class CSteamID*/ steamID, AppId_t /*AppId_t*/ appID );
			bool /*bool*/ ISteamUser_BIsBehindNAT();
			void /*void*/ ISteamUser_AdvertiseGame( CSteamID /*class CSteamID*/ steamIDGameServer, uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUser_RequestEncryptedAppTicket( IntPtr /*void **/ pDataToInclude , int /*int*/ cbDataToInclude  );
			bool /*bool*/ ISteamUser_GetEncryptedAppTicket( IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
			int /*int*/ ISteamUser_GetGameBadgeLevel( int /*int*/ nSeries , bool /*bool*/ bFoil  );
			int /*int*/ ISteamUser_GetPlayerSteamLevel();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUser_RequestStoreAuthURL( string /*const char **/ pchRedirectURL  );
			bool /*bool*/ ISteamUser_BIsPhoneVerified();
			bool /*bool*/ ISteamUser_BIsTwoFactorEnabled();
			
			IntPtr ISteamFriends_GetPersonaName();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_SetPersonaName( string /*const char **/ pchPersonaName  );
			PersonaState /*EPersonaState*/ ISteamFriends_GetPersonaState();
			int /*int*/ ISteamFriends_GetFriendCount( int /*int*/ iFriendFlags  );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetFriendByIndex( int /*int*/ iFriend , int /*int*/ iFriendFlags  );
			FriendRelationship /*EFriendRelationship*/ ISteamFriends_GetFriendRelationship( CSteamID /*class CSteamID*/ steamIDFriend );
			PersonaState /*EPersonaState*/ ISteamFriends_GetFriendPersonaState( CSteamID /*class CSteamID*/ steamIDFriend );
			IntPtr ISteamFriends_GetFriendPersonaName( CSteamID /*class CSteamID*/ steamIDFriend );
			bool /*bool*/ ISteamFriends_GetFriendGamePlayed( CSteamID /*class CSteamID*/ steamIDFriend, ref FriendGameInfo_t /*struct FriendGameInfo_t **/ pFriendGameInfo );
			IntPtr ISteamFriends_GetFriendPersonaNameHistory( CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iPersonaName  );
			int /*int*/ ISteamFriends_GetFriendSteamLevel( CSteamID /*class CSteamID*/ steamIDFriend );
			IntPtr ISteamFriends_GetPlayerNickname( CSteamID /*class CSteamID*/ steamIDPlayer );
			int /*int*/ ISteamFriends_GetFriendsGroupCount();
			FriendsGroupID_t /*(FriendsGroupID_t)*/ ISteamFriends_GetFriendsGroupIDByIndex( int /*int*/ iFG  );
			IntPtr ISteamFriends_GetFriendsGroupName( FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID );
			int /*int*/ ISteamFriends_GetFriendsGroupMembersCount( FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID );
			void /*void*/ ISteamFriends_GetFriendsGroupMembersList( FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID, IntPtr /*class CSteamID **/ pOutSteamIDMembers, int /*int*/ nMembersCount  );
			bool /*bool*/ ISteamFriends_HasFriend( CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iFriendFlags  );
			int /*int*/ ISteamFriends_GetClanCount();
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanByIndex( int /*int*/ iClan  );
			IntPtr ISteamFriends_GetClanName( CSteamID /*class CSteamID*/ steamIDClan );
			IntPtr ISteamFriends_GetClanTag( CSteamID /*class CSteamID*/ steamIDClan );
			bool /*bool*/ ISteamFriends_GetClanActivityCounts( CSteamID /*class CSteamID*/ steamIDClan, out int /*int **/ pnOnline, out int /*int **/ pnInGame, out int /*int **/ pnChatting );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_DownloadClanActivityCounts( IntPtr /*class CSteamID **/ psteamIDClans, int /*int*/ cClansToRequest  );
			int /*int*/ ISteamFriends_GetFriendCountFromSource( CSteamID /*class CSteamID*/ steamIDSource );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetFriendFromSourceByIndex( CSteamID /*class CSteamID*/ steamIDSource, int /*int*/ iFriend  );
			bool /*bool*/ ISteamFriends_IsUserInSource( CSteamID /*class CSteamID*/ steamIDUser, CSteamID /*class CSteamID*/ steamIDSource );
			void /*void*/ ISteamFriends_SetInGameVoiceSpeaking( CSteamID /*class CSteamID*/ steamIDUser, bool /*bool*/ bSpeaking  );
			void /*void*/ ISteamFriends_ActivateGameOverlay( string /*const char **/ pchDialog  );
			void /*void*/ ISteamFriends_ActivateGameOverlayToUser( string /*const char **/ pchDialog , CSteamID /*class CSteamID*/ steamID );
			void /*void*/ ISteamFriends_ActivateGameOverlayToWebPage( string /*const char **/ pchURL  );
			void /*void*/ ISteamFriends_ActivateGameOverlayToStore( AppId_t /*AppId_t*/ nAppID, OverlayToStoreFlag /*EOverlayToStoreFlag*/ eFlag  );
			void /*void*/ ISteamFriends_SetPlayedWith( CSteamID /*class CSteamID*/ steamIDUserPlayedWith );
			void /*void*/ ISteamFriends_ActivateGameOverlayInviteDialog( CSteamID /*class CSteamID*/ steamIDLobby );
			int /*int*/ ISteamFriends_GetSmallFriendAvatar( CSteamID /*class CSteamID*/ steamIDFriend );
			int /*int*/ ISteamFriends_GetMediumFriendAvatar( CSteamID /*class CSteamID*/ steamIDFriend );
			int /*int*/ ISteamFriends_GetLargeFriendAvatar( CSteamID /*class CSteamID*/ steamIDFriend );
			bool /*bool*/ ISteamFriends_RequestUserInformation( CSteamID /*class CSteamID*/ steamIDUser, bool /*bool*/ bRequireNameOnly  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_RequestClanOfficerList( CSteamID /*class CSteamID*/ steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanOwner( CSteamID /*class CSteamID*/ steamIDClan );
			int /*int*/ ISteamFriends_GetClanOfficerCount( CSteamID /*class CSteamID*/ steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetClanOfficerByIndex( CSteamID /*class CSteamID*/ steamIDClan, int /*int*/ iOfficer  );
			uint /*uint32*/ ISteamFriends_GetUserRestrictions();
			bool /*bool*/ ISteamFriends_SetRichPresence( string /*const char **/ pchKey , string /*const char **/ pchValue  );
			void /*void*/ ISteamFriends_ClearRichPresence();
			IntPtr ISteamFriends_GetFriendRichPresence( CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchKey  );
			int /*int*/ ISteamFriends_GetFriendRichPresenceKeyCount( CSteamID /*class CSteamID*/ steamIDFriend );
			IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex( CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iKey  );
			void /*void*/ ISteamFriends_RequestFriendRichPresence( CSteamID /*class CSteamID*/ steamIDFriend );
			bool /*bool*/ ISteamFriends_InviteUserToGame( CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchConnectString  );
			int /*int*/ ISteamFriends_GetCoplayFriendCount();
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetCoplayFriend( int /*int*/ iCoplayFriend  );
			int /*int*/ ISteamFriends_GetFriendCoplayTime( CSteamID /*class CSteamID*/ steamIDFriend );
			AppId_t /*(AppId_t)*/ ISteamFriends_GetFriendCoplayGame( CSteamID /*class CSteamID*/ steamIDFriend );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_JoinClanChatRoom( CSteamID /*class CSteamID*/ steamIDClan );
			bool /*bool*/ ISteamFriends_LeaveClanChatRoom( CSteamID /*class CSteamID*/ steamIDClan );
			int /*int*/ ISteamFriends_GetClanChatMemberCount( CSteamID /*class CSteamID*/ steamIDClan );
			CSteamID /*(class CSteamID)*/ ISteamFriends_GetChatMemberByIndex( CSteamID /*class CSteamID*/ steamIDClan, int /*int*/ iUser  );
			bool /*bool*/ ISteamFriends_SendClanChatMessage( CSteamID /*class CSteamID*/ steamIDClanChat, string /*const char **/ pchText  );
			int /*int*/ ISteamFriends_GetClanChatMessage( CSteamID /*class CSteamID*/ steamIDClanChat, int /*int*/ iMessage , IntPtr /*void **/ prgchText , int /*int*/ cchTextMax , out ChatEntryType /*EChatEntryType **/ peChatEntryType, out CSteamID /*class CSteamID **/ psteamidChatter );
			bool /*bool*/ ISteamFriends_IsClanChatAdmin( CSteamID /*class CSteamID*/ steamIDClanChat, CSteamID /*class CSteamID*/ steamIDUser );
			bool /*bool*/ ISteamFriends_IsClanChatWindowOpenInSteam( CSteamID /*class CSteamID*/ steamIDClanChat );
			bool /*bool*/ ISteamFriends_OpenClanChatWindowInSteam( CSteamID /*class CSteamID*/ steamIDClanChat );
			bool /*bool*/ ISteamFriends_CloseClanChatWindowInSteam( CSteamID /*class CSteamID*/ steamIDClanChat );
			bool /*bool*/ ISteamFriends_SetListenForFriendsMessages( bool /*bool*/ bInterceptEnabled  );
			bool /*bool*/ ISteamFriends_ReplyToFriendMessage( CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchMsgToSend  );
			int /*int*/ ISteamFriends_GetFriendMessage( CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iMessageID , IntPtr /*void **/ pvData , int /*int*/ cubData , out ChatEntryType /*EChatEntryType **/ peChatEntryType );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_GetFollowerCount( CSteamID /*class CSteamID*/ steamID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_IsFollowing( CSteamID /*class CSteamID*/ steamID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamFriends_EnumerateFollowingList( uint /*uint32*/ unStartIndex  );
			
			uint /*uint32*/ ISteamUtils_GetSecondsSinceAppActive();
			uint /*uint32*/ ISteamUtils_GetSecondsSinceComputerActive();
			Universe /*EUniverse*/ ISteamUtils_GetConnectedUniverse();
			uint /*uint32*/ ISteamUtils_GetServerRealTime();
			IntPtr ISteamUtils_GetIPCountry();
			bool /*bool*/ ISteamUtils_GetImageSize( int /*int*/ iImage , out uint /*uint32 **/ pnWidth, out uint /*uint32 **/ pnHeight );
			bool /*bool*/ ISteamUtils_GetImageRGBA( int /*int*/ iImage , IntPtr /*uint8 **/ pubDest, int /*int*/ nDestBufferSize  );
			bool /*bool*/ ISteamUtils_GetCSERIPPort( out uint /*uint32 **/ unIP, out ushort /*uint16 **/ usPort );
			byte /*uint8*/ ISteamUtils_GetCurrentBatteryPower();
			uint /*uint32*/ ISteamUtils_GetAppID();
			void /*void*/ ISteamUtils_SetOverlayNotificationPosition( NotificationPosition /*ENotificationPosition*/ eNotificationPosition  );
			bool /*bool*/ ISteamUtils_IsAPICallCompleted( SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall, out bool /*bool **/ pbFailed );
			SteamAPICallFailure /*ESteamAPICallFailure*/ ISteamUtils_GetAPICallFailureReason( SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall );
			bool /*bool*/ ISteamUtils_GetAPICallResult( SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall, IntPtr /*void **/ pCallback , int /*int*/ cubCallback , int /*int*/ iCallbackExpected , out bool /*bool **/ pbFailed );
			uint /*uint32*/ ISteamUtils_GetIPCCallCount();
			void /*void*/ ISteamUtils_SetWarningMessageHook( IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction  );
			bool /*bool*/ ISteamUtils_IsOverlayEnabled();
			bool /*bool*/ ISteamUtils_BOverlayNeedsPresent();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUtils_CheckFileSignature( string /*const char **/ szFileName  );
			bool /*bool*/ ISteamUtils_ShowGamepadTextInput( GamepadTextInputMode /*EGamepadTextInputMode*/ eInputMode , GamepadTextInputLineMode /*EGamepadTextInputLineMode*/ eLineInputMode , string /*const char **/ pchDescription , uint /*uint32*/ unCharMax , string /*const char **/ pchExistingText  );
			uint /*uint32*/ ISteamUtils_GetEnteredGamepadTextLength();
			bool /*bool*/ ISteamUtils_GetEnteredGamepadTextInput( System.Text.StringBuilder /*char **/ pchText, uint /*uint32*/ cchText  );
			IntPtr ISteamUtils_GetSteamUILanguage();
			bool /*bool*/ ISteamUtils_IsSteamRunningInVR();
			void /*void*/ ISteamUtils_SetOverlayNotificationInset( int /*int*/ nHorizontalInset , int /*int*/ nVerticalInset  );
			bool /*bool*/ ISteamUtils_IsSteamInBigPictureMode();
			void /*void*/ ISteamUtils_StartVRDashboard();
			
			int /*int*/ ISteamMatchmaking_GetFavoriteGameCount();
			bool /*bool*/ ISteamMatchmaking_GetFavoriteGame( int /*int*/ iGame , ref AppId_t /*AppId_t **/ pnAppID, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnConnPort, out ushort /*uint16 **/ pnQueryPort, IntPtr /*uint32 **/ punFlags, out uint /*uint32 **/ pRTime32LastPlayedOnServer );
			int /*int*/ ISteamMatchmaking_AddFavoriteGame( AppId_t /*AppId_t*/ nAppID, uint /*uint32*/ nIP , ushort /*uint16*/ nConnPort , ushort /*uint16*/ nQueryPort , uint /*uint32*/ unFlags , uint /*uint32*/ rTime32LastPlayedOnServer  );
			bool /*bool*/ ISteamMatchmaking_RemoveFavoriteGame( AppId_t /*AppId_t*/ nAppID, uint /*uint32*/ nIP , ushort /*uint16*/ nConnPort , ushort /*uint16*/ nQueryPort , uint /*uint32*/ unFlags  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_RequestLobbyList();
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListStringFilter( string /*const char **/ pchKeyToMatch , string /*const char **/ pchValueToMatch , LobbyComparison /*ELobbyComparison*/ eComparisonType  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListNumericalFilter( string /*const char **/ pchKeyToMatch , int /*int*/ nValueToMatch , LobbyComparison /*ELobbyComparison*/ eComparisonType  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListNearValueFilter( string /*const char **/ pchKeyToMatch , int /*int*/ nValueToBeCloseTo  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable( int /*int*/ nSlotsAvailable  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListDistanceFilter( LobbyDistanceFilter /*ELobbyDistanceFilter*/ eLobbyDistanceFilter  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListResultCountFilter( int /*int*/ cMaxResults  );
			void /*void*/ ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter( CSteamID /*class CSteamID*/ steamIDLobby );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyByIndex( int /*int*/ iLobby  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_CreateLobby( LobbyType /*ELobbyType*/ eLobbyType , int /*int*/ cMaxMembers  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamMatchmaking_JoinLobby( CSteamID /*class CSteamID*/ steamIDLobby );
			void /*void*/ ISteamMatchmaking_LeaveLobby( CSteamID /*class CSteamID*/ steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_InviteUserToLobby( CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDInvitee );
			int /*int*/ ISteamMatchmaking_GetNumLobbyMembers( CSteamID /*class CSteamID*/ steamIDLobby );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyMemberByIndex( CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iMember  );
			IntPtr ISteamMatchmaking_GetLobbyData( CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey  );
			bool /*bool*/ ISteamMatchmaking_SetLobbyData( CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey , string /*const char **/ pchValue  );
			int /*int*/ ISteamMatchmaking_GetLobbyDataCount( CSteamID /*class CSteamID*/ steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_GetLobbyDataByIndex( CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iLobbyData , System.Text.StringBuilder /*char **/ pchKey, int /*int*/ cchKeyBufferSize , System.Text.StringBuilder /*char **/ pchValue, int /*int*/ cchValueBufferSize  );
			bool /*bool*/ ISteamMatchmaking_DeleteLobbyData( CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey  );
			IntPtr ISteamMatchmaking_GetLobbyMemberData( CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchKey  );
			void /*void*/ ISteamMatchmaking_SetLobbyMemberData( CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey , string /*const char **/ pchValue  );
			bool /*bool*/ ISteamMatchmaking_SendLobbyChatMsg( CSteamID /*class CSteamID*/ steamIDLobby, IntPtr /*const void **/ pvMsgBody , int /*int*/ cubMsgBody  );
			int /*int*/ ISteamMatchmaking_GetLobbyChatEntry( CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iChatID , out CSteamID /*class CSteamID **/ pSteamIDUser, IntPtr /*void **/ pvData , int /*int*/ cubData , out ChatEntryType /*EChatEntryType **/ peChatEntryType );
			bool /*bool*/ ISteamMatchmaking_RequestLobbyData( CSteamID /*class CSteamID*/ steamIDLobby );
			void /*void*/ ISteamMatchmaking_SetLobbyGameServer( CSteamID /*class CSteamID*/ steamIDLobby, uint /*uint32*/ unGameServerIP , ushort /*uint16*/ unGameServerPort , CSteamID /*class CSteamID*/ steamIDGameServer );
			bool /*bool*/ ISteamMatchmaking_GetLobbyGameServer( CSteamID /*class CSteamID*/ steamIDLobby, out uint /*uint32 **/ punGameServerIP, out ushort /*uint16 **/ punGameServerPort, out CSteamID /*class CSteamID **/ psteamIDGameServer );
			bool /*bool*/ ISteamMatchmaking_SetLobbyMemberLimit( CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ cMaxMembers  );
			int /*int*/ ISteamMatchmaking_GetLobbyMemberLimit( CSteamID /*class CSteamID*/ steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_SetLobbyType( CSteamID /*class CSteamID*/ steamIDLobby, LobbyType /*ELobbyType*/ eLobbyType  );
			bool /*bool*/ ISteamMatchmaking_SetLobbyJoinable( CSteamID /*class CSteamID*/ steamIDLobby, bool /*bool*/ bLobbyJoinable  );
			CSteamID /*(class CSteamID)*/ ISteamMatchmaking_GetLobbyOwner( CSteamID /*class CSteamID*/ steamIDLobby );
			bool /*bool*/ ISteamMatchmaking_SetLobbyOwner( CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDNewOwner );
			bool /*bool*/ ISteamMatchmaking_SetLinkedLobby( CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDLobbyDependent );
			
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestInternetServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestLANServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestFriendsServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestFavoritesServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestHistoryServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			HServerListRequest /*(HServerListRequest)*/ ISteamMatchmakingServers_RequestSpectatorServerList( AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
			void /*void*/ ISteamMatchmakingServers_ReleaseRequest( HServerListRequest /*HServerListRequest*/ hServerListRequest );
			IntPtr /*class gameserveritem_t **/ ISteamMatchmakingServers_GetServerDetails( HServerListRequest /*HServerListRequest*/ hRequest, int /*int*/ iServer  );
			void /*void*/ ISteamMatchmakingServers_CancelQuery( HServerListRequest /*HServerListRequest*/ hRequest );
			void /*void*/ ISteamMatchmakingServers_RefreshQuery( HServerListRequest /*HServerListRequest*/ hRequest );
			bool /*bool*/ ISteamMatchmakingServers_IsRefreshing( HServerListRequest /*HServerListRequest*/ hRequest );
			int /*int*/ ISteamMatchmakingServers_GetServerCount( HServerListRequest /*HServerListRequest*/ hRequest );
			void /*void*/ ISteamMatchmakingServers_RefreshServer( HServerListRequest /*HServerListRequest*/ hRequest, int /*int*/ iServer  );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_PingServer( uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingPingResponse **/ pRequestServersResponse  );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_PlayerDetails( uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingPlayersResponse **/ pRequestServersResponse  );
			HServerQuery /*(HServerQuery)*/ ISteamMatchmakingServers_ServerRules( uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingRulesResponse **/ pRequestServersResponse  );
			void /*void*/ ISteamMatchmakingServers_CancelServerQuery( HServerQuery /*HServerQuery*/ hServerQuery );
			
			bool /*bool*/ ISteamRemoteStorage_FileWrite( string /*const char **/ pchFile , IntPtr /*const void **/ pvData , int /*int32*/ cubData  );
			int /*int32*/ ISteamRemoteStorage_FileRead( string /*const char **/ pchFile , IntPtr /*void **/ pvData , int /*int32*/ cubDataToRead  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileWriteAsync( string /*const char **/ pchFile , IntPtr /*const void **/ pvData , uint /*uint32*/ cubData  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileReadAsync( string /*const char **/ pchFile , uint /*uint32*/ nOffset , uint /*uint32*/ cubToRead  );
			bool /*bool*/ ISteamRemoteStorage_FileReadAsyncComplete( SteamAPICall_t /*SteamAPICall_t*/ hReadCall, IntPtr /*void **/ pvBuffer , uint /*uint32*/ cubToRead  );
			bool /*bool*/ ISteamRemoteStorage_FileForget( string /*const char **/ pchFile  );
			bool /*bool*/ ISteamRemoteStorage_FileDelete( string /*const char **/ pchFile  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_FileShare( string /*const char **/ pchFile  );
			bool /*bool*/ ISteamRemoteStorage_SetSyncPlatforms( string /*const char **/ pchFile , RemoteStoragePlatform /*ERemoteStoragePlatform*/ eRemoteStoragePlatform  );
			UGCFileWriteStreamHandle_t /*(UGCFileWriteStreamHandle_t)*/ ISteamRemoteStorage_FileWriteStreamOpen( string /*const char **/ pchFile  );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamWriteChunk( UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle, IntPtr /*const void **/ pvData , int /*int32*/ cubData  );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamClose( UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle );
			bool /*bool*/ ISteamRemoteStorage_FileWriteStreamCancel( UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle );
			bool /*bool*/ ISteamRemoteStorage_FileExists( string /*const char **/ pchFile  );
			bool /*bool*/ ISteamRemoteStorage_FilePersisted( string /*const char **/ pchFile  );
			int /*int32*/ ISteamRemoteStorage_GetFileSize( string /*const char **/ pchFile  );
			long /*int64*/ ISteamRemoteStorage_GetFileTimestamp( string /*const char **/ pchFile  );
			RemoteStoragePlatform /*ERemoteStoragePlatform*/ ISteamRemoteStorage_GetSyncPlatforms( string /*const char **/ pchFile  );
			int /*int32*/ ISteamRemoteStorage_GetFileCount();
			IntPtr ISteamRemoteStorage_GetFileNameAndSize( int /*int*/ iFile , IntPtr /*int32 **/ pnFileSizeInBytes );
			bool /*bool*/ ISteamRemoteStorage_GetQuota( IntPtr /*int32 **/ pnTotalBytes, IntPtr /*int32 **/ puAvailableBytes );
			bool /*bool*/ ISteamRemoteStorage_IsCloudEnabledForAccount();
			bool /*bool*/ ISteamRemoteStorage_IsCloudEnabledForApp();
			void /*void*/ ISteamRemoteStorage_SetCloudEnabledForApp( bool /*bool*/ bEnabled  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UGCDownload( UGCHandle_t /*UGCHandle_t*/ hContent, uint /*uint32*/ unPriority  );
			bool /*bool*/ ISteamRemoteStorage_GetUGCDownloadProgress( UGCHandle_t /*UGCHandle_t*/ hContent, out int /*int32 **/ pnBytesDownloaded, out int /*int32 **/ pnBytesExpected );
			bool /*bool*/ ISteamRemoteStorage_GetUGCDetails( UGCHandle_t /*UGCHandle_t*/ hContent, ref AppId_t /*AppId_t **/ pnAppID, System.Text.StringBuilder /*char ***/ ppchName, IntPtr /*int32 **/ pnFileSizeInBytes, out CSteamID /*class CSteamID **/ pSteamIDOwner );
			int /*int32*/ ISteamRemoteStorage_UGCRead( UGCHandle_t /*UGCHandle_t*/ hContent, IntPtr /*void **/ pvData , int /*int32*/ cubDataToRead , uint /*uint32*/ cOffset , UGCReadAction /*EUGCReadAction*/ eAction  );
			int /*int32*/ ISteamRemoteStorage_GetCachedUGCCount();
			UGCHandle_t /*(UGCHandle_t)*/ ISteamRemoteStorage_GetCachedUGCHandle( int /*int32*/ iCachedContent  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_PublishWorkshopFile( string /*const char **/ pchFile , string /*const char **/ pchPreviewFile , AppId_t /*AppId_t*/ nConsumerAppId, string /*const char **/ pchTitle , string /*const char **/ pchDescription , RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility , IntPtr /*struct SteamParamStringArray_t **/ pTags, WorkshopFileType /*EWorkshopFileType*/ eWorkshopFileType  );
			PublishedFileUpdateHandle_t /*(PublishedFileUpdateHandle_t)*/ ISteamRemoteStorage_CreatePublishedFileUpdateRequest( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileFile( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchFile  );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFilePreviewFile( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchPreviewFile  );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileTitle( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchTitle  );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileDescription( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchDescription  );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileVisibility( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility  );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileTags( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, IntPtr /*struct SteamParamStringArray_t **/ pTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_CommitPublishedFileUpdate( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetPublishedFileDetails( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, uint /*uint32*/ unMaxSecondsOld  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_DeletePublishedFile( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserPublishedFiles( uint /*uint32*/ unStartIndex  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_SubscribePublishedFile( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserSubscribedFiles( uint /*uint32*/ unStartIndex  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UnsubscribePublishedFile( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			bool /*bool*/ ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription( PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchChangeDescription  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetPublishedItemVoteDetails( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UpdateUserPublishedItemVote( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, bool /*bool*/ bVoteUp  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_GetUserPublishedItemVoteDetails( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles( CSteamID /*class CSteamID*/ steamId, uint /*uint32*/ unStartIndex , IntPtr /*struct SteamParamStringArray_t **/ pRequiredTags, IntPtr /*struct SteamParamStringArray_t **/ pExcludedTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_PublishVideo( WorkshopVideoProvider /*EWorkshopVideoProvider*/ eVideoProvider , string /*const char **/ pchVideoAccount , string /*const char **/ pchVideoIdentifier , string /*const char **/ pchPreviewFile , AppId_t /*AppId_t*/ nConsumerAppId, string /*const char **/ pchTitle , string /*const char **/ pchDescription , RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility , IntPtr /*struct SteamParamStringArray_t **/ pTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_SetUserPublishedFileAction( PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, WorkshopFileAction /*EWorkshopFileAction*/ eAction  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumeratePublishedFilesByUserAction( WorkshopFileAction /*EWorkshopFileAction*/ eAction , uint /*uint32*/ unStartIndex  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_EnumeratePublishedWorkshopFiles( WorkshopEnumerationType /*EWorkshopEnumerationType*/ eEnumerationType , uint /*uint32*/ unStartIndex , uint /*uint32*/ unCount , uint /*uint32*/ unDays , IntPtr /*struct SteamParamStringArray_t **/ pTags, IntPtr /*struct SteamParamStringArray_t **/ pUserTags );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamRemoteStorage_UGCDownloadToLocation( UGCHandle_t /*UGCHandle_t*/ hContent, string /*const char **/ pchLocation , uint /*uint32*/ unPriority  );
			
			bool /*bool*/ ISteamUserStats_RequestCurrentStats();
			bool /*bool*/ ISteamUserStats_GetStat( string /*const char **/ pchName , out int /*int32 **/ pData );
			bool /*bool*/ ISteamUserStats_GetStat0( string /*const char **/ pchName , out float /*float **/ pData );
			bool /*bool*/ ISteamUserStats_SetStat( string /*const char **/ pchName , int /*int32*/ nData  );
			bool /*bool*/ ISteamUserStats_SetStat0( string /*const char **/ pchName , float /*float*/ fData  );
			bool /*bool*/ ISteamUserStats_UpdateAvgRateStat( string /*const char **/ pchName , float /*float*/ flCountThisSession , double /*double*/ dSessionLength  );
			bool /*bool*/ ISteamUserStats_GetAchievement( string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_SetAchievement( string /*const char **/ pchName  );
			bool /*bool*/ ISteamUserStats_ClearAchievement( string /*const char **/ pchName  );
			bool /*bool*/ ISteamUserStats_GetAchievementAndUnlockTime( string /*const char **/ pchName , out bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
			bool /*bool*/ ISteamUserStats_StoreStats();
			int /*int*/ ISteamUserStats_GetAchievementIcon( string /*const char **/ pchName  );
			IntPtr ISteamUserStats_GetAchievementDisplayAttribute( string /*const char **/ pchName , string /*const char **/ pchKey  );
			bool /*bool*/ ISteamUserStats_IndicateAchievementProgress( string /*const char **/ pchName , uint /*uint32*/ nCurProgress , uint /*uint32*/ nMaxProgress  );
			uint /*uint32*/ ISteamUserStats_GetNumAchievements();
			IntPtr ISteamUserStats_GetAchievementName( uint /*uint32*/ iAchievement  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestUserStats( CSteamID /*class CSteamID*/ steamIDUser );
			bool /*bool*/ ISteamUserStats_GetUserStat( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out int /*int32 **/ pData );
			bool /*bool*/ ISteamUserStats_GetUserStat0( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out float /*float **/ pData );
			bool /*bool*/ ISteamUserStats_GetUserAchievement( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_GetUserAchievementAndUnlockTime( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
			bool /*bool*/ ISteamUserStats_ResetAllStats( bool /*bool*/ bAchievementsToo  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_FindOrCreateLeaderboard( string /*const char **/ pchLeaderboardName , LeaderboardSortMethod /*ELeaderboardSortMethod*/ eLeaderboardSortMethod , LeaderboardDisplayType /*ELeaderboardDisplayType*/ eLeaderboardDisplayType  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_FindLeaderboard( string /*const char **/ pchLeaderboardName  );
			IntPtr ISteamUserStats_GetLeaderboardName( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
			int /*int*/ ISteamUserStats_GetLeaderboardEntryCount( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
			LeaderboardSortMethod /*ELeaderboardSortMethod*/ ISteamUserStats_GetLeaderboardSortMethod( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
			LeaderboardDisplayType /*ELeaderboardDisplayType*/ ISteamUserStats_GetLeaderboardDisplayType( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_DownloadLeaderboardEntries( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, LeaderboardDataRequest /*ELeaderboardDataRequest*/ eLeaderboardDataRequest , int /*int*/ nRangeStart , int /*int*/ nRangeEnd  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_DownloadLeaderboardEntriesForUsers( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, IntPtr /*class CSteamID **/ prgUsers, int /*int*/ cUsers  );
			bool /*bool*/ ISteamUserStats_GetDownloadedLeaderboardEntry( SteamLeaderboardEntries_t /*SteamLeaderboardEntries_t*/ hSteamLeaderboardEntries, int /*int*/ index , ref LeaderboardEntry_t /*struct LeaderboardEntry_t **/ pLeaderboardEntry, IntPtr /*int32 **/ pDetails, int /*int*/ cDetailsMax  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_UploadLeaderboardScore( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, LeaderboardUploadScoreMethod /*ELeaderboardUploadScoreMethod*/ eLeaderboardUploadScoreMethod , int /*int32*/ nScore , IntPtr /*const int32 **/ pScoreDetails, int /*int*/ cScoreDetailsCount  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_AttachLeaderboardUGC( SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, UGCHandle_t /*UGCHandle_t*/ hUGC );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_GetNumberOfCurrentPlayers();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestGlobalAchievementPercentages();
			int /*int*/ ISteamUserStats_GetMostAchievedAchievementInfo( System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen , out float /*float **/ pflPercent, out bool /*bool **/ pbAchieved );
			int /*int*/ ISteamUserStats_GetNextMostAchievedAchievementInfo( int /*int*/ iIteratorPrevious , System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen , out float /*float **/ pflPercent, out bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamUserStats_GetAchievementAchievedPercent( string /*const char **/ pchName , out float /*float **/ pflPercent );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUserStats_RequestGlobalStats( int /*int*/ nHistoryDays  );
			bool /*bool*/ ISteamUserStats_GetGlobalStat( string /*const char **/ pchStatName , out long /*int64 **/ pData );
			bool /*bool*/ ISteamUserStats_GetGlobalStat0( string /*const char **/ pchStatName , out double /*double **/ pData );
			int /*int32*/ ISteamUserStats_GetGlobalStatHistory( string /*const char **/ pchStatName , out long /*int64 **/ pData, uint /*uint32*/ cubData  );
			int /*int32*/ ISteamUserStats_GetGlobalStatHistory0( string /*const char **/ pchStatName , out double /*double **/ pData, uint /*uint32*/ cubData  );
			
			bool /*bool*/ ISteamApps_BIsSubscribed();
			bool /*bool*/ ISteamApps_BIsLowViolence();
			bool /*bool*/ ISteamApps_BIsCybercafe();
			bool /*bool*/ ISteamApps_BIsVACBanned();
			IntPtr ISteamApps_GetCurrentGameLanguage();
			IntPtr ISteamApps_GetAvailableGameLanguages();
			bool /*bool*/ ISteamApps_BIsSubscribedApp( AppId_t /*AppId_t*/ appID );
			bool /*bool*/ ISteamApps_BIsDlcInstalled( AppId_t /*AppId_t*/ appID );
			uint /*uint32*/ ISteamApps_GetEarliestPurchaseUnixTime( AppId_t /*AppId_t*/ nAppID );
			bool /*bool*/ ISteamApps_BIsSubscribedFromFreeWeekend();
			int /*int*/ ISteamApps_GetDLCCount();
			bool /*bool*/ ISteamApps_BGetDLCDataByIndex( int /*int*/ iDLC , ref AppId_t /*AppId_t **/ pAppID, out bool /*bool **/ pbAvailable, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize  );
			void /*void*/ ISteamApps_InstallDLC( AppId_t /*AppId_t*/ nAppID );
			void /*void*/ ISteamApps_UninstallDLC( AppId_t /*AppId_t*/ nAppID );
			void /*void*/ ISteamApps_RequestAppProofOfPurchaseKey( AppId_t /*AppId_t*/ nAppID );
			bool /*bool*/ ISteamApps_GetCurrentBetaName( System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize  );
			bool /*bool*/ ISteamApps_MarkContentCorrupt( bool /*bool*/ bMissingFilesOnly  );
			uint /*uint32*/ ISteamApps_GetInstalledDepots( AppId_t /*AppId_t*/ appID, IntPtr /*DepotId_t **/ pvecDepots, uint /*uint32*/ cMaxDepots  );
			uint /*uint32*/ ISteamApps_GetAppInstallDir( AppId_t /*AppId_t*/ appID, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderBufferSize  );
			bool /*bool*/ ISteamApps_BIsAppInstalled( AppId_t /*AppId_t*/ appID );
			CSteamID /*(class CSteamID)*/ ISteamApps_GetAppOwner();
			IntPtr ISteamApps_GetLaunchQueryParam( string /*const char **/ pchKey  );
			bool /*bool*/ ISteamApps_GetDlcDownloadProgress( AppId_t /*AppId_t*/ nAppID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
			int /*int*/ ISteamApps_GetAppBuildId();
			void /*void*/ ISteamApps_RequestAllProofOfPurchaseKeys();
			
			bool /*bool*/ ISteamNetworking_SendP2PPacket( CSteamID /*class CSteamID*/ steamIDRemote, IntPtr /*const void **/ pubData , uint /*uint32*/ cubData , P2PSend /*EP2PSend*/ eP2PSendType , int /*int*/ nChannel  );
			bool /*bool*/ ISteamNetworking_IsP2PPacketAvailable( out uint /*uint32 **/ pcubMsgSize, int /*int*/ nChannel  );
			bool /*bool*/ ISteamNetworking_ReadP2PPacket( IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize, out CSteamID /*class CSteamID **/ psteamIDRemote, int /*int*/ nChannel  );
			bool /*bool*/ ISteamNetworking_AcceptP2PSessionWithUser( CSteamID /*class CSteamID*/ steamIDRemote );
			bool /*bool*/ ISteamNetworking_CloseP2PSessionWithUser( CSteamID /*class CSteamID*/ steamIDRemote );
			bool /*bool*/ ISteamNetworking_CloseP2PChannelWithUser( CSteamID /*class CSteamID*/ steamIDRemote, int /*int*/ nChannel  );
			bool /*bool*/ ISteamNetworking_GetP2PSessionState( CSteamID /*class CSteamID*/ steamIDRemote, ref P2PSessionState_t /*struct P2PSessionState_t **/ pConnectionState );
			bool /*bool*/ ISteamNetworking_AllowP2PPacketRelay( bool /*bool*/ bAllow  );
			SNetListenSocket_t /*(SNetListenSocket_t)*/ ISteamNetworking_CreateListenSocket( int /*int*/ nVirtualP2PPort , uint /*uint32*/ nIP , ushort /*uint16*/ nPort , bool /*bool*/ bAllowUseOfPacketRelay  );
			SNetSocket_t /*(SNetSocket_t)*/ ISteamNetworking_CreateP2PConnectionSocket( CSteamID /*class CSteamID*/ steamIDTarget, int /*int*/ nVirtualPort , int /*int*/ nTimeoutSec , bool /*bool*/ bAllowUseOfPacketRelay  );
			SNetSocket_t /*(SNetSocket_t)*/ ISteamNetworking_CreateConnectionSocket( uint /*uint32*/ nIP , ushort /*uint16*/ nPort , int /*int*/ nTimeoutSec  );
			bool /*bool*/ ISteamNetworking_DestroySocket( SNetSocket_t /*SNetSocket_t*/ hSocket, bool /*bool*/ bNotifyRemoteEnd  );
			bool /*bool*/ ISteamNetworking_DestroyListenSocket( SNetListenSocket_t /*SNetListenSocket_t*/ hSocket, bool /*bool*/ bNotifyRemoteEnd  );
			bool /*bool*/ ISteamNetworking_SendDataOnSocket( SNetSocket_t /*SNetSocket_t*/ hSocket, IntPtr /*void **/ pubData , uint /*uint32*/ cubData , bool /*bool*/ bReliable  );
			bool /*bool*/ ISteamNetworking_IsDataAvailableOnSocket( SNetSocket_t /*SNetSocket_t*/ hSocket, out uint /*uint32 **/ pcubMsgSize );
			bool /*bool*/ ISteamNetworking_RetrieveDataFromSocket( SNetSocket_t /*SNetSocket_t*/ hSocket, IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize );
			bool /*bool*/ ISteamNetworking_IsDataAvailable( SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, out uint /*uint32 **/ pcubMsgSize, ref SNetSocket_t /*SNetSocket_t **/ phSocket );
			bool /*bool*/ ISteamNetworking_RetrieveData( SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize, ref SNetSocket_t /*SNetSocket_t **/ phSocket );
			bool /*bool*/ ISteamNetworking_GetSocketInfo( SNetSocket_t /*SNetSocket_t*/ hSocket, out CSteamID /*class CSteamID **/ pSteamIDRemote, IntPtr /*int **/ peSocketStatus, out uint /*uint32 **/ punIPRemote, out ushort /*uint16 **/ punPortRemote );
			bool /*bool*/ ISteamNetworking_GetListenSocketInfo( SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnPort );
			SNetSocketConnectionType /*ESNetSocketConnectionType*/ ISteamNetworking_GetSocketConnectionType( SNetSocket_t /*SNetSocket_t*/ hSocket );
			int /*int*/ ISteamNetworking_GetMaxPacketSize( SNetSocket_t /*SNetSocket_t*/ hSocket );
			
			ScreenshotHandle /*(ScreenshotHandle)*/ ISteamScreenshots_WriteScreenshot( IntPtr /*void **/ pubRGB , uint /*uint32*/ cubRGB , int /*int*/ nWidth , int /*int*/ nHeight  );
			ScreenshotHandle /*(ScreenshotHandle)*/ ISteamScreenshots_AddScreenshotToLibrary( string /*const char **/ pchFilename , string /*const char **/ pchThumbnailFilename , int /*int*/ nWidth , int /*int*/ nHeight  );
			void /*void*/ ISteamScreenshots_TriggerScreenshot();
			void /*void*/ ISteamScreenshots_HookScreenshots( bool /*bool*/ bHook  );
			bool /*bool*/ ISteamScreenshots_SetLocation( ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, string /*const char **/ pchLocation  );
			bool /*bool*/ ISteamScreenshots_TagUser( ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, CSteamID /*class CSteamID*/ steamID );
			bool /*bool*/ ISteamScreenshots_TagPublishedFile( ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileID );
			
			bool /*bool*/ ISteamMusic_BIsEnabled();
			bool /*bool*/ ISteamMusic_BIsPlaying();
			AudioPlayback_Status /*AudioPlayback_Status*/ ISteamMusic_GetPlaybackStatus();
			void /*void*/ ISteamMusic_Play();
			void /*void*/ ISteamMusic_Pause();
			void /*void*/ ISteamMusic_PlayPrevious();
			void /*void*/ ISteamMusic_PlayNext();
			void /*void*/ ISteamMusic_SetVolume( float /*float*/ flVolume  );
			float /*float*/ ISteamMusic_GetVolume();
			
			bool /*bool*/ ISteamMusicRemote_RegisterSteamMusicRemote( string /*const char **/ pchName  );
			bool /*bool*/ ISteamMusicRemote_DeregisterSteamMusicRemote();
			bool /*bool*/ ISteamMusicRemote_BIsCurrentMusicRemote();
			bool /*bool*/ ISteamMusicRemote_BActivationSuccess( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_SetDisplayName( string /*const char **/ pchDisplayName  );
			bool /*bool*/ ISteamMusicRemote_SetPNGIcon_64x64( IntPtr /*void **/ pvBuffer , uint /*uint32*/ cbBufferLength  );
			bool /*bool*/ ISteamMusicRemote_EnablePlayPrevious( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_EnablePlayNext( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_EnableShuffled( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_EnableLooped( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_EnableQueue( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_EnablePlaylists( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_UpdatePlaybackStatus( AudioPlayback_Status /*AudioPlayback_Status*/ nStatus  );
			bool /*bool*/ ISteamMusicRemote_UpdateShuffled( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_UpdateLooped( bool /*bool*/ bValue  );
			bool /*bool*/ ISteamMusicRemote_UpdateVolume( float /*float*/ flValue  );
			bool /*bool*/ ISteamMusicRemote_CurrentEntryWillChange();
			bool /*bool*/ ISteamMusicRemote_CurrentEntryIsAvailable( bool /*bool*/ bAvailable  );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryText( string /*const char **/ pchText  );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds( int /*int*/ nValue  );
			bool /*bool*/ ISteamMusicRemote_UpdateCurrentEntryCoverArt( IntPtr /*void **/ pvBuffer , uint /*uint32*/ cbBufferLength  );
			bool /*bool*/ ISteamMusicRemote_CurrentEntryDidChange();
			bool /*bool*/ ISteamMusicRemote_QueueWillChange();
			bool /*bool*/ ISteamMusicRemote_ResetQueueEntries();
			bool /*bool*/ ISteamMusicRemote_SetQueueEntry( int /*int*/ nID , int /*int*/ nPosition , string /*const char **/ pchEntryText  );
			bool /*bool*/ ISteamMusicRemote_SetCurrentQueueEntry( int /*int*/ nID  );
			bool /*bool*/ ISteamMusicRemote_QueueDidChange();
			bool /*bool*/ ISteamMusicRemote_PlaylistWillChange();
			bool /*bool*/ ISteamMusicRemote_ResetPlaylistEntries();
			bool /*bool*/ ISteamMusicRemote_SetPlaylistEntry( int /*int*/ nID , int /*int*/ nPosition , string /*const char **/ pchEntryText  );
			bool /*bool*/ ISteamMusicRemote_SetCurrentPlaylistEntry( int /*int*/ nID  );
			bool /*bool*/ ISteamMusicRemote_PlaylistDidChange();
			
			HTTPRequestHandle /*(HTTPRequestHandle)*/ ISteamHTTP_CreateHTTPRequest( HTTPMethod /*EHTTPMethod*/ eHTTPRequestMethod , string /*const char **/ pchAbsoluteURL  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestContextValue( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ulong /*uint64*/ ulContextValue  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestNetworkActivityTimeout( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ unTimeoutSeconds  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestHeaderValue( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , string /*const char **/ pchHeaderValue  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestGetOrPostParameter( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchParamName , string /*const char **/ pchParamValue  );
			bool /*bool*/ ISteamHTTP_SendHTTPRequest( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ref SteamAPICall_t /*SteamAPICall_t **/ pCallHandle );
			bool /*bool*/ ISteamHTTP_SendHTTPRequestAndStreamResponse( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ref SteamAPICall_t /*SteamAPICall_t **/ pCallHandle );
			bool /*bool*/ ISteamHTTP_DeferHTTPRequest( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
			bool /*bool*/ ISteamHTTP_PrioritizeHTTPRequest( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseHeaderSize( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , out uint /*uint32 **/ unResponseHeaderSize );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseHeaderValue( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , out byte /*uint8 **/ pHeaderValueBuffer, uint /*uint32*/ unBufferSize  );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseBodySize( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out uint /*uint32 **/ unBodySize );
			bool /*bool*/ ISteamHTTP_GetHTTPResponseBodyData( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize  );
			bool /*bool*/ ISteamHTTP_GetHTTPStreamingResponseBodyData( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ cOffset , out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize  );
			bool /*bool*/ ISteamHTTP_ReleaseHTTPRequest( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
			bool /*bool*/ ISteamHTTP_GetHTTPDownloadProgressPct( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out float /*float **/ pflPercentOut );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestRawPostBody( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchContentType , out byte /*uint8 **/ pubBody, uint /*uint32*/ unBodyLen  );
			HTTPCookieContainerHandle /*(HTTPCookieContainerHandle)*/ ISteamHTTP_CreateCookieContainer( bool /*bool*/ bAllowResponsesToModify  );
			bool /*bool*/ ISteamHTTP_ReleaseCookieContainer( HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer );
			bool /*bool*/ ISteamHTTP_SetCookie( HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer, string /*const char **/ pchHost , string /*const char **/ pchUrl , string /*const char **/ pchCookie  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestCookieContainer( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestUserAgentInfo( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchUserAgentInfo  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, bool /*bool*/ bRequireVerifiedCertificate  );
			bool /*bool*/ ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ unMilliseconds  );
			bool /*bool*/ ISteamHTTP_GetHTTPRequestWasTimedOut( HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out bool /*bool **/ pbWasTimedOut );
			
			ClientUnifiedMessageHandle /*(ClientUnifiedMessageHandle)*/ ISteamUnifiedMessages_SendMethod( string /*const char **/ pchServiceMethod , IntPtr /*const void **/ pRequestBuffer , uint /*uint32*/ unRequestBufferSize , ulong /*uint64*/ unContext  );
			bool /*bool*/ ISteamUnifiedMessages_GetMethodResponseInfo( ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle, out uint /*uint32 **/ punResponseSize, out Result /*EResult **/ peResult );
			bool /*bool*/ ISteamUnifiedMessages_GetMethodResponseData( ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle, IntPtr /*void **/ pResponseBuffer , uint /*uint32*/ unResponseBufferSize , bool /*bool*/ bAutoRelease  );
			bool /*bool*/ ISteamUnifiedMessages_ReleaseMethod( ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle );
			bool /*bool*/ ISteamUnifiedMessages_SendNotification( string /*const char **/ pchServiceNotification , IntPtr /*const void **/ pNotificationBuffer , uint /*uint32*/ unNotificationBufferSize  );
			
			bool /*bool*/ ISteamController_Init();
			bool /*bool*/ ISteamController_Shutdown();
			void /*void*/ ISteamController_RunFrame();
			int /*int*/ ISteamController_GetConnectedControllers( IntPtr /*ControllerHandle_t **/ handlesOut );
			bool /*bool*/ ISteamController_ShowBindingPanel( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle );
			ControllerActionSetHandle_t /*(ControllerActionSetHandle_t)*/ ISteamController_GetActionSetHandle( string /*const char **/ pszActionSetName  );
			void /*void*/ ISteamController_ActivateActionSet( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle );
			ControllerActionSetHandle_t /*(ControllerActionSetHandle_t)*/ ISteamController_GetCurrentActionSet( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle );
			ControllerDigitalActionHandle_t /*(ControllerDigitalActionHandle_t)*/ ISteamController_GetDigitalActionHandle( string /*const char **/ pszActionName  );
			ControllerDigitalActionData_t /*struct ControllerDigitalActionData_t*/ ISteamController_GetDigitalActionData( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerDigitalActionHandle_t /*ControllerDigitalActionHandle_t*/ digitalActionHandle );
			int /*int*/ ISteamController_GetDigitalActionOrigins( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle, ControllerDigitalActionHandle_t /*ControllerDigitalActionHandle_t*/ digitalActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
			ControllerAnalogActionHandle_t /*(ControllerAnalogActionHandle_t)*/ ISteamController_GetAnalogActionHandle( string /*const char **/ pszActionName  );
			ControllerAnalogActionData_t /*struct ControllerAnalogActionData_t*/ ISteamController_GetAnalogActionData( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ analogActionHandle );
			int /*int*/ ISteamController_GetAnalogActionOrigins( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ analogActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
			void /*void*/ ISteamController_StopAnalogActionMomentum( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ eAction );
			void /*void*/ ISteamController_TriggerHapticPulse( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad , ushort /*unsigned short*/ usDurationMicroSec  );
			void /*void*/ ISteamController_TriggerRepeatedHapticPulse( ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad , ushort /*unsigned short*/ usDurationMicroSec , ushort /*unsigned short*/ usOffMicroSec , ushort /*unsigned short*/ unRepeat , uint /*unsigned int*/ nFlags  );
			
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryUserUGCRequest( AccountID_t /*AccountID_t*/ unAccountID, UserUGCList /*EUserUGCList*/ eListType , UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingUGCType , UserUGCListSortOrder /*EUserUGCListSortOrder*/ eSortOrder , AppId_t /*AppId_t*/ nCreatorAppID, AppId_t /*AppId_t*/ nConsumerAppID, uint /*uint32*/ unPage  );
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryAllUGCRequest( UGCQuery /*EUGCQuery*/ eQueryType , UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingeMatchingUGCTypeFileType , AppId_t /*AppId_t*/ nCreatorAppID, AppId_t /*AppId_t*/ nConsumerAppID, uint /*uint32*/ unPage  );
			UGCQueryHandle_t /*(UGCQueryHandle_t)*/ ISteamUGC_CreateQueryUGCDetailsRequest( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ unNumPublishedFileIDs  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SendQueryUGCRequest( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle );
			bool /*bool*/ ISteamUGC_GetQueryUGCResult( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , ref SteamUGCDetails_t /*struct SteamUGCDetails_t **/ pDetails );
			bool /*bool*/ ISteamUGC_GetQueryUGCPreviewURL( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , System.Text.StringBuilder /*char **/ pchURL, uint /*uint32*/ cchURLSize  );
			bool /*bool*/ ISteamUGC_GetQueryUGCMetadata( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , System.Text.StringBuilder /*char **/ pchMetadata, uint /*uint32*/ cchMetadatasize  );
			bool /*bool*/ ISteamUGC_GetQueryUGCChildren( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries  );
			bool /*bool*/ ISteamUGC_GetQueryUGCStatistic( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , ItemStatistic /*EItemStatistic*/ eStatType , out uint /*uint32 **/ pStatValue );
			uint /*uint32*/ ISteamUGC_GetQueryUGCNumAdditionalPreviews( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index  );
			bool /*bool*/ ISteamUGC_GetQueryUGCAdditionalPreview( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , uint /*uint32*/ previewIndex , System.Text.StringBuilder /*char **/ pchURLOrVideoID, uint /*uint32*/ cchURLSize , System.Text.StringBuilder /*char **/ pchOriginalFileName, uint /*uint32*/ cchOriginalFileNameSize , out ItemPreviewType /*EItemPreviewType **/ pPreviewType );
			uint /*uint32*/ ISteamUGC_GetQueryUGCNumKeyValueTags( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index  );
			bool /*bool*/ ISteamUGC_GetQueryUGCKeyValueTag( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , uint /*uint32*/ keyValueTagIndex , System.Text.StringBuilder /*char **/ pchKey, uint /*uint32*/ cchKeySize , System.Text.StringBuilder /*char **/ pchValue, uint /*uint32*/ cchValueSize  );
			bool /*bool*/ ISteamUGC_ReleaseQueryUGCRequest( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle );
			bool /*bool*/ ISteamUGC_AddRequiredTag( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pTagName  );
			bool /*bool*/ ISteamUGC_AddExcludedTag( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pTagName  );
			bool /*bool*/ ISteamUGC_SetReturnKeyValueTags( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnKeyValueTags  );
			bool /*bool*/ ISteamUGC_SetReturnLongDescription( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnLongDescription  );
			bool /*bool*/ ISteamUGC_SetReturnMetadata( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnMetadata  );
			bool /*bool*/ ISteamUGC_SetReturnChildren( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnChildren  );
			bool /*bool*/ ISteamUGC_SetReturnAdditionalPreviews( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnAdditionalPreviews  );
			bool /*bool*/ ISteamUGC_SetReturnTotalOnly( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnTotalOnly  );
			bool /*bool*/ ISteamUGC_SetLanguage( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pchLanguage  );
			bool /*bool*/ ISteamUGC_SetAllowCachedResponse( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ unMaxAgeSeconds  );
			bool /*bool*/ ISteamUGC_SetCloudFileNameFilter( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pMatchCloudFileName  );
			bool /*bool*/ ISteamUGC_SetMatchAnyTag( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bMatchAnyTag  );
			bool /*bool*/ ISteamUGC_SetSearchText( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pSearchText  );
			bool /*bool*/ ISteamUGC_SetRankedByTrendDays( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ unDays  );
			bool /*bool*/ ISteamUGC_AddRequiredKeyValueTag( UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pKey , string /*const char **/ pValue  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RequestUGCDetails( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, uint /*uint32*/ unMaxAgeSeconds  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_CreateItem( AppId_t /*AppId_t*/ nConsumerAppId, WorkshopFileType /*EWorkshopFileType*/ eFileType  );
			UGCUpdateHandle_t /*(UGCUpdateHandle_t)*/ ISteamUGC_StartItemUpdate( AppId_t /*AppId_t*/ nConsumerAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			bool /*bool*/ ISteamUGC_SetItemTitle( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchTitle  );
			bool /*bool*/ ISteamUGC_SetItemDescription( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchDescription  );
			bool /*bool*/ ISteamUGC_SetItemUpdateLanguage( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchLanguage  );
			bool /*bool*/ ISteamUGC_SetItemMetadata( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchMetaData  );
			bool /*bool*/ ISteamUGC_SetItemVisibility( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility  );
			bool /*bool*/ ISteamUGC_SetItemTags( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ updateHandle, IntPtr /*const struct SteamParamStringArray_t **/ pTags );
			bool /*bool*/ ISteamUGC_SetItemContent( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszContentFolder  );
			bool /*bool*/ ISteamUGC_SetItemPreview( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszPreviewFile  );
			bool /*bool*/ ISteamUGC_RemoveItemKeyValueTags( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchKey  );
			bool /*bool*/ ISteamUGC_AddItemKeyValueTag( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchKey , string /*const char **/ pchValue  );
			bool /*bool*/ ISteamUGC_AddItemPreviewFile( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszPreviewFile , ItemPreviewType /*EItemPreviewType*/ type  );
			bool /*bool*/ ISteamUGC_AddItemPreviewVideo( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszVideoID  );
			bool /*bool*/ ISteamUGC_UpdateItemPreviewFile( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index , string /*const char **/ pszPreviewFile  );
			bool /*bool*/ ISteamUGC_UpdateItemPreviewVideo( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index , string /*const char **/ pszVideoID  );
			bool /*bool*/ ISteamUGC_RemoveItemPreview( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SubmitItemUpdate( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchChangeNote  );
			ItemUpdateStatus /*EItemUpdateStatus*/ ISteamUGC_GetItemUpdateProgress( UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, out ulong /*uint64 **/ punBytesProcessed, out ulong /*uint64 **/ punBytesTotal );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SetUserItemVote( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, bool /*bool*/ bVoteUp  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_GetUserItemVote( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_AddItemToFavorites( AppId_t /*AppId_t*/ nAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_RemoveItemFromFavorites( AppId_t /*AppId_t*/ nAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_SubscribeItem( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamUGC_UnsubscribeItem( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			uint /*uint32*/ ISteamUGC_GetNumSubscribedItems();
			uint /*uint32*/ ISteamUGC_GetSubscribedItems( IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries  );
			uint /*uint32*/ ISteamUGC_GetItemState( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
			bool /*bool*/ ISteamUGC_GetItemInstallInfo( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, out ulong /*uint64 **/ punSizeOnDisk, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderSize , out uint /*uint32 **/ punTimeStamp );
			bool /*bool*/ ISteamUGC_GetItemDownloadInfo( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
			bool /*bool*/ ISteamUGC_DownloadItem( PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, bool /*bool*/ bHighPriority  );
			bool /*bool*/ ISteamUGC_BInitWorkshopForGameServer( DepotId_t /*DepotId_t*/ unWorkshopDepotID, string /*const char **/ pszFolder  );
			void /*void*/ ISteamUGC_SuspendDownloads( bool /*bool*/ bSuspend  );
			
			uint /*uint32*/ ISteamAppList_GetNumInstalledApps();
			uint /*uint32*/ ISteamAppList_GetInstalledApps( IntPtr /*AppId_t **/ pvecAppID, uint /*uint32*/ unMaxAppIDs  );
			int /*int*/ ISteamAppList_GetAppName( AppId_t /*AppId_t*/ nAppID, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameMax  );
			int /*int*/ ISteamAppList_GetAppInstallDir( AppId_t /*AppId_t*/ nAppID, System.Text.StringBuilder /*char **/ pchDirectory, int /*int*/ cchNameMax  );
			int /*int*/ ISteamAppList_GetAppBuildId( AppId_t /*AppId_t*/ nAppID );
			
			void /*void*/ ISteamHTMLSurface_DestructISteamHTMLSurface();
			bool /*bool*/ ISteamHTMLSurface_Init();
			bool /*bool*/ ISteamHTMLSurface_Shutdown();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamHTMLSurface_CreateBrowser( string /*const char **/ pchUserAgent , string /*const char **/ pchUserCSS  );
			void /*void*/ ISteamHTMLSurface_RemoveBrowser( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_LoadURL( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchURL , string /*const char **/ pchPostData  );
			void /*void*/ ISteamHTMLSurface_SetSize( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ unWidth , uint /*uint32*/ unHeight  );
			void /*void*/ ISteamHTMLSurface_StopLoad( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_Reload( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GoBack( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GoForward( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_AddHeader( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchKey , string /*const char **/ pchValue  );
			void /*void*/ ISteamHTMLSurface_ExecuteJavascript( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchScript  );
			void /*void*/ ISteamHTMLSurface_MouseUp( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
			void /*void*/ ISteamHTMLSurface_MouseDown( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
			void /*void*/ ISteamHTMLSurface_MouseDoubleClick( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
			void /*void*/ ISteamHTMLSurface_MouseMove( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int*/ x , int /*int*/ y  );
			void /*void*/ ISteamHTMLSurface_MouseWheel( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int32*/ nDelta  );
			void /*void*/ ISteamHTMLSurface_KeyDown( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nNativeKeyCode , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
			void /*void*/ ISteamHTMLSurface_KeyUp( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nNativeKeyCode , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
			void /*void*/ ISteamHTMLSurface_KeyChar( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ cUnicodeChar , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
			void /*void*/ ISteamHTMLSurface_SetHorizontalScroll( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll  );
			void /*void*/ ISteamHTMLSurface_SetVerticalScroll( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll  );
			void /*void*/ ISteamHTMLSurface_SetKeyFocus( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bHasKeyFocus  );
			void /*void*/ ISteamHTMLSurface_ViewSource( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_CopyToClipboard( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_PasteFromClipboard( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_Find( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchSearchStr , bool /*bool*/ bCurrentlyInFind , bool /*bool*/ bReverse  );
			void /*void*/ ISteamHTMLSurface_StopFind( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
			void /*void*/ ISteamHTMLSurface_GetLinkAtPosition( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int*/ x , int /*int*/ y  );
			void /*void*/ ISteamHTMLSurface_SetCookie( string /*const char **/ pchHostname , string /*const char **/ pchKey , string /*const char **/ pchValue , string /*const char **/ pchPath , RTime32 /*RTime32*/ nExpires, bool /*bool*/ bSecure , bool /*bool*/ bHTTPOnly  );
			void /*void*/ ISteamHTMLSurface_SetPageScaleFactor( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, float /*float*/ flZoom , int /*int*/ nPointX , int /*int*/ nPointY  );
			void /*void*/ ISteamHTMLSurface_SetBackgroundMode( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bBackgroundMode  );
			void /*void*/ ISteamHTMLSurface_AllowStartRequest( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bAllowed  );
			void /*void*/ ISteamHTMLSurface_JSDialogResponse( HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bResult  );
			
			Result /*EResult*/ ISteamInventory_GetResultStatus( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
			bool /*bool*/ ISteamInventory_GetResultItems( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, IntPtr /*struct SteamItemDetails_t **/ pOutItemsArray, out uint /*uint32 **/ punOutItemsArraySize );
			uint /*uint32*/ ISteamInventory_GetResultTimestamp( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
			bool /*bool*/ ISteamInventory_CheckResultSteamID( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, CSteamID /*class CSteamID*/ steamIDExpected );
			void /*void*/ ISteamInventory_DestroyResult( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
			bool /*bool*/ ISteamInventory_GetAllItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle );
			bool /*bool*/ ISteamInventory_GetItemsByID( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemInstanceID_t **/ pInstanceIDs, uint /*uint32*/ unCountInstanceIDs  );
			bool /*bool*/ ISteamInventory_SerializeResult( SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, IntPtr /*void **/ pOutBuffer , out uint /*uint32 **/ punOutBufferSize );
			bool /*bool*/ ISteamInventory_DeserializeResult( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pOutResultHandle, IntPtr /*const void **/ pBuffer , uint /*uint32*/ unBufferSize , bool /*bool*/ bRESERVED_MUST_BE_FALSE  );
			bool /*bool*/ ISteamInventory_GenerateItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemDef_t **/ pArrayItemDefs, out uint /*const uint32 **/ punArrayQuantity, uint /*uint32*/ unArrayLength  );
			bool /*bool*/ ISteamInventory_GrantPromoItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle );
			bool /*bool*/ ISteamInventory_AddPromoItem( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemDef_t /*SteamItemDef_t*/ itemDef );
			bool /*bool*/ ISteamInventory_AddPromoItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemDef_t **/ pArrayItemDefs, uint /*uint32*/ unArrayLength  );
			bool /*bool*/ ISteamInventory_ConsumeItem( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemConsume, uint /*uint32*/ unQuantity  );
			bool /*bool*/ ISteamInventory_ExchangeItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, ref SteamItemDef_t /*const SteamItemDef_t **/ pArrayGenerate, out uint /*const uint32 **/ punArrayGenerateQuantity, uint /*uint32*/ unArrayGenerateLength , IntPtr /*const SteamItemInstanceID_t **/ pArrayDestroy, IntPtr /*const uint32 **/ punArrayDestroyQuantity, uint /*uint32*/ unArrayDestroyLength  );
			bool /*bool*/ ISteamInventory_TransferItemQuantity( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemIdSource, uint /*uint32*/ unQuantity , SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemIdDest );
			void /*void*/ ISteamInventory_SendItemDropHeartbeat();
			bool /*bool*/ ISteamInventory_TriggerItemDrop( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemDef_t /*SteamItemDef_t*/ dropListDefinition );
			bool /*bool*/ ISteamInventory_TradeItems( ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, CSteamID /*class CSteamID*/ steamIDTradePartner, ref SteamItemInstanceID_t /*const SteamItemInstanceID_t **/ pArrayGive, out uint /*const uint32 **/ pArrayGiveQuantity, uint /*uint32*/ nArrayGiveLength , ref SteamItemInstanceID_t /*const SteamItemInstanceID_t **/ pArrayGet, out uint /*const uint32 **/ pArrayGetQuantity, uint /*uint32*/ nArrayGetLength  );
			bool /*bool*/ ISteamInventory_LoadItemDefinitions();
			bool /*bool*/ ISteamInventory_GetItemDefinitionIDs( IntPtr /*SteamItemDef_t **/ pItemDefIDs, out uint /*uint32 **/ punItemDefIDsArraySize );
			bool /*bool*/ ISteamInventory_GetItemDefinitionProperty( SteamItemDef_t /*SteamItemDef_t*/ iDefinition, string /*const char **/ pchPropertyName , System.Text.StringBuilder /*char **/ pchValueBuffer, out uint /*uint32 **/ punValueBufferSize );
			
			void /*void*/ ISteamVideo_GetVideoURL( AppId_t /*AppId_t*/ unVideoAppID );
			bool /*bool*/ ISteamVideo_IsBroadcasting( IntPtr /*int **/ pnNumViewers );
			
			bool /*bool*/ ISteamGameServer_InitGameServer( uint /*uint32*/ unIP , ushort /*uint16*/ usGamePort , ushort /*uint16*/ usQueryPort , uint /*uint32*/ unFlags , AppId_t /*AppId_t*/ nGameAppId, string /*const char **/ pchVersionString  );
			void /*void*/ ISteamGameServer_SetProduct( string /*const char **/ pszProduct  );
			void /*void*/ ISteamGameServer_SetGameDescription( string /*const char **/ pszGameDescription  );
			void /*void*/ ISteamGameServer_SetModDir( string /*const char **/ pszModDir  );
			void /*void*/ ISteamGameServer_SetDedicatedServer( bool /*bool*/ bDedicated  );
			void /*void*/ ISteamGameServer_LogOn( string /*const char **/ pszToken  );
			void /*void*/ ISteamGameServer_LogOnAnonymous();
			void /*void*/ ISteamGameServer_LogOff();
			bool /*bool*/ ISteamGameServer_BLoggedOn();
			bool /*bool*/ ISteamGameServer_BSecure();
			CSteamID /*(class CSteamID)*/ ISteamGameServer_GetSteamID();
			bool /*bool*/ ISteamGameServer_WasRestartRequested();
			void /*void*/ ISteamGameServer_SetMaxPlayerCount( int /*int*/ cPlayersMax  );
			void /*void*/ ISteamGameServer_SetBotPlayerCount( int /*int*/ cBotplayers  );
			void /*void*/ ISteamGameServer_SetServerName( string /*const char **/ pszServerName  );
			void /*void*/ ISteamGameServer_SetMapName( string /*const char **/ pszMapName  );
			void /*void*/ ISteamGameServer_SetPasswordProtected( bool /*bool*/ bPasswordProtected  );
			void /*void*/ ISteamGameServer_SetSpectatorPort( ushort /*uint16*/ unSpectatorPort  );
			void /*void*/ ISteamGameServer_SetSpectatorServerName( string /*const char **/ pszSpectatorServerName  );
			void /*void*/ ISteamGameServer_ClearAllKeyValues();
			void /*void*/ ISteamGameServer_SetKeyValue( string /*const char **/ pKey , string /*const char **/ pValue  );
			void /*void*/ ISteamGameServer_SetGameTags( string /*const char **/ pchGameTags  );
			void /*void*/ ISteamGameServer_SetGameData( string /*const char **/ pchGameData  );
			void /*void*/ ISteamGameServer_SetRegion( string /*const char **/ pszRegion  );
			bool /*bool*/ ISteamGameServer_SendUserConnectAndAuthenticate( uint /*uint32*/ unIPClient , IntPtr /*const void **/ pvAuthBlob , uint /*uint32*/ cubAuthBlobSize , out CSteamID /*class CSteamID **/ pSteamIDUser );
			CSteamID /*(class CSteamID)*/ ISteamGameServer_CreateUnauthenticatedUserConnection();
			void /*void*/ ISteamGameServer_SendUserDisconnect( CSteamID /*class CSteamID*/ steamIDUser );
			bool /*bool*/ ISteamGameServer_BUpdateUserData( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchPlayerName , uint /*uint32*/ uScore  );
			HAuthTicket /*(HAuthTicket)*/ ISteamGameServer_GetAuthSessionTicket( IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
			BeginAuthSessionResult /*EBeginAuthSessionResult*/ ISteamGameServer_BeginAuthSession( IntPtr /*const void **/ pAuthTicket , int /*int*/ cbAuthTicket , CSteamID /*class CSteamID*/ steamID );
			void /*void*/ ISteamGameServer_EndAuthSession( CSteamID /*class CSteamID*/ steamID );
			void /*void*/ ISteamGameServer_CancelAuthTicket( HAuthTicket /*HAuthTicket*/ hAuthTicket );
			UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ ISteamGameServer_UserHasLicenseForApp( CSteamID /*class CSteamID*/ steamID, AppId_t /*AppId_t*/ appID );
			bool /*bool*/ ISteamGameServer_RequestUserGroupStatus( CSteamID /*class CSteamID*/ steamIDUser, CSteamID /*class CSteamID*/ steamIDGroup );
			void /*void*/ ISteamGameServer_GetGameplayStats();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_GetServerReputation();
			uint /*uint32*/ ISteamGameServer_GetPublicIP();
			bool /*bool*/ ISteamGameServer_HandleIncomingPacket( IntPtr /*const void **/ pData , int /*int*/ cbData , uint /*uint32*/ srcIP , ushort /*uint16*/ srcPort  );
			int /*int*/ ISteamGameServer_GetNextOutgoingPacket( IntPtr /*void **/ pOut , int /*int*/ cbMaxOut , out uint /*uint32 **/ pNetAdr, out ushort /*uint16 **/ pPort );
			void /*void*/ ISteamGameServer_EnableHeartbeats( bool /*bool*/ bActive  );
			void /*void*/ ISteamGameServer_SetHeartbeatInterval( int /*int*/ iHeartbeatInterval  );
			void /*void*/ ISteamGameServer_ForceHeartbeat();
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_AssociateWithClan( CSteamID /*class CSteamID*/ steamIDClan );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServer_ComputeNewPlayerCompatibility( CSteamID /*class CSteamID*/ steamIDNewPlayer );
			
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServerStats_RequestUserStats( CSteamID /*class CSteamID*/ steamIDUser );
			bool /*bool*/ ISteamGameServerStats_GetUserStat( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out int /*int32 **/ pData );
			bool /*bool*/ ISteamGameServerStats_GetUserStat0( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out float /*float **/ pData );
			bool /*bool*/ ISteamGameServerStats_GetUserAchievement( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
			bool /*bool*/ ISteamGameServerStats_SetUserStat( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , int /*int32*/ nData  );
			bool /*bool*/ ISteamGameServerStats_SetUserStat0( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , float /*float*/ fData  );
			bool /*bool*/ ISteamGameServerStats_UpdateUserAvgRateStat( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , float /*float*/ flCountThisSession , double /*double*/ dSessionLength  );
			bool /*bool*/ ISteamGameServerStats_SetUserAchievement( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName  );
			bool /*bool*/ ISteamGameServerStats_ClearUserAchievement( CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName  );
			SteamAPICall_t /*(SteamAPICall_t)*/ ISteamGameServerStats_StoreUserStats( CSteamID /*class CSteamID*/ steamIDUser );
			
			void /*void*/ SteamApi_SteamAPI_Init();
			void /*void*/ SteamApi_SteamAPI_RunCallbacks();
			void /*void*/ SteamApi_SteamGameServer_RunCallbacks();
			void /*void*/ SteamApi_SteamAPI_RegisterCallback( IntPtr /*void **/ pCallback , int /*int*/ callback  );
			void /*void*/ SteamApi_SteamAPI_UnregisterCallback( IntPtr /*void **/ pCallback  );
			bool /*bool*/ SteamApi_SteamInternal_GameServer_Init( uint /*uint32*/ unIP , ushort /*uint16*/ usPort , ushort /*uint16*/ usGamePort , ushort /*uint16*/ usQueryPort , int /*int*/ eServerMode , string /*const char **/ pchVersionString  );
			void /*void*/ SteamApi_SteamAPI_Shutdown();
			HSteamUser /*(HSteamUser)*/ SteamApi_SteamAPI_GetHSteamUser();
			HSteamPipe /*(HSteamPipe)*/ SteamApi_SteamAPI_GetHSteamPipe();
			HSteamUser /*(HSteamUser)*/ SteamApi_SteamGameServer_GetHSteamUser();
			HSteamPipe /*(HSteamPipe)*/ SteamApi_SteamGameServer_GetHSteamPipe();
			IntPtr /*void **/ SteamApi_SteamInternal_CreateInterface( string /*const char **/ version  );
			
		}
	}
}
