using System;
using System.Runtime.InteropServices;

namespace SteamNative
{
	internal static partial class Platform
	{
		public static class Linux
		{
			public static unsafe class ISteamClient
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_CreateSteamPipe" )] internal static extern int /*HSteamPipe*/ CreateSteamPipe( IntPtr ISteamClient );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_BReleaseSteamPipe" )] internal static extern bool /*bool*/ BReleaseSteamPipe( IntPtr ISteamClient, HSteamPipe /*HSteamPipe*/ hSteamPipe );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_ConnectToGlobalUser" )] internal static extern int /*HSteamUser*/ ConnectToGlobalUser( IntPtr ISteamClient, HSteamPipe /*HSteamPipe*/ hSteamPipe );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_CreateLocalUser" )] internal static extern int /*HSteamUser*/ CreateLocalUser( IntPtr ISteamClient, out HSteamPipe /*HSteamPipe **/ phSteamPipe, AccountType /*EAccountType*/ eAccountType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_ReleaseUser" )] internal static extern void /*void*/ ReleaseUser( IntPtr ISteamClient, HSteamPipe /*HSteamPipe*/ hSteamPipe, HSteamUser /*HSteamUser*/ hUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamUser" )] internal static extern IntPtr /*class ISteamUser **/ GetISteamUser( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamGameServer" )] internal static extern IntPtr /*class ISteamGameServer **/ GetISteamGameServer( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_SetLocalIPBinding" )] internal static extern void /*void*/ SetLocalIPBinding( IntPtr ISteamClient, uint /*uint32*/ unIP , ushort /*uint16*/ usPort  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamFriends" )] internal static extern IntPtr /*class ISteamFriends **/ GetISteamFriends( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamUtils" )] internal static extern IntPtr /*class ISteamUtils **/ GetISteamUtils( IntPtr ISteamClient, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamMatchmaking" )] internal static extern IntPtr /*class ISteamMatchmaking **/ GetISteamMatchmaking( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamMatchmakingServers" )] internal static extern IntPtr /*class ISteamMatchmakingServers **/ GetISteamMatchmakingServers( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamGenericInterface" )] internal static extern IntPtr /*void **/ GetISteamGenericInterface( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamUserStats" )] internal static extern IntPtr /*class ISteamUserStats **/ GetISteamUserStats( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamGameServerStats" )] internal static extern IntPtr /*class ISteamGameServerStats **/ GetISteamGameServerStats( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamApps" )] internal static extern IntPtr /*class ISteamApps **/ GetISteamApps( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamNetworking" )] internal static extern IntPtr /*class ISteamNetworking **/ GetISteamNetworking( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamRemoteStorage" )] internal static extern IntPtr /*class ISteamRemoteStorage **/ GetISteamRemoteStorage( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamScreenshots" )] internal static extern IntPtr /*class ISteamScreenshots **/ GetISteamScreenshots( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetIPCCallCount" )] internal static extern uint /*uint32*/ GetIPCCallCount( IntPtr ISteamClient );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_SetWarningMessageHook" )] internal static extern void /*void*/ SetWarningMessageHook( IntPtr ISteamClient, IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_BShutdownIfAllPipesClosed" )] internal static extern bool /*bool*/ BShutdownIfAllPipesClosed( IntPtr ISteamClient );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamHTTP" )] internal static extern IntPtr /*class ISteamHTTP **/ GetISteamHTTP( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamUnifiedMessages" )] internal static extern IntPtr /*class ISteamUnifiedMessages **/ GetISteamUnifiedMessages( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamController" )] internal static extern IntPtr /*class ISteamController **/ GetISteamController( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamUGC" )] internal static extern IntPtr /*class ISteamUGC **/ GetISteamUGC( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamAppList" )] internal static extern IntPtr /*class ISteamAppList **/ GetISteamAppList( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamUser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamMusic" )] internal static extern IntPtr /*class ISteamMusic **/ GetISteamMusic( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamMusicRemote" )] internal static extern IntPtr /*class ISteamMusicRemote **/ GetISteamMusicRemote( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamHTMLSurface" )] internal static extern IntPtr /*class ISteamHTMLSurface **/ GetISteamHTMLSurface( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamInventory" )] internal static extern IntPtr /*class ISteamInventory **/ GetISteamInventory( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamClient_GetISteamVideo" )] internal static extern IntPtr /*class ISteamVideo **/ GetISteamVideo( IntPtr ISteamClient, HSteamUser /*HSteamUser*/ hSteamuser, HSteamPipe /*HSteamPipe*/ hSteamPipe, string /*const char **/ pchVersion  );
			}
			
			public static unsafe class ISteamUser
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetHSteamUser" )] internal static extern int /*HSteamUser*/ GetHSteamUser( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_BLoggedOn" )] internal static extern bool /*bool*/ BLoggedOn( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetSteamID" )] internal static extern ulong /*class CSteamID*/ GetSteamID( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_InitiateGameConnection" )] internal static extern int /*int*/ InitiateGameConnection( IntPtr ISteamUser, IntPtr /*void **/ pAuthBlob , int /*int*/ cbMaxAuthBlob , CSteamID /*class CSteamID*/ steamIDGameServer, uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer , bool /*bool*/ bSecure  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_TerminateGameConnection" )] internal static extern void /*void*/ TerminateGameConnection( IntPtr ISteamUser, uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_TrackAppUsageEvent" )] internal static extern void /*void*/ TrackAppUsageEvent( IntPtr ISteamUser, CGameID /*class CGameID*/ gameID, int /*int*/ eAppUsageEvent , string /*const char **/ pchExtraInfo  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetUserDataFolder" )] internal static extern bool /*bool*/ GetUserDataFolder( IntPtr ISteamUser, System.Text.StringBuilder /*char **/ pchBuffer, int /*int*/ cubBuffer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_StartVoiceRecording" )] internal static extern void /*void*/ StartVoiceRecording( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_StopVoiceRecording" )] internal static extern void /*void*/ StopVoiceRecording( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetAvailableVoice" )] internal static extern VoiceResult /*EVoiceResult*/ GetAvailableVoice( IntPtr ISteamUser, out uint /*uint32 **/ pcbCompressed, out uint /*uint32 **/ pcbUncompressed, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetVoice" )] internal static extern VoiceResult /*EVoiceResult*/ GetVoice( IntPtr ISteamUser, bool /*bool*/ bWantCompressed , IntPtr /*void **/ pDestBuffer , uint /*uint32*/ cbDestBufferSize , out uint /*uint32 **/ nBytesWritten, bool /*bool*/ bWantUncompressed , IntPtr /*void **/ pUncompressedDestBuffer , uint /*uint32*/ cbUncompressedDestBufferSize , out uint /*uint32 **/ nUncompressBytesWritten, uint /*uint32*/ nUncompressedVoiceDesiredSampleRate  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_DecompressVoice" )] internal static extern VoiceResult /*EVoiceResult*/ DecompressVoice( IntPtr ISteamUser, IntPtr /*const void **/ pCompressed , uint /*uint32*/ cbCompressed , IntPtr /*void **/ pDestBuffer , uint /*uint32*/ cbDestBufferSize , out uint /*uint32 **/ nBytesWritten, uint /*uint32*/ nDesiredSampleRate  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetVoiceOptimalSampleRate" )] internal static extern uint /*uint32*/ GetVoiceOptimalSampleRate( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetAuthSessionTicket" )] internal static extern uint /*HAuthTicket*/ GetAuthSessionTicket( IntPtr ISteamUser, IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_BeginAuthSession" )] internal static extern BeginAuthSessionResult /*EBeginAuthSessionResult*/ BeginAuthSession( IntPtr ISteamUser, IntPtr /*const void **/ pAuthTicket , int /*int*/ cbAuthTicket , CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_EndAuthSession" )] internal static extern void /*void*/ EndAuthSession( IntPtr ISteamUser, CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_CancelAuthTicket" )] internal static extern void /*void*/ CancelAuthTicket( IntPtr ISteamUser, HAuthTicket /*HAuthTicket*/ hAuthTicket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_UserHasLicenseForApp" )] internal static extern UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ UserHasLicenseForApp( IntPtr ISteamUser, CSteamID /*class CSteamID*/ steamID, AppId_t /*AppId_t*/ appID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_BIsBehindNAT" )] internal static extern bool /*bool*/ BIsBehindNAT( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_AdvertiseGame" )] internal static extern void /*void*/ AdvertiseGame( IntPtr ISteamUser, CSteamID /*class CSteamID*/ steamIDGameServer, uint /*uint32*/ unIPServer , ushort /*uint16*/ usPortServer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_RequestEncryptedAppTicket" )] internal static extern ulong /*SteamAPICall_t*/ RequestEncryptedAppTicket( IntPtr ISteamUser, IntPtr /*void **/ pDataToInclude , int /*int*/ cbDataToInclude  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetEncryptedAppTicket" )] internal static extern bool /*bool*/ GetEncryptedAppTicket( IntPtr ISteamUser, IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetGameBadgeLevel" )] internal static extern int /*int*/ GetGameBadgeLevel( IntPtr ISteamUser, int /*int*/ nSeries , bool /*bool*/ bFoil  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_GetPlayerSteamLevel" )] internal static extern int /*int*/ GetPlayerSteamLevel( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_RequestStoreAuthURL" )] internal static extern ulong /*SteamAPICall_t*/ RequestStoreAuthURL( IntPtr ISteamUser, string /*const char **/ pchRedirectURL  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_BIsPhoneVerified" )] internal static extern bool /*bool*/ BIsPhoneVerified( IntPtr ISteamUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUser_BIsTwoFactorEnabled" )] internal static extern bool /*bool*/ BIsTwoFactorEnabled( IntPtr ISteamUser );
			}
			
			public static unsafe class ISteamFriends
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetPersonaName" )] internal static extern IntPtr GetPersonaName( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SetPersonaName" )] internal static extern ulong /*SteamAPICall_t*/ SetPersonaName( IntPtr ISteamFriends, string /*const char **/ pchPersonaName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetPersonaState" )] internal static extern PersonaState /*EPersonaState*/ GetPersonaState( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendCount" )] internal static extern int /*int*/ GetFriendCount( IntPtr ISteamFriends, int /*int*/ iFriendFlags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendByIndex" )] internal static extern ulong /*class CSteamID*/ GetFriendByIndex( IntPtr ISteamFriends, int /*int*/ iFriend , int /*int*/ iFriendFlags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendRelationship" )] internal static extern FriendRelationship /*EFriendRelationship*/ GetFriendRelationship( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendPersonaState" )] internal static extern PersonaState /*EPersonaState*/ GetFriendPersonaState( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendPersonaName" )] internal static extern IntPtr GetFriendPersonaName( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendGamePlayed" )] internal static extern bool /*bool*/ GetFriendGamePlayed( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, ref FriendGameInfo_t /*struct FriendGameInfo_t **/ pFriendGameInfo );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendPersonaNameHistory" )] internal static extern IntPtr GetFriendPersonaNameHistory( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iPersonaName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendSteamLevel" )] internal static extern int /*int*/ GetFriendSteamLevel( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetPlayerNickname" )] internal static extern IntPtr GetPlayerNickname( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDPlayer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendsGroupCount" )] internal static extern int /*int*/ GetFriendsGroupCount( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex" )] internal static extern short /*FriendsGroupID_t*/ GetFriendsGroupIDByIndex( IntPtr ISteamFriends, int /*int*/ iFG  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendsGroupName" )] internal static extern IntPtr GetFriendsGroupName( IntPtr ISteamFriends, FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendsGroupMembersCount" )] internal static extern int /*int*/ GetFriendsGroupMembersCount( IntPtr ISteamFriends, FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendsGroupMembersList" )] internal static extern void /*void*/ GetFriendsGroupMembersList( IntPtr ISteamFriends, FriendsGroupID_t /*FriendsGroupID_t*/ friendsGroupID, IntPtr /*class CSteamID **/ pOutSteamIDMembers, int /*int*/ nMembersCount  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_HasFriend" )] internal static extern bool /*bool*/ HasFriend( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iFriendFlags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanCount" )] internal static extern int /*int*/ GetClanCount( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanByIndex" )] internal static extern ulong /*class CSteamID*/ GetClanByIndex( IntPtr ISteamFriends, int /*int*/ iClan  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanName" )] internal static extern IntPtr GetClanName( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanTag" )] internal static extern IntPtr GetClanTag( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanActivityCounts" )] internal static extern bool /*bool*/ GetClanActivityCounts( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan, out int /*int **/ pnOnline, out int /*int **/ pnInGame, out int /*int **/ pnChatting );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_DownloadClanActivityCounts" )] internal static extern ulong /*SteamAPICall_t*/ DownloadClanActivityCounts( IntPtr ISteamFriends, IntPtr /*class CSteamID **/ psteamIDClans, int /*int*/ cClansToRequest  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendCountFromSource" )] internal static extern int /*int*/ GetFriendCountFromSource( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDSource );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendFromSourceByIndex" )] internal static extern ulong /*class CSteamID*/ GetFriendFromSourceByIndex( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDSource, int /*int*/ iFriend  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_IsUserInSource" )] internal static extern bool /*bool*/ IsUserInSource( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDUser, CSteamID /*class CSteamID*/ steamIDSource );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SetInGameVoiceSpeaking" )] internal static extern void /*void*/ SetInGameVoiceSpeaking( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDUser, bool /*bool*/ bSpeaking  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ActivateGameOverlay" )] internal static extern void /*void*/ ActivateGameOverlay( IntPtr ISteamFriends, string /*const char **/ pchDialog  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ActivateGameOverlayToUser" )] internal static extern void /*void*/ ActivateGameOverlayToUser( IntPtr ISteamFriends, string /*const char **/ pchDialog , CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage" )] internal static extern void /*void*/ ActivateGameOverlayToWebPage( IntPtr ISteamFriends, string /*const char **/ pchURL  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ActivateGameOverlayToStore" )] internal static extern void /*void*/ ActivateGameOverlayToStore( IntPtr ISteamFriends, AppId_t /*AppId_t*/ nAppID, OverlayToStoreFlag /*EOverlayToStoreFlag*/ eFlag  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SetPlayedWith" )] internal static extern void /*void*/ SetPlayedWith( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDUserPlayedWith );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog" )] internal static extern void /*void*/ ActivateGameOverlayInviteDialog( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetSmallFriendAvatar" )] internal static extern int /*int*/ GetSmallFriendAvatar( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetMediumFriendAvatar" )] internal static extern int /*int*/ GetMediumFriendAvatar( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetLargeFriendAvatar" )] internal static extern int /*int*/ GetLargeFriendAvatar( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_RequestUserInformation" )] internal static extern bool /*bool*/ RequestUserInformation( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDUser, bool /*bool*/ bRequireNameOnly  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_RequestClanOfficerList" )] internal static extern ulong /*SteamAPICall_t*/ RequestClanOfficerList( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanOwner" )] internal static extern ulong /*class CSteamID*/ GetClanOwner( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanOfficerCount" )] internal static extern int /*int*/ GetClanOfficerCount( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanOfficerByIndex" )] internal static extern ulong /*class CSteamID*/ GetClanOfficerByIndex( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan, int /*int*/ iOfficer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetUserRestrictions" )] internal static extern uint /*uint32*/ GetUserRestrictions( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SetRichPresence" )] internal static extern bool /*bool*/ SetRichPresence( IntPtr ISteamFriends, string /*const char **/ pchKey , string /*const char **/ pchValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ClearRichPresence" )] internal static extern void /*void*/ ClearRichPresence( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendRichPresence" )] internal static extern IntPtr GetFriendRichPresence( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount" )] internal static extern int /*int*/ GetFriendRichPresenceKeyCount( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex" )] internal static extern IntPtr GetFriendRichPresenceKeyByIndex( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_RequestFriendRichPresence" )] internal static extern void /*void*/ RequestFriendRichPresence( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_InviteUserToGame" )] internal static extern bool /*bool*/ InviteUserToGame( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchConnectString  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetCoplayFriendCount" )] internal static extern int /*int*/ GetCoplayFriendCount( IntPtr ISteamFriends );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetCoplayFriend" )] internal static extern ulong /*class CSteamID*/ GetCoplayFriend( IntPtr ISteamFriends, int /*int*/ iCoplayFriend  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendCoplayTime" )] internal static extern int /*int*/ GetFriendCoplayTime( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendCoplayGame" )] internal static extern uint /*AppId_t*/ GetFriendCoplayGame( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_JoinClanChatRoom" )] internal static extern ulong /*SteamAPICall_t*/ JoinClanChatRoom( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_LeaveClanChatRoom" )] internal static extern bool /*bool*/ LeaveClanChatRoom( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanChatMemberCount" )] internal static extern int /*int*/ GetClanChatMemberCount( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetChatMemberByIndex" )] internal static extern ulong /*class CSteamID*/ GetChatMemberByIndex( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClan, int /*int*/ iUser  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SendClanChatMessage" )] internal static extern bool /*bool*/ SendClanChatMessage( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat, string /*const char **/ pchText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetClanChatMessage" )] internal static extern int /*int*/ GetClanChatMessage( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat, int /*int*/ iMessage , IntPtr /*void **/ prgchText , int /*int*/ cchTextMax , out ChatEntryType /*EChatEntryType **/ peChatEntryType, out CSteamID /*class CSteamID **/ psteamidChatter );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_IsClanChatAdmin" )] internal static extern bool /*bool*/ IsClanChatAdmin( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat, CSteamID /*class CSteamID*/ steamIDUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam" )] internal static extern bool /*bool*/ IsClanChatWindowOpenInSteam( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_OpenClanChatWindowInSteam" )] internal static extern bool /*bool*/ OpenClanChatWindowInSteam( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_CloseClanChatWindowInSteam" )] internal static extern bool /*bool*/ CloseClanChatWindowInSteam( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDClanChat );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_SetListenForFriendsMessages" )] internal static extern bool /*bool*/ SetListenForFriendsMessages( IntPtr ISteamFriends, bool /*bool*/ bInterceptEnabled  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_ReplyToFriendMessage" )] internal static extern bool /*bool*/ ReplyToFriendMessage( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, string /*const char **/ pchMsgToSend  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFriendMessage" )] internal static extern int /*int*/ GetFriendMessage( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamIDFriend, int /*int*/ iMessageID , IntPtr /*void **/ pvData , int /*int*/ cubData , out ChatEntryType /*EChatEntryType **/ peChatEntryType );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_GetFollowerCount" )] internal static extern ulong /*SteamAPICall_t*/ GetFollowerCount( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_IsFollowing" )] internal static extern ulong /*SteamAPICall_t*/ IsFollowing( IntPtr ISteamFriends, CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamFriends_EnumerateFollowingList" )] internal static extern ulong /*SteamAPICall_t*/ EnumerateFollowingList( IntPtr ISteamFriends, uint /*uint32*/ unStartIndex  );
			}
			
			public static unsafe class ISteamUtils
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetSecondsSinceAppActive" )] internal static extern uint /*uint32*/ GetSecondsSinceAppActive( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetSecondsSinceComputerActive" )] internal static extern uint /*uint32*/ GetSecondsSinceComputerActive( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetConnectedUniverse" )] internal static extern Universe /*EUniverse*/ GetConnectedUniverse( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetServerRealTime" )] internal static extern uint /*uint32*/ GetServerRealTime( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetIPCountry" )] internal static extern IntPtr GetIPCountry( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetImageSize" )] internal static extern bool /*bool*/ GetImageSize( IntPtr ISteamUtils, int /*int*/ iImage , out uint /*uint32 **/ pnWidth, out uint /*uint32 **/ pnHeight );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetImageRGBA" )] internal static extern bool /*bool*/ GetImageRGBA( IntPtr ISteamUtils, int /*int*/ iImage , IntPtr /*uint8 **/ pubDest, int /*int*/ nDestBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetCSERIPPort" )] internal static extern bool /*bool*/ GetCSERIPPort( IntPtr ISteamUtils, out uint /*uint32 **/ unIP, out ushort /*uint16 **/ usPort );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetCurrentBatteryPower" )] internal static extern byte /*uint8*/ GetCurrentBatteryPower( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetAppID" )] internal static extern uint /*uint32*/ GetAppID( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_SetOverlayNotificationPosition" )] internal static extern void /*void*/ SetOverlayNotificationPosition( IntPtr ISteamUtils, NotificationPosition /*ENotificationPosition*/ eNotificationPosition  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_IsAPICallCompleted" )] internal static extern bool /*bool*/ IsAPICallCompleted( IntPtr ISteamUtils, SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall, out bool /*bool **/ pbFailed );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetAPICallFailureReason" )] internal static extern SteamAPICallFailure /*ESteamAPICallFailure*/ GetAPICallFailureReason( IntPtr ISteamUtils, SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetAPICallResult" )] internal static extern bool /*bool*/ GetAPICallResult( IntPtr ISteamUtils, SteamAPICall_t /*SteamAPICall_t*/ hSteamAPICall, IntPtr /*void **/ pCallback , int /*int*/ cubCallback , int /*int*/ iCallbackExpected , out bool /*bool **/ pbFailed );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetIPCCallCount" )] internal static extern uint /*uint32*/ GetIPCCallCount( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_SetWarningMessageHook" )] internal static extern void /*void*/ SetWarningMessageHook( IntPtr ISteamUtils, IntPtr /*SteamAPIWarningMessageHook_t*/ pFunction  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_IsOverlayEnabled" )] internal static extern bool /*bool*/ IsOverlayEnabled( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_BOverlayNeedsPresent" )] internal static extern bool /*bool*/ BOverlayNeedsPresent( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_CheckFileSignature" )] internal static extern ulong /*SteamAPICall_t*/ CheckFileSignature( IntPtr ISteamUtils, string /*const char **/ szFileName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_ShowGamepadTextInput" )] internal static extern bool /*bool*/ ShowGamepadTextInput( IntPtr ISteamUtils, GamepadTextInputMode /*EGamepadTextInputMode*/ eInputMode , GamepadTextInputLineMode /*EGamepadTextInputLineMode*/ eLineInputMode , string /*const char **/ pchDescription , uint /*uint32*/ unCharMax , string /*const char **/ pchExistingText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetEnteredGamepadTextLength" )] internal static extern uint /*uint32*/ GetEnteredGamepadTextLength( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetEnteredGamepadTextInput" )] internal static extern bool /*bool*/ GetEnteredGamepadTextInput( IntPtr ISteamUtils, System.Text.StringBuilder /*char **/ pchText, uint /*uint32*/ cchText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_GetSteamUILanguage" )] internal static extern IntPtr GetSteamUILanguage( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_IsSteamRunningInVR" )] internal static extern bool /*bool*/ IsSteamRunningInVR( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_SetOverlayNotificationInset" )] internal static extern void /*void*/ SetOverlayNotificationInset( IntPtr ISteamUtils, int /*int*/ nHorizontalInset , int /*int*/ nVerticalInset  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_IsSteamInBigPictureMode" )] internal static extern bool /*bool*/ IsSteamInBigPictureMode( IntPtr ISteamUtils );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUtils_StartVRDashboard" )] internal static extern void /*void*/ StartVRDashboard( IntPtr ISteamUtils );
			}
			
			public static unsafe class ISteamMatchmaking
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetFavoriteGameCount" )] internal static extern int /*int*/ GetFavoriteGameCount( IntPtr ISteamMatchmaking );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetFavoriteGame" )] internal static extern bool /*bool*/ GetFavoriteGame( IntPtr ISteamMatchmaking, int /*int*/ iGame , ref AppId_t /*AppId_t **/ pnAppID, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnConnPort, out ushort /*uint16 **/ pnQueryPort, IntPtr /*uint32 **/ punFlags, out uint /*uint32 **/ pRTime32LastPlayedOnServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddFavoriteGame" )] internal static extern int /*int*/ AddFavoriteGame( IntPtr ISteamMatchmaking, AppId_t /*AppId_t*/ nAppID, uint /*uint32*/ nIP , ushort /*uint16*/ nConnPort , ushort /*uint16*/ nQueryPort , uint /*uint32*/ unFlags , uint /*uint32*/ rTime32LastPlayedOnServer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_RemoveFavoriteGame" )] internal static extern bool /*bool*/ RemoveFavoriteGame( IntPtr ISteamMatchmaking, AppId_t /*AppId_t*/ nAppID, uint /*uint32*/ nIP , ushort /*uint16*/ nConnPort , ushort /*uint16*/ nQueryPort , uint /*uint32*/ unFlags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_RequestLobbyList" )] internal static extern ulong /*SteamAPICall_t*/ RequestLobbyList( IntPtr ISteamMatchmaking );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter" )] internal static extern void /*void*/ AddRequestLobbyListStringFilter( IntPtr ISteamMatchmaking, string /*const char **/ pchKeyToMatch , string /*const char **/ pchValueToMatch , LobbyComparison /*ELobbyComparison*/ eComparisonType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter" )] internal static extern void /*void*/ AddRequestLobbyListNumericalFilter( IntPtr ISteamMatchmaking, string /*const char **/ pchKeyToMatch , int /*int*/ nValueToMatch , LobbyComparison /*ELobbyComparison*/ eComparisonType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter" )] internal static extern void /*void*/ AddRequestLobbyListNearValueFilter( IntPtr ISteamMatchmaking, string /*const char **/ pchKeyToMatch , int /*int*/ nValueToBeCloseTo  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable" )] internal static extern void /*void*/ AddRequestLobbyListFilterSlotsAvailable( IntPtr ISteamMatchmaking, int /*int*/ nSlotsAvailable  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter" )] internal static extern void /*void*/ AddRequestLobbyListDistanceFilter( IntPtr ISteamMatchmaking, LobbyDistanceFilter /*ELobbyDistanceFilter*/ eLobbyDistanceFilter  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter" )] internal static extern void /*void*/ AddRequestLobbyListResultCountFilter( IntPtr ISteamMatchmaking, int /*int*/ cMaxResults  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter" )] internal static extern void /*void*/ AddRequestLobbyListCompatibleMembersFilter( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyByIndex" )] internal static extern ulong /*class CSteamID*/ GetLobbyByIndex( IntPtr ISteamMatchmaking, int /*int*/ iLobby  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_CreateLobby" )] internal static extern ulong /*SteamAPICall_t*/ CreateLobby( IntPtr ISteamMatchmaking, LobbyType /*ELobbyType*/ eLobbyType , int /*int*/ cMaxMembers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_JoinLobby" )] internal static extern ulong /*SteamAPICall_t*/ JoinLobby( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_LeaveLobby" )] internal static extern void /*void*/ LeaveLobby( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_InviteUserToLobby" )] internal static extern bool /*bool*/ InviteUserToLobby( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDInvitee );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetNumLobbyMembers" )] internal static extern int /*int*/ GetNumLobbyMembers( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex" )] internal static extern ulong /*class CSteamID*/ GetLobbyMemberByIndex( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iMember  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyData" )] internal static extern IntPtr GetLobbyData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyData" )] internal static extern bool /*bool*/ SetLobbyData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey , string /*const char **/ pchValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyDataCount" )] internal static extern int /*int*/ GetLobbyDataCount( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex" )] internal static extern bool /*bool*/ GetLobbyDataByIndex( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iLobbyData , System.Text.StringBuilder /*char **/ pchKey, int /*int*/ cchKeyBufferSize , System.Text.StringBuilder /*char **/ pchValue, int /*int*/ cchValueBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_DeleteLobbyData" )] internal static extern bool /*bool*/ DeleteLobbyData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyMemberData" )] internal static extern IntPtr GetLobbyMemberData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyMemberData" )] internal static extern void /*void*/ SetLobbyMemberData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, string /*const char **/ pchKey , string /*const char **/ pchValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SendLobbyChatMsg" )] internal static extern bool /*bool*/ SendLobbyChatMsg( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, IntPtr /*const void **/ pvMsgBody , int /*int*/ cubMsgBody  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyChatEntry" )] internal static extern int /*int*/ GetLobbyChatEntry( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ iChatID , out CSteamID /*class CSteamID **/ pSteamIDUser, IntPtr /*void **/ pvData , int /*int*/ cubData , out ChatEntryType /*EChatEntryType **/ peChatEntryType );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_RequestLobbyData" )] internal static extern bool /*bool*/ RequestLobbyData( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyGameServer" )] internal static extern void /*void*/ SetLobbyGameServer( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, uint /*uint32*/ unGameServerIP , ushort /*uint16*/ unGameServerPort , CSteamID /*class CSteamID*/ steamIDGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyGameServer" )] internal static extern bool /*bool*/ GetLobbyGameServer( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, out uint /*uint32 **/ punGameServerIP, out ushort /*uint16 **/ punGameServerPort, out CSteamID /*class CSteamID **/ psteamIDGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit" )] internal static extern bool /*bool*/ SetLobbyMemberLimit( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, int /*int*/ cMaxMembers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit" )] internal static extern int /*int*/ GetLobbyMemberLimit( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyType" )] internal static extern bool /*bool*/ SetLobbyType( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, LobbyType /*ELobbyType*/ eLobbyType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyJoinable" )] internal static extern bool /*bool*/ SetLobbyJoinable( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, bool /*bool*/ bLobbyJoinable  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_GetLobbyOwner" )] internal static extern ulong /*class CSteamID*/ GetLobbyOwner( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLobbyOwner" )] internal static extern bool /*bool*/ SetLobbyOwner( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDNewOwner );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmaking_SetLinkedLobby" )] internal static extern bool /*bool*/ SetLinkedLobby( IntPtr ISteamMatchmaking, CSteamID /*class CSteamID*/ steamIDLobby, CSteamID /*class CSteamID*/ steamIDLobbyDependent );
			}
			
			public static unsafe class ISteamMatchmakingServers
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestInternetServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestInternetServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestLANServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestLANServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestFriendsServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestFavoritesServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestHistoryServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList" )] internal static extern IntPtr /*HServerListRequest*/ RequestSpectatorServerList( IntPtr ISteamMatchmakingServers, AppId_t /*AppId_t*/ iApp, IntPtr /*struct MatchMakingKeyValuePair_t ***/ ppchFilters, uint /*uint32*/ nFilters , IntPtr /*class ISteamMatchmakingServerListResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_ReleaseRequest" )] internal static extern void /*void*/ ReleaseRequest( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hServerListRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_GetServerDetails" )] internal static extern IntPtr /*class gameserveritem_t **/ GetServerDetails( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest, int /*int*/ iServer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_CancelQuery" )] internal static extern void /*void*/ CancelQuery( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RefreshQuery" )] internal static extern void /*void*/ RefreshQuery( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_IsRefreshing" )] internal static extern bool /*bool*/ IsRefreshing( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_GetServerCount" )] internal static extern int /*int*/ GetServerCount( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_RefreshServer" )] internal static extern void /*void*/ RefreshServer( IntPtr ISteamMatchmakingServers, HServerListRequest /*HServerListRequest*/ hRequest, int /*int*/ iServer  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_PingServer" )] internal static extern int /*HServerQuery*/ PingServer( IntPtr ISteamMatchmakingServers, uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingPingResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_PlayerDetails" )] internal static extern int /*HServerQuery*/ PlayerDetails( IntPtr ISteamMatchmakingServers, uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingPlayersResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_ServerRules" )] internal static extern int /*HServerQuery*/ ServerRules( IntPtr ISteamMatchmakingServers, uint /*uint32*/ unIP , ushort /*uint16*/ usPort , IntPtr /*class ISteamMatchmakingRulesResponse **/ pRequestServersResponse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMatchmakingServers_CancelServerQuery" )] internal static extern void /*void*/ CancelServerQuery( IntPtr ISteamMatchmakingServers, HServerQuery /*HServerQuery*/ hServerQuery );
			}
			
			public static unsafe class ISteamRemoteStorage
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWrite" )] internal static extern bool /*bool*/ FileWrite( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , IntPtr /*const void **/ pvData , int /*int32*/ cubData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileRead" )] internal static extern int /*int32*/ FileRead( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , IntPtr /*void **/ pvData , int /*int32*/ cubDataToRead  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWriteAsync" )] internal static extern ulong /*SteamAPICall_t*/ FileWriteAsync( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , IntPtr /*const void **/ pvData , uint /*uint32*/ cubData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileReadAsync" )] internal static extern ulong /*SteamAPICall_t*/ FileReadAsync( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , uint /*uint32*/ nOffset , uint /*uint32*/ cubToRead  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete" )] internal static extern bool /*bool*/ FileReadAsyncComplete( IntPtr ISteamRemoteStorage, SteamAPICall_t /*SteamAPICall_t*/ hReadCall, IntPtr /*void **/ pvBuffer , uint /*uint32*/ cubToRead  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileForget" )] internal static extern bool /*bool*/ FileForget( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileDelete" )] internal static extern bool /*bool*/ FileDelete( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileShare" )] internal static extern ulong /*SteamAPICall_t*/ FileShare( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_SetSyncPlatforms" )] internal static extern bool /*bool*/ SetSyncPlatforms( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , RemoteStoragePlatform /*ERemoteStoragePlatform*/ eRemoteStoragePlatform  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen" )] internal static extern ulong /*UGCFileWriteStreamHandle_t*/ FileWriteStreamOpen( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk" )] internal static extern bool /*bool*/ FileWriteStreamWriteChunk( IntPtr ISteamRemoteStorage, UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle, IntPtr /*const void **/ pvData , int /*int32*/ cubData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWriteStreamClose" )] internal static extern bool /*bool*/ FileWriteStreamClose( IntPtr ISteamRemoteStorage, UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel" )] internal static extern bool /*bool*/ FileWriteStreamCancel( IntPtr ISteamRemoteStorage, UGCFileWriteStreamHandle_t /*UGCFileWriteStreamHandle_t*/ writeHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FileExists" )] internal static extern bool /*bool*/ FileExists( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_FilePersisted" )] internal static extern bool /*bool*/ FilePersisted( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetFileSize" )] internal static extern int /*int32*/ GetFileSize( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetFileTimestamp" )] internal static extern long /*int64*/ GetFileTimestamp( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetSyncPlatforms" )] internal static extern RemoteStoragePlatform /*ERemoteStoragePlatform*/ GetSyncPlatforms( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetFileCount" )] internal static extern int /*int32*/ GetFileCount( IntPtr ISteamRemoteStorage );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetFileNameAndSize" )] internal static extern IntPtr GetFileNameAndSize( IntPtr ISteamRemoteStorage, int /*int*/ iFile , IntPtr /*int32 **/ pnFileSizeInBytes );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetQuota" )] internal static extern bool /*bool*/ GetQuota( IntPtr ISteamRemoteStorage, IntPtr /*int32 **/ pnTotalBytes, IntPtr /*int32 **/ puAvailableBytes );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount" )] internal static extern bool /*bool*/ IsCloudEnabledForAccount( IntPtr ISteamRemoteStorage );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp" )] internal static extern bool /*bool*/ IsCloudEnabledForApp( IntPtr ISteamRemoteStorage );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp" )] internal static extern void /*void*/ SetCloudEnabledForApp( IntPtr ISteamRemoteStorage, bool /*bool*/ bEnabled  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UGCDownload" )] internal static extern ulong /*SteamAPICall_t*/ UGCDownload( IntPtr ISteamRemoteStorage, UGCHandle_t /*UGCHandle_t*/ hContent, uint /*uint32*/ unPriority  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress" )] internal static extern bool /*bool*/ GetUGCDownloadProgress( IntPtr ISteamRemoteStorage, UGCHandle_t /*UGCHandle_t*/ hContent, out int /*int32 **/ pnBytesDownloaded, out int /*int32 **/ pnBytesExpected );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetUGCDetails" )] internal static extern bool /*bool*/ GetUGCDetails( IntPtr ISteamRemoteStorage, UGCHandle_t /*UGCHandle_t*/ hContent, ref AppId_t /*AppId_t **/ pnAppID, System.Text.StringBuilder /*char ***/ ppchName, IntPtr /*int32 **/ pnFileSizeInBytes, out CSteamID /*class CSteamID **/ pSteamIDOwner );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UGCRead" )] internal static extern int /*int32*/ UGCRead( IntPtr ISteamRemoteStorage, UGCHandle_t /*UGCHandle_t*/ hContent, IntPtr /*void **/ pvData , int /*int32*/ cubDataToRead , uint /*uint32*/ cOffset , UGCReadAction /*EUGCReadAction*/ eAction  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetCachedUGCCount" )] internal static extern int /*int32*/ GetCachedUGCCount( IntPtr ISteamRemoteStorage );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle" )] internal static extern ulong /*UGCHandle_t*/ GetCachedUGCHandle( IntPtr ISteamRemoteStorage, int /*int32*/ iCachedContent  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_PublishWorkshopFile" )] internal static extern ulong /*SteamAPICall_t*/ PublishWorkshopFile( IntPtr ISteamRemoteStorage, string /*const char **/ pchFile , string /*const char **/ pchPreviewFile , AppId_t /*AppId_t*/ nConsumerAppId, string /*const char **/ pchTitle , string /*const char **/ pchDescription , RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility , IntPtr /*struct SteamParamStringArray_t **/ pTags, WorkshopFileType /*EWorkshopFileType*/ eWorkshopFileType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest" )] internal static extern ulong /*PublishedFileUpdateHandle_t*/ CreatePublishedFileUpdateRequest( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile" )] internal static extern bool /*bool*/ UpdatePublishedFileFile( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile" )] internal static extern bool /*bool*/ UpdatePublishedFilePreviewFile( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchPreviewFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle" )] internal static extern bool /*bool*/ UpdatePublishedFileTitle( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchTitle  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription" )] internal static extern bool /*bool*/ UpdatePublishedFileDescription( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchDescription  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility" )] internal static extern bool /*bool*/ UpdatePublishedFileVisibility( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags" )] internal static extern bool /*bool*/ UpdatePublishedFileTags( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, IntPtr /*struct SteamParamStringArray_t **/ pTags );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate" )] internal static extern ulong /*SteamAPICall_t*/ CommitPublishedFileUpdate( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails" )] internal static extern ulong /*SteamAPICall_t*/ GetPublishedFileDetails( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, uint /*uint32*/ unMaxSecondsOld  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_DeletePublishedFile" )] internal static extern ulong /*SteamAPICall_t*/ DeletePublishedFile( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles" )] internal static extern ulong /*SteamAPICall_t*/ EnumerateUserPublishedFiles( IntPtr ISteamRemoteStorage, uint /*uint32*/ unStartIndex  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_SubscribePublishedFile" )] internal static extern ulong /*SteamAPICall_t*/ SubscribePublishedFile( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles" )] internal static extern ulong /*SteamAPICall_t*/ EnumerateUserSubscribedFiles( IntPtr ISteamRemoteStorage, uint /*uint32*/ unStartIndex  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile" )] internal static extern ulong /*SteamAPICall_t*/ UnsubscribePublishedFile( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription" )] internal static extern bool /*bool*/ UpdatePublishedFileSetChangeDescription( IntPtr ISteamRemoteStorage, PublishedFileUpdateHandle_t /*PublishedFileUpdateHandle_t*/ updateHandle, string /*const char **/ pchChangeDescription  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails" )] internal static extern ulong /*SteamAPICall_t*/ GetPublishedItemVoteDetails( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote" )] internal static extern ulong /*SteamAPICall_t*/ UpdateUserPublishedItemVote( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, bool /*bool*/ bVoteUp  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails" )] internal static extern ulong /*SteamAPICall_t*/ GetUserPublishedItemVoteDetails( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles" )] internal static extern ulong /*SteamAPICall_t*/ EnumerateUserSharedWorkshopFiles( IntPtr ISteamRemoteStorage, CSteamID /*class CSteamID*/ steamId, uint /*uint32*/ unStartIndex , IntPtr /*struct SteamParamStringArray_t **/ pRequiredTags, IntPtr /*struct SteamParamStringArray_t **/ pExcludedTags );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_PublishVideo" )] internal static extern ulong /*SteamAPICall_t*/ PublishVideo( IntPtr ISteamRemoteStorage, WorkshopVideoProvider /*EWorkshopVideoProvider*/ eVideoProvider , string /*const char **/ pchVideoAccount , string /*const char **/ pchVideoIdentifier , string /*const char **/ pchPreviewFile , AppId_t /*AppId_t*/ nConsumerAppId, string /*const char **/ pchTitle , string /*const char **/ pchDescription , RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility , IntPtr /*struct SteamParamStringArray_t **/ pTags );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction" )] internal static extern ulong /*SteamAPICall_t*/ SetUserPublishedFileAction( IntPtr ISteamRemoteStorage, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileId, WorkshopFileAction /*EWorkshopFileAction*/ eAction  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction" )] internal static extern ulong /*SteamAPICall_t*/ EnumeratePublishedFilesByUserAction( IntPtr ISteamRemoteStorage, WorkshopFileAction /*EWorkshopFileAction*/ eAction , uint /*uint32*/ unStartIndex  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles" )] internal static extern ulong /*SteamAPICall_t*/ EnumeratePublishedWorkshopFiles( IntPtr ISteamRemoteStorage, WorkshopEnumerationType /*EWorkshopEnumerationType*/ eEnumerationType , uint /*uint32*/ unStartIndex , uint /*uint32*/ unCount , uint /*uint32*/ unDays , IntPtr /*struct SteamParamStringArray_t **/ pTags, IntPtr /*struct SteamParamStringArray_t **/ pUserTags );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation" )] internal static extern ulong /*SteamAPICall_t*/ UGCDownloadToLocation( IntPtr ISteamRemoteStorage, UGCHandle_t /*UGCHandle_t*/ hContent, string /*const char **/ pchLocation , uint /*uint32*/ unPriority  );
			}
			
			public static unsafe class ISteamUserStats
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_RequestCurrentStats" )] internal static extern bool /*bool*/ RequestCurrentStats( IntPtr ISteamUserStats );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetStat" )] internal static extern bool /*bool*/ GetStat( IntPtr ISteamUserStats, string /*const char **/ pchName , out int /*int32 **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetStat0" )] internal static extern bool /*bool*/ GetStat0( IntPtr ISteamUserStats, string /*const char **/ pchName , out float /*float **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_SetStat" )] internal static extern bool /*bool*/ SetStat( IntPtr ISteamUserStats, string /*const char **/ pchName , int /*int32*/ nData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_SetStat0" )] internal static extern bool /*bool*/ SetStat0( IntPtr ISteamUserStats, string /*const char **/ pchName , float /*float*/ fData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_UpdateAvgRateStat" )] internal static extern bool /*bool*/ UpdateAvgRateStat( IntPtr ISteamUserStats, string /*const char **/ pchName , float /*float*/ flCountThisSession , double /*double*/ dSessionLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievement" )] internal static extern bool /*bool*/ GetAchievement( IntPtr ISteamUserStats, string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_SetAchievement" )] internal static extern bool /*bool*/ SetAchievement( IntPtr ISteamUserStats, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_ClearAchievement" )] internal static extern bool /*bool*/ ClearAchievement( IntPtr ISteamUserStats, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime" )] internal static extern bool /*bool*/ GetAchievementAndUnlockTime( IntPtr ISteamUserStats, string /*const char **/ pchName , out bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_StoreStats" )] internal static extern bool /*bool*/ StoreStats( IntPtr ISteamUserStats );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievementIcon" )] internal static extern int /*int*/ GetAchievementIcon( IntPtr ISteamUserStats, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute" )] internal static extern IntPtr GetAchievementDisplayAttribute( IntPtr ISteamUserStats, string /*const char **/ pchName , string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_IndicateAchievementProgress" )] internal static extern bool /*bool*/ IndicateAchievementProgress( IntPtr ISteamUserStats, string /*const char **/ pchName , uint /*uint32*/ nCurProgress , uint /*uint32*/ nMaxProgress  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetNumAchievements" )] internal static extern uint /*uint32*/ GetNumAchievements( IntPtr ISteamUserStats );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievementName" )] internal static extern IntPtr GetAchievementName( IntPtr ISteamUserStats, uint /*uint32*/ iAchievement  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_RequestUserStats" )] internal static extern ulong /*SteamAPICall_t*/ RequestUserStats( IntPtr ISteamUserStats, CSteamID /*class CSteamID*/ steamIDUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetUserStat" )] internal static extern bool /*bool*/ GetUserStat( IntPtr ISteamUserStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out int /*int32 **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetUserStat0" )] internal static extern bool /*bool*/ GetUserStat0( IntPtr ISteamUserStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out float /*float **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetUserAchievement" )] internal static extern bool /*bool*/ GetUserAchievement( IntPtr ISteamUserStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime" )] internal static extern bool /*bool*/ GetUserAchievementAndUnlockTime( IntPtr ISteamUserStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved, out uint /*uint32 **/ punUnlockTime );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_ResetAllStats" )] internal static extern bool /*bool*/ ResetAllStats( IntPtr ISteamUserStats, bool /*bool*/ bAchievementsToo  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_FindOrCreateLeaderboard" )] internal static extern ulong /*SteamAPICall_t*/ FindOrCreateLeaderboard( IntPtr ISteamUserStats, string /*const char **/ pchLeaderboardName , LeaderboardSortMethod /*ELeaderboardSortMethod*/ eLeaderboardSortMethod , LeaderboardDisplayType /*ELeaderboardDisplayType*/ eLeaderboardDisplayType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_FindLeaderboard" )] internal static extern ulong /*SteamAPICall_t*/ FindLeaderboard( IntPtr ISteamUserStats, string /*const char **/ pchLeaderboardName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetLeaderboardName" )] internal static extern IntPtr GetLeaderboardName( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetLeaderboardEntryCount" )] internal static extern int /*int*/ GetLeaderboardEntryCount( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetLeaderboardSortMethod" )] internal static extern LeaderboardSortMethod /*ELeaderboardSortMethod*/ GetLeaderboardSortMethod( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetLeaderboardDisplayType" )] internal static extern LeaderboardDisplayType /*ELeaderboardDisplayType*/ GetLeaderboardDisplayType( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_DownloadLeaderboardEntries" )] internal static extern ulong /*SteamAPICall_t*/ DownloadLeaderboardEntries( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, LeaderboardDataRequest /*ELeaderboardDataRequest*/ eLeaderboardDataRequest , int /*int*/ nRangeStart , int /*int*/ nRangeEnd  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers" )] internal static extern ulong /*SteamAPICall_t*/ DownloadLeaderboardEntriesForUsers( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, IntPtr /*class CSteamID **/ prgUsers, int /*int*/ cUsers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry" )] internal static extern bool /*bool*/ GetDownloadedLeaderboardEntry( IntPtr ISteamUserStats, SteamLeaderboardEntries_t /*SteamLeaderboardEntries_t*/ hSteamLeaderboardEntries, int /*int*/ index , ref LeaderboardEntry_t /*struct LeaderboardEntry_t **/ pLeaderboardEntry, IntPtr /*int32 **/ pDetails, int /*int*/ cDetailsMax  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_UploadLeaderboardScore" )] internal static extern ulong /*SteamAPICall_t*/ UploadLeaderboardScore( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, LeaderboardUploadScoreMethod /*ELeaderboardUploadScoreMethod*/ eLeaderboardUploadScoreMethod , int /*int32*/ nScore , IntPtr /*const int32 **/ pScoreDetails, int /*int*/ cScoreDetailsCount  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_AttachLeaderboardUGC" )] internal static extern ulong /*SteamAPICall_t*/ AttachLeaderboardUGC( IntPtr ISteamUserStats, SteamLeaderboard_t /*SteamLeaderboard_t*/ hSteamLeaderboard, UGCHandle_t /*UGCHandle_t*/ hUGC );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers" )] internal static extern ulong /*SteamAPICall_t*/ GetNumberOfCurrentPlayers( IntPtr ISteamUserStats );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages" )] internal static extern ulong /*SteamAPICall_t*/ RequestGlobalAchievementPercentages( IntPtr ISteamUserStats );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo" )] internal static extern int /*int*/ GetMostAchievedAchievementInfo( IntPtr ISteamUserStats, System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen , out float /*float **/ pflPercent, out bool /*bool **/ pbAchieved );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo" )] internal static extern int /*int*/ GetNextMostAchievedAchievementInfo( IntPtr ISteamUserStats, int /*int*/ iIteratorPrevious , System.Text.StringBuilder /*char **/ pchName, uint /*uint32*/ unNameBufLen , out float /*float **/ pflPercent, out bool /*bool **/ pbAchieved );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetAchievementAchievedPercent" )] internal static extern bool /*bool*/ GetAchievementAchievedPercent( IntPtr ISteamUserStats, string /*const char **/ pchName , out float /*float **/ pflPercent );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_RequestGlobalStats" )] internal static extern ulong /*SteamAPICall_t*/ RequestGlobalStats( IntPtr ISteamUserStats, int /*int*/ nHistoryDays  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetGlobalStat" )] internal static extern bool /*bool*/ GetGlobalStat( IntPtr ISteamUserStats, string /*const char **/ pchStatName , out long /*int64 **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetGlobalStat0" )] internal static extern bool /*bool*/ GetGlobalStat0( IntPtr ISteamUserStats, string /*const char **/ pchStatName , out double /*double **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetGlobalStatHistory" )] internal static extern int /*int32*/ GetGlobalStatHistory( IntPtr ISteamUserStats, string /*const char **/ pchStatName , out long /*int64 **/ pData, uint /*uint32*/ cubData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUserStats_GetGlobalStatHistory0" )] internal static extern int /*int32*/ GetGlobalStatHistory0( IntPtr ISteamUserStats, string /*const char **/ pchStatName , out double /*double **/ pData, uint /*uint32*/ cubData  );
			}
			
			public static unsafe class ISteamApps
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsSubscribed" )] internal static extern bool /*bool*/ BIsSubscribed( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsLowViolence" )] internal static extern bool /*bool*/ BIsLowViolence( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsCybercafe" )] internal static extern bool /*bool*/ BIsCybercafe( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsVACBanned" )] internal static extern bool /*bool*/ BIsVACBanned( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetCurrentGameLanguage" )] internal static extern IntPtr GetCurrentGameLanguage( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetAvailableGameLanguages" )] internal static extern IntPtr GetAvailableGameLanguages( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsSubscribedApp" )] internal static extern bool /*bool*/ BIsSubscribedApp( IntPtr ISteamApps, AppId_t /*AppId_t*/ appID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsDlcInstalled" )] internal static extern bool /*bool*/ BIsDlcInstalled( IntPtr ISteamApps, AppId_t /*AppId_t*/ appID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime" )] internal static extern uint /*uint32*/ GetEarliestPurchaseUnixTime( IntPtr ISteamApps, AppId_t /*AppId_t*/ nAppID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend" )] internal static extern bool /*bool*/ BIsSubscribedFromFreeWeekend( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetDLCCount" )] internal static extern int /*int*/ GetDLCCount( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BGetDLCDataByIndex" )] internal static extern bool /*bool*/ BGetDLCDataByIndex( IntPtr ISteamApps, int /*int*/ iDLC , ref AppId_t /*AppId_t **/ pAppID, out bool /*bool **/ pbAvailable, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_InstallDLC" )] internal static extern void /*void*/ InstallDLC( IntPtr ISteamApps, AppId_t /*AppId_t*/ nAppID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_UninstallDLC" )] internal static extern void /*void*/ UninstallDLC( IntPtr ISteamApps, AppId_t /*AppId_t*/ nAppID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey" )] internal static extern void /*void*/ RequestAppProofOfPurchaseKey( IntPtr ISteamApps, AppId_t /*AppId_t*/ nAppID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetCurrentBetaName" )] internal static extern bool /*bool*/ GetCurrentBetaName( IntPtr ISteamApps, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_MarkContentCorrupt" )] internal static extern bool /*bool*/ MarkContentCorrupt( IntPtr ISteamApps, bool /*bool*/ bMissingFilesOnly  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetInstalledDepots" )] internal static extern uint /*uint32*/ GetInstalledDepots( IntPtr ISteamApps, AppId_t /*AppId_t*/ appID, IntPtr /*DepotId_t **/ pvecDepots, uint /*uint32*/ cMaxDepots  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetAppInstallDir" )] internal static extern uint /*uint32*/ GetAppInstallDir( IntPtr ISteamApps, AppId_t /*AppId_t*/ appID, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_BIsAppInstalled" )] internal static extern bool /*bool*/ BIsAppInstalled( IntPtr ISteamApps, AppId_t /*AppId_t*/ appID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetAppOwner" )] internal static extern ulong /*class CSteamID*/ GetAppOwner( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetLaunchQueryParam" )] internal static extern IntPtr GetLaunchQueryParam( IntPtr ISteamApps, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetDlcDownloadProgress" )] internal static extern bool /*bool*/ GetDlcDownloadProgress( IntPtr ISteamApps, AppId_t /*AppId_t*/ nAppID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_GetAppBuildId" )] internal static extern int /*int*/ GetAppBuildId( IntPtr ISteamApps );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys" )] internal static extern void /*void*/ RequestAllProofOfPurchaseKeys( IntPtr ISteamApps );
			}
			
			public static unsafe class ISteamNetworking
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_SendP2PPacket" )] internal static extern bool /*bool*/ SendP2PPacket( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDRemote, IntPtr /*const void **/ pubData , uint /*uint32*/ cubData , P2PSend /*EP2PSend*/ eP2PSendType , int /*int*/ nChannel  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_IsP2PPacketAvailable" )] internal static extern bool /*bool*/ IsP2PPacketAvailable( IntPtr ISteamNetworking, out uint /*uint32 **/ pcubMsgSize, int /*int*/ nChannel  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_ReadP2PPacket" )] internal static extern bool /*bool*/ ReadP2PPacket( IntPtr ISteamNetworking, IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize, out CSteamID /*class CSteamID **/ psteamIDRemote, int /*int*/ nChannel  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser" )] internal static extern bool /*bool*/ AcceptP2PSessionWithUser( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_CloseP2PSessionWithUser" )] internal static extern bool /*bool*/ CloseP2PSessionWithUser( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_CloseP2PChannelWithUser" )] internal static extern bool /*bool*/ CloseP2PChannelWithUser( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDRemote, int /*int*/ nChannel  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_GetP2PSessionState" )] internal static extern bool /*bool*/ GetP2PSessionState( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDRemote, ref P2PSessionState_t /*struct P2PSessionState_t **/ pConnectionState );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_AllowP2PPacketRelay" )] internal static extern bool /*bool*/ AllowP2PPacketRelay( IntPtr ISteamNetworking, bool /*bool*/ bAllow  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_CreateListenSocket" )] internal static extern uint /*SNetListenSocket_t*/ CreateListenSocket( IntPtr ISteamNetworking, int /*int*/ nVirtualP2PPort , uint /*uint32*/ nIP , ushort /*uint16*/ nPort , bool /*bool*/ bAllowUseOfPacketRelay  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_CreateP2PConnectionSocket" )] internal static extern uint /*SNetSocket_t*/ CreateP2PConnectionSocket( IntPtr ISteamNetworking, CSteamID /*class CSteamID*/ steamIDTarget, int /*int*/ nVirtualPort , int /*int*/ nTimeoutSec , bool /*bool*/ bAllowUseOfPacketRelay  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_CreateConnectionSocket" )] internal static extern uint /*SNetSocket_t*/ CreateConnectionSocket( IntPtr ISteamNetworking, uint /*uint32*/ nIP , ushort /*uint16*/ nPort , int /*int*/ nTimeoutSec  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_DestroySocket" )] internal static extern bool /*bool*/ DestroySocket( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket, bool /*bool*/ bNotifyRemoteEnd  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_DestroyListenSocket" )] internal static extern bool /*bool*/ DestroyListenSocket( IntPtr ISteamNetworking, SNetListenSocket_t /*SNetListenSocket_t*/ hSocket, bool /*bool*/ bNotifyRemoteEnd  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_SendDataOnSocket" )] internal static extern bool /*bool*/ SendDataOnSocket( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket, IntPtr /*void **/ pubData , uint /*uint32*/ cubData , bool /*bool*/ bReliable  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_IsDataAvailableOnSocket" )] internal static extern bool /*bool*/ IsDataAvailableOnSocket( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket, out uint /*uint32 **/ pcubMsgSize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_RetrieveDataFromSocket" )] internal static extern bool /*bool*/ RetrieveDataFromSocket( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket, IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_IsDataAvailable" )] internal static extern bool /*bool*/ IsDataAvailable( IntPtr ISteamNetworking, SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, out uint /*uint32 **/ pcubMsgSize, ref SNetSocket_t /*SNetSocket_t **/ phSocket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_RetrieveData" )] internal static extern bool /*bool*/ RetrieveData( IntPtr ISteamNetworking, SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, IntPtr /*void **/ pubDest , uint /*uint32*/ cubDest , out uint /*uint32 **/ pcubMsgSize, ref SNetSocket_t /*SNetSocket_t **/ phSocket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_GetSocketInfo" )] internal static extern bool /*bool*/ GetSocketInfo( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket, out CSteamID /*class CSteamID **/ pSteamIDRemote, IntPtr /*int **/ peSocketStatus, out uint /*uint32 **/ punIPRemote, out ushort /*uint16 **/ punPortRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_GetListenSocketInfo" )] internal static extern bool /*bool*/ GetListenSocketInfo( IntPtr ISteamNetworking, SNetListenSocket_t /*SNetListenSocket_t*/ hListenSocket, out uint /*uint32 **/ pnIP, out ushort /*uint16 **/ pnPort );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_GetSocketConnectionType" )] internal static extern SNetSocketConnectionType /*ESNetSocketConnectionType*/ GetSocketConnectionType( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamNetworking_GetMaxPacketSize" )] internal static extern int /*int*/ GetMaxPacketSize( IntPtr ISteamNetworking, SNetSocket_t /*SNetSocket_t*/ hSocket );
			}
			
			public static unsafe class ISteamScreenshots
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_WriteScreenshot" )] internal static extern uint /*ScreenshotHandle*/ WriteScreenshot( IntPtr ISteamScreenshots, IntPtr /*void **/ pubRGB , uint /*uint32*/ cubRGB , int /*int*/ nWidth , int /*int*/ nHeight  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_AddScreenshotToLibrary" )] internal static extern uint /*ScreenshotHandle*/ AddScreenshotToLibrary( IntPtr ISteamScreenshots, string /*const char **/ pchFilename , string /*const char **/ pchThumbnailFilename , int /*int*/ nWidth , int /*int*/ nHeight  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_TriggerScreenshot" )] internal static extern void /*void*/ TriggerScreenshot( IntPtr ISteamScreenshots );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_HookScreenshots" )] internal static extern void /*void*/ HookScreenshots( IntPtr ISteamScreenshots, bool /*bool*/ bHook  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_SetLocation" )] internal static extern bool /*bool*/ SetLocation( IntPtr ISteamScreenshots, ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, string /*const char **/ pchLocation  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_TagUser" )] internal static extern bool /*bool*/ TagUser( IntPtr ISteamScreenshots, ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamScreenshots_TagPublishedFile" )] internal static extern bool /*bool*/ TagPublishedFile( IntPtr ISteamScreenshots, ScreenshotHandle /*ScreenshotHandle*/ hScreenshot, PublishedFileId_t /*PublishedFileId_t*/ unPublishedFileID );
			}
			
			public static unsafe class ISteamMusic
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_BIsEnabled" )] internal static extern bool /*bool*/ BIsEnabled( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_BIsPlaying" )] internal static extern bool /*bool*/ BIsPlaying( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_GetPlaybackStatus" )] internal static extern AudioPlayback_Status /*AudioPlayback_Status*/ GetPlaybackStatus( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_Play" )] internal static extern void /*void*/ Play( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_Pause" )] internal static extern void /*void*/ Pause( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_PlayPrevious" )] internal static extern void /*void*/ PlayPrevious( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_PlayNext" )] internal static extern void /*void*/ PlayNext( IntPtr ISteamMusic );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_SetVolume" )] internal static extern void /*void*/ SetVolume( IntPtr ISteamMusic, float /*float*/ flVolume  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusic_GetVolume" )] internal static extern float /*float*/ GetVolume( IntPtr ISteamMusic );
			}
			
			public static unsafe class ISteamMusicRemote
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote" )] internal static extern bool /*bool*/ RegisterSteamMusicRemote( IntPtr ISteamMusicRemote, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote" )] internal static extern bool /*bool*/ DeregisterSteamMusicRemote( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote" )] internal static extern bool /*bool*/ BIsCurrentMusicRemote( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_BActivationSuccess" )] internal static extern bool /*bool*/ BActivationSuccess( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetDisplayName" )] internal static extern bool /*bool*/ SetDisplayName( IntPtr ISteamMusicRemote, string /*const char **/ pchDisplayName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64" )] internal static extern bool /*bool*/ SetPNGIcon_64x64( IntPtr ISteamMusicRemote, IntPtr /*void **/ pvBuffer , uint /*uint32*/ cbBufferLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnablePlayPrevious" )] internal static extern bool /*bool*/ EnablePlayPrevious( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnablePlayNext" )] internal static extern bool /*bool*/ EnablePlayNext( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnableShuffled" )] internal static extern bool /*bool*/ EnableShuffled( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnableLooped" )] internal static extern bool /*bool*/ EnableLooped( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnableQueue" )] internal static extern bool /*bool*/ EnableQueue( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_EnablePlaylists" )] internal static extern bool /*bool*/ EnablePlaylists( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus" )] internal static extern bool /*bool*/ UpdatePlaybackStatus( IntPtr ISteamMusicRemote, AudioPlayback_Status /*AudioPlayback_Status*/ nStatus  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateShuffled" )] internal static extern bool /*bool*/ UpdateShuffled( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateLooped" )] internal static extern bool /*bool*/ UpdateLooped( IntPtr ISteamMusicRemote, bool /*bool*/ bValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateVolume" )] internal static extern bool /*bool*/ UpdateVolume( IntPtr ISteamMusicRemote, float /*float*/ flValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_CurrentEntryWillChange" )] internal static extern bool /*bool*/ CurrentEntryWillChange( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable" )] internal static extern bool /*bool*/ CurrentEntryIsAvailable( IntPtr ISteamMusicRemote, bool /*bool*/ bAvailable  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText" )] internal static extern bool /*bool*/ UpdateCurrentEntryText( IntPtr ISteamMusicRemote, string /*const char **/ pchText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds" )] internal static extern bool /*bool*/ UpdateCurrentEntryElapsedSeconds( IntPtr ISteamMusicRemote, int /*int*/ nValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt" )] internal static extern bool /*bool*/ UpdateCurrentEntryCoverArt( IntPtr ISteamMusicRemote, IntPtr /*void **/ pvBuffer , uint /*uint32*/ cbBufferLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_CurrentEntryDidChange" )] internal static extern bool /*bool*/ CurrentEntryDidChange( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_QueueWillChange" )] internal static extern bool /*bool*/ QueueWillChange( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_ResetQueueEntries" )] internal static extern bool /*bool*/ ResetQueueEntries( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetQueueEntry" )] internal static extern bool /*bool*/ SetQueueEntry( IntPtr ISteamMusicRemote, int /*int*/ nID , int /*int*/ nPosition , string /*const char **/ pchEntryText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry" )] internal static extern bool /*bool*/ SetCurrentQueueEntry( IntPtr ISteamMusicRemote, int /*int*/ nID  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_QueueDidChange" )] internal static extern bool /*bool*/ QueueDidChange( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_PlaylistWillChange" )] internal static extern bool /*bool*/ PlaylistWillChange( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_ResetPlaylistEntries" )] internal static extern bool /*bool*/ ResetPlaylistEntries( IntPtr ISteamMusicRemote );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetPlaylistEntry" )] internal static extern bool /*bool*/ SetPlaylistEntry( IntPtr ISteamMusicRemote, int /*int*/ nID , int /*int*/ nPosition , string /*const char **/ pchEntryText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry" )] internal static extern bool /*bool*/ SetCurrentPlaylistEntry( IntPtr ISteamMusicRemote, int /*int*/ nID  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamMusicRemote_PlaylistDidChange" )] internal static extern bool /*bool*/ PlaylistDidChange( IntPtr ISteamMusicRemote );
			}
			
			public static unsafe class ISteamHTTP
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_CreateHTTPRequest" )] internal static extern uint /*HTTPRequestHandle*/ CreateHTTPRequest( IntPtr ISteamHTTP, HTTPMethod /*EHTTPMethod*/ eHTTPRequestMethod , string /*const char **/ pchAbsoluteURL  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestContextValue" )] internal static extern bool /*bool*/ SetHTTPRequestContextValue( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ulong /*uint64*/ ulContextValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout" )] internal static extern bool /*bool*/ SetHTTPRequestNetworkActivityTimeout( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ unTimeoutSeconds  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue" )] internal static extern bool /*bool*/ SetHTTPRequestHeaderValue( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , string /*const char **/ pchHeaderValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter" )] internal static extern bool /*bool*/ SetHTTPRequestGetOrPostParameter( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchParamName , string /*const char **/ pchParamValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SendHTTPRequest" )] internal static extern bool /*bool*/ SendHTTPRequest( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ref SteamAPICall_t /*SteamAPICall_t **/ pCallHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse" )] internal static extern bool /*bool*/ SendHTTPRequestAndStreamResponse( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, ref SteamAPICall_t /*SteamAPICall_t **/ pCallHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_DeferHTTPRequest" )] internal static extern bool /*bool*/ DeferHTTPRequest( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_PrioritizeHTTPRequest" )] internal static extern bool /*bool*/ PrioritizeHTTPRequest( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize" )] internal static extern bool /*bool*/ GetHTTPResponseHeaderSize( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , out uint /*uint32 **/ unResponseHeaderSize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue" )] internal static extern bool /*bool*/ GetHTTPResponseHeaderValue( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchHeaderName , out byte /*uint8 **/ pHeaderValueBuffer, uint /*uint32*/ unBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPResponseBodySize" )] internal static extern bool /*bool*/ GetHTTPResponseBodySize( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out uint /*uint32 **/ unBodySize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPResponseBodyData" )] internal static extern bool /*bool*/ GetHTTPResponseBodyData( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData" )] internal static extern bool /*bool*/ GetHTTPStreamingResponseBodyData( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ cOffset , out byte /*uint8 **/ pBodyDataBuffer, uint /*uint32*/ unBufferSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_ReleaseHTTPRequest" )] internal static extern bool /*bool*/ ReleaseHTTPRequest( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct" )] internal static extern bool /*bool*/ GetHTTPDownloadProgressPct( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out float /*float **/ pflPercentOut );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody" )] internal static extern bool /*bool*/ SetHTTPRequestRawPostBody( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchContentType , out byte /*uint8 **/ pubBody, uint /*uint32*/ unBodyLen  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_CreateCookieContainer" )] internal static extern uint /*HTTPCookieContainerHandle*/ CreateCookieContainer( IntPtr ISteamHTTP, bool /*bool*/ bAllowResponsesToModify  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_ReleaseCookieContainer" )] internal static extern bool /*bool*/ ReleaseCookieContainer( IntPtr ISteamHTTP, HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetCookie" )] internal static extern bool /*bool*/ SetCookie( IntPtr ISteamHTTP, HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer, string /*const char **/ pchHost , string /*const char **/ pchUrl , string /*const char **/ pchCookie  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer" )] internal static extern bool /*bool*/ SetHTTPRequestCookieContainer( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, HTTPCookieContainerHandle /*HTTPCookieContainerHandle*/ hCookieContainer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo" )] internal static extern bool /*bool*/ SetHTTPRequestUserAgentInfo( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, string /*const char **/ pchUserAgentInfo  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate" )] internal static extern bool /*bool*/ SetHTTPRequestRequiresVerifiedCertificate( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, bool /*bool*/ bRequireVerifiedCertificate  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS" )] internal static extern bool /*bool*/ SetHTTPRequestAbsoluteTimeoutMS( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, uint /*uint32*/ unMilliseconds  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut" )] internal static extern bool /*bool*/ GetHTTPRequestWasTimedOut( IntPtr ISteamHTTP, HTTPRequestHandle /*HTTPRequestHandle*/ hRequest, out bool /*bool **/ pbWasTimedOut );
			}
			
			public static unsafe class ISteamUnifiedMessages
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUnifiedMessages_SendMethod" )] internal static extern ulong /*ClientUnifiedMessageHandle*/ SendMethod( IntPtr ISteamUnifiedMessages, string /*const char **/ pchServiceMethod , IntPtr /*const void **/ pRequestBuffer , uint /*uint32*/ unRequestBufferSize , ulong /*uint64*/ unContext  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUnifiedMessages_GetMethodResponseInfo" )] internal static extern bool /*bool*/ GetMethodResponseInfo( IntPtr ISteamUnifiedMessages, ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle, out uint /*uint32 **/ punResponseSize, out Result /*EResult **/ peResult );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUnifiedMessages_GetMethodResponseData" )] internal static extern bool /*bool*/ GetMethodResponseData( IntPtr ISteamUnifiedMessages, ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle, IntPtr /*void **/ pResponseBuffer , uint /*uint32*/ unResponseBufferSize , bool /*bool*/ bAutoRelease  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUnifiedMessages_ReleaseMethod" )] internal static extern bool /*bool*/ ReleaseMethod( IntPtr ISteamUnifiedMessages, ClientUnifiedMessageHandle /*ClientUnifiedMessageHandle*/ hHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUnifiedMessages_SendNotification" )] internal static extern bool /*bool*/ SendNotification( IntPtr ISteamUnifiedMessages, string /*const char **/ pchServiceNotification , IntPtr /*const void **/ pNotificationBuffer , uint /*uint32*/ unNotificationBufferSize  );
			}
			
			public static unsafe class ISteamController
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_Init" )] internal static extern bool /*bool*/ Init( IntPtr ISteamController );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_Shutdown" )] internal static extern bool /*bool*/ Shutdown( IntPtr ISteamController );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_RunFrame" )] internal static extern void /*void*/ RunFrame( IntPtr ISteamController );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetConnectedControllers" )] internal static extern int /*int*/ GetConnectedControllers( IntPtr ISteamController, IntPtr /*ControllerHandle_t **/ handlesOut );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_ShowBindingPanel" )] internal static extern bool /*bool*/ ShowBindingPanel( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetActionSetHandle" )] internal static extern ulong /*ControllerActionSetHandle_t*/ GetActionSetHandle( IntPtr ISteamController, string /*const char **/ pszActionSetName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_ActivateActionSet" )] internal static extern void /*void*/ ActivateActionSet( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetCurrentActionSet" )] internal static extern ulong /*ControllerActionSetHandle_t*/ GetCurrentActionSet( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetDigitalActionHandle" )] internal static extern ulong /*ControllerDigitalActionHandle_t*/ GetDigitalActionHandle( IntPtr ISteamController, string /*const char **/ pszActionName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetDigitalActionData" )] internal static extern ControllerDigitalActionData_t /*struct ControllerDigitalActionData_t*/ GetDigitalActionData( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerDigitalActionHandle_t /*ControllerDigitalActionHandle_t*/ digitalActionHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetDigitalActionOrigins" )] internal static extern int /*int*/ GetDigitalActionOrigins( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle, ControllerDigitalActionHandle_t /*ControllerDigitalActionHandle_t*/ digitalActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetAnalogActionHandle" )] internal static extern ulong /*ControllerAnalogActionHandle_t*/ GetAnalogActionHandle( IntPtr ISteamController, string /*const char **/ pszActionName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetAnalogActionData" )] internal static extern ControllerAnalogActionData_t /*struct ControllerAnalogActionData_t*/ GetAnalogActionData( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ analogActionHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_GetAnalogActionOrigins" )] internal static extern int /*int*/ GetAnalogActionOrigins( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerActionSetHandle_t /*ControllerActionSetHandle_t*/ actionSetHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ analogActionHandle, out ControllerActionOrigin /*EControllerActionOrigin **/ originsOut );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_StopAnalogActionMomentum" )] internal static extern void /*void*/ StopAnalogActionMomentum( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, ControllerAnalogActionHandle_t /*ControllerAnalogActionHandle_t*/ eAction );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_TriggerHapticPulse" )] internal static extern void /*void*/ TriggerHapticPulse( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad , ushort /*unsigned short*/ usDurationMicroSec  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamController_TriggerRepeatedHapticPulse" )] internal static extern void /*void*/ TriggerRepeatedHapticPulse( IntPtr ISteamController, ControllerHandle_t /*ControllerHandle_t*/ controllerHandle, SteamControllerPad /*ESteamControllerPad*/ eTargetPad , ushort /*unsigned short*/ usDurationMicroSec , ushort /*unsigned short*/ usOffMicroSec , ushort /*unsigned short*/ unRepeat , uint /*unsigned int*/ nFlags  );
			}
			
			public static unsafe class ISteamUGC
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_CreateQueryUserUGCRequest" )] internal static extern ulong /*UGCQueryHandle_t*/ CreateQueryUserUGCRequest( IntPtr ISteamUGC, AccountID_t /*AccountID_t*/ unAccountID, UserUGCList /*EUserUGCList*/ eListType , UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingUGCType , UserUGCListSortOrder /*EUserUGCListSortOrder*/ eSortOrder , AppId_t /*AppId_t*/ nCreatorAppID, AppId_t /*AppId_t*/ nConsumerAppID, uint /*uint32*/ unPage  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_CreateQueryAllUGCRequest" )] internal static extern ulong /*UGCQueryHandle_t*/ CreateQueryAllUGCRequest( IntPtr ISteamUGC, UGCQuery /*EUGCQuery*/ eQueryType , UGCMatchingUGCType /*EUGCMatchingUGCType*/ eMatchingeMatchingUGCTypeFileType , AppId_t /*AppId_t*/ nCreatorAppID, AppId_t /*AppId_t*/ nConsumerAppID, uint /*uint32*/ unPage  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest" )] internal static extern ulong /*UGCQueryHandle_t*/ CreateQueryUGCDetailsRequest( IntPtr ISteamUGC, IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ unNumPublishedFileIDs  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SendQueryUGCRequest" )] internal static extern ulong /*SteamAPICall_t*/ SendQueryUGCRequest( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCResult" )] internal static extern bool /*bool*/ GetQueryUGCResult( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , ref SteamUGCDetails_t /*struct SteamUGCDetails_t **/ pDetails );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCPreviewURL" )] internal static extern bool /*bool*/ GetQueryUGCPreviewURL( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , System.Text.StringBuilder /*char **/ pchURL, uint /*uint32*/ cchURLSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCMetadata" )] internal static extern bool /*bool*/ GetQueryUGCMetadata( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , System.Text.StringBuilder /*char **/ pchMetadata, uint /*uint32*/ cchMetadatasize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCChildren" )] internal static extern bool /*bool*/ GetQueryUGCChildren( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCStatistic" )] internal static extern bool /*bool*/ GetQueryUGCStatistic( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , ItemStatistic /*EItemStatistic*/ eStatType , out uint /*uint32 **/ pStatValue );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews" )] internal static extern uint /*uint32*/ GetQueryUGCNumAdditionalPreviews( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview" )] internal static extern bool /*bool*/ GetQueryUGCAdditionalPreview( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , uint /*uint32*/ previewIndex , System.Text.StringBuilder /*char **/ pchURLOrVideoID, uint /*uint32*/ cchURLSize , System.Text.StringBuilder /*char **/ pchOriginalFileName, uint /*uint32*/ cchOriginalFileNameSize , out ItemPreviewType /*EItemPreviewType **/ pPreviewType );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags" )] internal static extern uint /*uint32*/ GetQueryUGCNumKeyValueTags( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag" )] internal static extern bool /*bool*/ GetQueryUGCKeyValueTag( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ index , uint /*uint32*/ keyValueTagIndex , System.Text.StringBuilder /*char **/ pchKey, uint /*uint32*/ cchKeySize , System.Text.StringBuilder /*char **/ pchValue, uint /*uint32*/ cchValueSize  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_ReleaseQueryUGCRequest" )] internal static extern bool /*bool*/ ReleaseQueryUGCRequest( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddRequiredTag" )] internal static extern bool /*bool*/ AddRequiredTag( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pTagName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddExcludedTag" )] internal static extern bool /*bool*/ AddExcludedTag( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pTagName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnKeyValueTags" )] internal static extern bool /*bool*/ SetReturnKeyValueTags( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnKeyValueTags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnLongDescription" )] internal static extern bool /*bool*/ SetReturnLongDescription( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnLongDescription  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnMetadata" )] internal static extern bool /*bool*/ SetReturnMetadata( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnMetadata  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnChildren" )] internal static extern bool /*bool*/ SetReturnChildren( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnChildren  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnAdditionalPreviews" )] internal static extern bool /*bool*/ SetReturnAdditionalPreviews( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnAdditionalPreviews  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetReturnTotalOnly" )] internal static extern bool /*bool*/ SetReturnTotalOnly( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bReturnTotalOnly  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetLanguage" )] internal static extern bool /*bool*/ SetLanguage( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pchLanguage  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetAllowCachedResponse" )] internal static extern bool /*bool*/ SetAllowCachedResponse( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ unMaxAgeSeconds  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetCloudFileNameFilter" )] internal static extern bool /*bool*/ SetCloudFileNameFilter( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pMatchCloudFileName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetMatchAnyTag" )] internal static extern bool /*bool*/ SetMatchAnyTag( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, bool /*bool*/ bMatchAnyTag  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetSearchText" )] internal static extern bool /*bool*/ SetSearchText( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pSearchText  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetRankedByTrendDays" )] internal static extern bool /*bool*/ SetRankedByTrendDays( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, uint /*uint32*/ unDays  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddRequiredKeyValueTag" )] internal static extern bool /*bool*/ AddRequiredKeyValueTag( IntPtr ISteamUGC, UGCQueryHandle_t /*UGCQueryHandle_t*/ handle, string /*const char **/ pKey , string /*const char **/ pValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_RequestUGCDetails" )] internal static extern ulong /*SteamAPICall_t*/ RequestUGCDetails( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, uint /*uint32*/ unMaxAgeSeconds  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_CreateItem" )] internal static extern ulong /*SteamAPICall_t*/ CreateItem( IntPtr ISteamUGC, AppId_t /*AppId_t*/ nConsumerAppId, WorkshopFileType /*EWorkshopFileType*/ eFileType  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_StartItemUpdate" )] internal static extern ulong /*UGCUpdateHandle_t*/ StartItemUpdate( IntPtr ISteamUGC, AppId_t /*AppId_t*/ nConsumerAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemTitle" )] internal static extern bool /*bool*/ SetItemTitle( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchTitle  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemDescription" )] internal static extern bool /*bool*/ SetItemDescription( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchDescription  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemUpdateLanguage" )] internal static extern bool /*bool*/ SetItemUpdateLanguage( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchLanguage  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemMetadata" )] internal static extern bool /*bool*/ SetItemMetadata( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchMetaData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemVisibility" )] internal static extern bool /*bool*/ SetItemVisibility( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, RemoteStoragePublishedFileVisibility /*ERemoteStoragePublishedFileVisibility*/ eVisibility  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemTags" )] internal static extern bool /*bool*/ SetItemTags( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ updateHandle, IntPtr /*const struct SteamParamStringArray_t **/ pTags );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemContent" )] internal static extern bool /*bool*/ SetItemContent( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszContentFolder  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetItemPreview" )] internal static extern bool /*bool*/ SetItemPreview( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszPreviewFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_RemoveItemKeyValueTags" )] internal static extern bool /*bool*/ RemoveItemKeyValueTags( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchKey  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddItemKeyValueTag" )] internal static extern bool /*bool*/ AddItemKeyValueTag( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchKey , string /*const char **/ pchValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddItemPreviewFile" )] internal static extern bool /*bool*/ AddItemPreviewFile( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszPreviewFile , ItemPreviewType /*EItemPreviewType*/ type  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddItemPreviewVideo" )] internal static extern bool /*bool*/ AddItemPreviewVideo( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pszVideoID  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_UpdateItemPreviewFile" )] internal static extern bool /*bool*/ UpdateItemPreviewFile( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index , string /*const char **/ pszPreviewFile  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_UpdateItemPreviewVideo" )] internal static extern bool /*bool*/ UpdateItemPreviewVideo( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index , string /*const char **/ pszVideoID  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_RemoveItemPreview" )] internal static extern bool /*bool*/ RemoveItemPreview( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, uint /*uint32*/ index  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SubmitItemUpdate" )] internal static extern ulong /*SteamAPICall_t*/ SubmitItemUpdate( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, string /*const char **/ pchChangeNote  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetItemUpdateProgress" )] internal static extern ItemUpdateStatus /*EItemUpdateStatus*/ GetItemUpdateProgress( IntPtr ISteamUGC, UGCUpdateHandle_t /*UGCUpdateHandle_t*/ handle, out ulong /*uint64 **/ punBytesProcessed, out ulong /*uint64 **/ punBytesTotal );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SetUserItemVote" )] internal static extern ulong /*SteamAPICall_t*/ SetUserItemVote( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, bool /*bool*/ bVoteUp  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetUserItemVote" )] internal static extern ulong /*SteamAPICall_t*/ GetUserItemVote( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_AddItemToFavorites" )] internal static extern ulong /*SteamAPICall_t*/ AddItemToFavorites( IntPtr ISteamUGC, AppId_t /*AppId_t*/ nAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_RemoveItemFromFavorites" )] internal static extern ulong /*SteamAPICall_t*/ RemoveItemFromFavorites( IntPtr ISteamUGC, AppId_t /*AppId_t*/ nAppId, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SubscribeItem" )] internal static extern ulong /*SteamAPICall_t*/ SubscribeItem( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_UnsubscribeItem" )] internal static extern ulong /*SteamAPICall_t*/ UnsubscribeItem( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetNumSubscribedItems" )] internal static extern uint /*uint32*/ GetNumSubscribedItems( IntPtr ISteamUGC );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetSubscribedItems" )] internal static extern uint /*uint32*/ GetSubscribedItems( IntPtr ISteamUGC, IntPtr /*PublishedFileId_t **/ pvecPublishedFileID, uint /*uint32*/ cMaxEntries  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetItemState" )] internal static extern uint /*uint32*/ GetItemState( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetItemInstallInfo" )] internal static extern bool /*bool*/ GetItemInstallInfo( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, out ulong /*uint64 **/ punSizeOnDisk, System.Text.StringBuilder /*char **/ pchFolder, uint /*uint32*/ cchFolderSize , out uint /*uint32 **/ punTimeStamp );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_GetItemDownloadInfo" )] internal static extern bool /*bool*/ GetItemDownloadInfo( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, out ulong /*uint64 **/ punBytesDownloaded, out ulong /*uint64 **/ punBytesTotal );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_DownloadItem" )] internal static extern bool /*bool*/ DownloadItem( IntPtr ISteamUGC, PublishedFileId_t /*PublishedFileId_t*/ nPublishedFileID, bool /*bool*/ bHighPriority  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_BInitWorkshopForGameServer" )] internal static extern bool /*bool*/ BInitWorkshopForGameServer( IntPtr ISteamUGC, DepotId_t /*DepotId_t*/ unWorkshopDepotID, string /*const char **/ pszFolder  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamUGC_SuspendDownloads" )] internal static extern void /*void*/ SuspendDownloads( IntPtr ISteamUGC, bool /*bool*/ bSuspend  );
			}
			
			public static unsafe class ISteamAppList
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamAppList_GetNumInstalledApps" )] internal static extern uint /*uint32*/ GetNumInstalledApps( IntPtr ISteamAppList );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamAppList_GetInstalledApps" )] internal static extern uint /*uint32*/ GetInstalledApps( IntPtr ISteamAppList, IntPtr /*AppId_t **/ pvecAppID, uint /*uint32*/ unMaxAppIDs  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamAppList_GetAppName" )] internal static extern int /*int*/ GetAppName( IntPtr ISteamAppList, AppId_t /*AppId_t*/ nAppID, System.Text.StringBuilder /*char **/ pchName, int /*int*/ cchNameMax  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamAppList_GetAppInstallDir" )] internal static extern int /*int*/ GetAppInstallDir( IntPtr ISteamAppList, AppId_t /*AppId_t*/ nAppID, System.Text.StringBuilder /*char **/ pchDirectory, int /*int*/ cchNameMax  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamAppList_GetAppBuildId" )] internal static extern int /*int*/ GetAppBuildId( IntPtr ISteamAppList, AppId_t /*AppId_t*/ nAppID );
			}
			
			public static unsafe class ISteamHTMLSurface
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_DestructISteamHTMLSurface" )] internal static extern void /*void*/ DestructISteamHTMLSurface( IntPtr ISteamHTMLSurface );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_Init" )] internal static extern bool /*bool*/ Init( IntPtr ISteamHTMLSurface );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_Shutdown" )] internal static extern bool /*bool*/ Shutdown( IntPtr ISteamHTMLSurface );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_CreateBrowser" )] internal static extern ulong /*SteamAPICall_t*/ CreateBrowser( IntPtr ISteamHTMLSurface, string /*const char **/ pchUserAgent , string /*const char **/ pchUserCSS  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_RemoveBrowser" )] internal static extern void /*void*/ RemoveBrowser( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_LoadURL" )] internal static extern void /*void*/ LoadURL( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchURL , string /*const char **/ pchPostData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetSize" )] internal static extern void /*void*/ SetSize( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ unWidth , uint /*uint32*/ unHeight  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_StopLoad" )] internal static extern void /*void*/ StopLoad( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_Reload" )] internal static extern void /*void*/ Reload( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_GoBack" )] internal static extern void /*void*/ GoBack( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_GoForward" )] internal static extern void /*void*/ GoForward( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_AddHeader" )] internal static extern void /*void*/ AddHeader( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchKey , string /*const char **/ pchValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_ExecuteJavascript" )] internal static extern void /*void*/ ExecuteJavascript( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchScript  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_MouseUp" )] internal static extern void /*void*/ MouseUp( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_MouseDown" )] internal static extern void /*void*/ MouseDown( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_MouseDoubleClick" )] internal static extern void /*void*/ MouseDoubleClick( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, HTMLMouseButton /*ISteamHTMLSurface::EHTMLMouseButton*/ eMouseButton  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_MouseMove" )] internal static extern void /*void*/ MouseMove( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int*/ x , int /*int*/ y  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_MouseWheel" )] internal static extern void /*void*/ MouseWheel( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int32*/ nDelta  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_KeyDown" )] internal static extern void /*void*/ KeyDown( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nNativeKeyCode , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_KeyUp" )] internal static extern void /*void*/ KeyUp( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nNativeKeyCode , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_KeyChar" )] internal static extern void /*void*/ KeyChar( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ cUnicodeChar , HTMLKeyModifiers /*ISteamHTMLSurface::EHTMLKeyModifiers*/ eHTMLKeyModifiers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetHorizontalScroll" )] internal static extern void /*void*/ SetHorizontalScroll( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetVerticalScroll" )] internal static extern void /*void*/ SetVerticalScroll( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, uint /*uint32*/ nAbsolutePixelScroll  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetKeyFocus" )] internal static extern void /*void*/ SetKeyFocus( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bHasKeyFocus  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_ViewSource" )] internal static extern void /*void*/ ViewSource( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_CopyToClipboard" )] internal static extern void /*void*/ CopyToClipboard( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_PasteFromClipboard" )] internal static extern void /*void*/ PasteFromClipboard( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_Find" )] internal static extern void /*void*/ Find( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, string /*const char **/ pchSearchStr , bool /*bool*/ bCurrentlyInFind , bool /*bool*/ bReverse  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_StopFind" )] internal static extern void /*void*/ StopFind( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_GetLinkAtPosition" )] internal static extern void /*void*/ GetLinkAtPosition( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, int /*int*/ x , int /*int*/ y  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetCookie" )] internal static extern void /*void*/ SetCookie( IntPtr ISteamHTMLSurface, string /*const char **/ pchHostname , string /*const char **/ pchKey , string /*const char **/ pchValue , string /*const char **/ pchPath , RTime32 /*RTime32*/ nExpires, bool /*bool*/ bSecure , bool /*bool*/ bHTTPOnly  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetPageScaleFactor" )] internal static extern void /*void*/ SetPageScaleFactor( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, float /*float*/ flZoom , int /*int*/ nPointX , int /*int*/ nPointY  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_SetBackgroundMode" )] internal static extern void /*void*/ SetBackgroundMode( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bBackgroundMode  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_AllowStartRequest" )] internal static extern void /*void*/ AllowStartRequest( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bAllowed  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamHTMLSurface_JSDialogResponse" )] internal static extern void /*void*/ JSDialogResponse( IntPtr ISteamHTMLSurface, HHTMLBrowser /*HHTMLBrowser*/ unBrowserHandle, bool /*bool*/ bResult  );
			}
			
			public static unsafe class ISteamInventory
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetResultStatus" )] internal static extern Result /*EResult*/ GetResultStatus( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetResultItems" )] internal static extern bool /*bool*/ GetResultItems( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, IntPtr /*struct SteamItemDetails_t **/ pOutItemsArray, out uint /*uint32 **/ punOutItemsArraySize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetResultTimestamp" )] internal static extern uint /*uint32*/ GetResultTimestamp( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_CheckResultSteamID" )] internal static extern bool /*bool*/ CheckResultSteamID( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, CSteamID /*class CSteamID*/ steamIDExpected );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_DestroyResult" )] internal static extern void /*void*/ DestroyResult( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetAllItems" )] internal static extern bool /*bool*/ GetAllItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetItemsByID" )] internal static extern bool /*bool*/ GetItemsByID( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemInstanceID_t **/ pInstanceIDs, uint /*uint32*/ unCountInstanceIDs  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_SerializeResult" )] internal static extern bool /*bool*/ SerializeResult( IntPtr ISteamInventory, SteamInventoryResult_t /*SteamInventoryResult_t*/ resultHandle, IntPtr /*void **/ pOutBuffer , out uint /*uint32 **/ punOutBufferSize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_DeserializeResult" )] internal static extern bool /*bool*/ DeserializeResult( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pOutResultHandle, IntPtr /*const void **/ pBuffer , uint /*uint32*/ unBufferSize , bool /*bool*/ bRESERVED_MUST_BE_FALSE  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GenerateItems" )] internal static extern bool /*bool*/ GenerateItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemDef_t **/ pArrayItemDefs, out uint /*const uint32 **/ punArrayQuantity, uint /*uint32*/ unArrayLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GrantPromoItems" )] internal static extern bool /*bool*/ GrantPromoItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_AddPromoItem" )] internal static extern bool /*bool*/ AddPromoItem( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemDef_t /*SteamItemDef_t*/ itemDef );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_AddPromoItems" )] internal static extern bool /*bool*/ AddPromoItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, IntPtr /*const SteamItemDef_t **/ pArrayItemDefs, uint /*uint32*/ unArrayLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_ConsumeItem" )] internal static extern bool /*bool*/ ConsumeItem( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemConsume, uint /*uint32*/ unQuantity  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_ExchangeItems" )] internal static extern bool /*bool*/ ExchangeItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, ref SteamItemDef_t /*const SteamItemDef_t **/ pArrayGenerate, out uint /*const uint32 **/ punArrayGenerateQuantity, uint /*uint32*/ unArrayGenerateLength , IntPtr /*const SteamItemInstanceID_t **/ pArrayDestroy, IntPtr /*const uint32 **/ punArrayDestroyQuantity, uint /*uint32*/ unArrayDestroyLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_TransferItemQuantity" )] internal static extern bool /*bool*/ TransferItemQuantity( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemIdSource, uint /*uint32*/ unQuantity , SteamItemInstanceID_t /*SteamItemInstanceID_t*/ itemIdDest );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_SendItemDropHeartbeat" )] internal static extern void /*void*/ SendItemDropHeartbeat( IntPtr ISteamInventory );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_TriggerItemDrop" )] internal static extern bool /*bool*/ TriggerItemDrop( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, SteamItemDef_t /*SteamItemDef_t*/ dropListDefinition );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_TradeItems" )] internal static extern bool /*bool*/ TradeItems( IntPtr ISteamInventory, ref SteamInventoryResult_t /*SteamInventoryResult_t **/ pResultHandle, CSteamID /*class CSteamID*/ steamIDTradePartner, ref SteamItemInstanceID_t /*const SteamItemInstanceID_t **/ pArrayGive, out uint /*const uint32 **/ pArrayGiveQuantity, uint /*uint32*/ nArrayGiveLength , ref SteamItemInstanceID_t /*const SteamItemInstanceID_t **/ pArrayGet, out uint /*const uint32 **/ pArrayGetQuantity, uint /*uint32*/ nArrayGetLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_LoadItemDefinitions" )] internal static extern bool /*bool*/ LoadItemDefinitions( IntPtr ISteamInventory );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetItemDefinitionIDs" )] internal static extern bool /*bool*/ GetItemDefinitionIDs( IntPtr ISteamInventory, IntPtr /*SteamItemDef_t **/ pItemDefIDs, out uint /*uint32 **/ punItemDefIDsArraySize );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamInventory_GetItemDefinitionProperty" )] internal static extern bool /*bool*/ GetItemDefinitionProperty( IntPtr ISteamInventory, SteamItemDef_t /*SteamItemDef_t*/ iDefinition, string /*const char **/ pchPropertyName , System.Text.StringBuilder /*char **/ pchValueBuffer, out uint /*uint32 **/ punValueBufferSize );
			}
			
			public static unsafe class ISteamVideo
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamVideo_GetVideoURL" )] internal static extern void /*void*/ GetVideoURL( IntPtr ISteamVideo, AppId_t /*AppId_t*/ unVideoAppID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamVideo_IsBroadcasting" )] internal static extern bool /*bool*/ IsBroadcasting( IntPtr ISteamVideo, IntPtr /*int **/ pnNumViewers );
			}
			
			public static unsafe class ISteamGameServer
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_InitGameServer" )] internal static extern bool /*bool*/ InitGameServer( IntPtr ISteamGameServer, uint /*uint32*/ unIP , ushort /*uint16*/ usGamePort , ushort /*uint16*/ usQueryPort , uint /*uint32*/ unFlags , AppId_t /*AppId_t*/ nGameAppId, string /*const char **/ pchVersionString  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetProduct" )] internal static extern void /*void*/ SetProduct( IntPtr ISteamGameServer, string /*const char **/ pszProduct  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetGameDescription" )] internal static extern void /*void*/ SetGameDescription( IntPtr ISteamGameServer, string /*const char **/ pszGameDescription  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetModDir" )] internal static extern void /*void*/ SetModDir( IntPtr ISteamGameServer, string /*const char **/ pszModDir  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetDedicatedServer" )] internal static extern void /*void*/ SetDedicatedServer( IntPtr ISteamGameServer, bool /*bool*/ bDedicated  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_LogOn" )] internal static extern void /*void*/ LogOn( IntPtr ISteamGameServer, string /*const char **/ pszToken  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_LogOnAnonymous" )] internal static extern void /*void*/ LogOnAnonymous( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_LogOff" )] internal static extern void /*void*/ LogOff( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_BLoggedOn" )] internal static extern bool /*bool*/ BLoggedOn( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_BSecure" )] internal static extern bool /*bool*/ BSecure( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetSteamID" )] internal static extern ulong /*class CSteamID*/ GetSteamID( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_WasRestartRequested" )] internal static extern bool /*bool*/ WasRestartRequested( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetMaxPlayerCount" )] internal static extern void /*void*/ SetMaxPlayerCount( IntPtr ISteamGameServer, int /*int*/ cPlayersMax  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetBotPlayerCount" )] internal static extern void /*void*/ SetBotPlayerCount( IntPtr ISteamGameServer, int /*int*/ cBotplayers  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetServerName" )] internal static extern void /*void*/ SetServerName( IntPtr ISteamGameServer, string /*const char **/ pszServerName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetMapName" )] internal static extern void /*void*/ SetMapName( IntPtr ISteamGameServer, string /*const char **/ pszMapName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetPasswordProtected" )] internal static extern void /*void*/ SetPasswordProtected( IntPtr ISteamGameServer, bool /*bool*/ bPasswordProtected  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetSpectatorPort" )] internal static extern void /*void*/ SetSpectatorPort( IntPtr ISteamGameServer, ushort /*uint16*/ unSpectatorPort  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetSpectatorServerName" )] internal static extern void /*void*/ SetSpectatorServerName( IntPtr ISteamGameServer, string /*const char **/ pszSpectatorServerName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_ClearAllKeyValues" )] internal static extern void /*void*/ ClearAllKeyValues( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetKeyValue" )] internal static extern void /*void*/ SetKeyValue( IntPtr ISteamGameServer, string /*const char **/ pKey , string /*const char **/ pValue  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetGameTags" )] internal static extern void /*void*/ SetGameTags( IntPtr ISteamGameServer, string /*const char **/ pchGameTags  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetGameData" )] internal static extern void /*void*/ SetGameData( IntPtr ISteamGameServer, string /*const char **/ pchGameData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetRegion" )] internal static extern void /*void*/ SetRegion( IntPtr ISteamGameServer, string /*const char **/ pszRegion  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate" )] internal static extern bool /*bool*/ SendUserConnectAndAuthenticate( IntPtr ISteamGameServer, uint /*uint32*/ unIPClient , IntPtr /*const void **/ pvAuthBlob , uint /*uint32*/ cubAuthBlobSize , out CSteamID /*class CSteamID **/ pSteamIDUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection" )] internal static extern ulong /*class CSteamID*/ CreateUnauthenticatedUserConnection( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SendUserDisconnect" )] internal static extern void /*void*/ SendUserDisconnect( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamIDUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_BUpdateUserData" )] internal static extern bool /*bool*/ BUpdateUserData( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchPlayerName , uint /*uint32*/ uScore  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetAuthSessionTicket" )] internal static extern uint /*HAuthTicket*/ GetAuthSessionTicket( IntPtr ISteamGameServer, IntPtr /*void **/ pTicket , int /*int*/ cbMaxTicket , out uint /*uint32 **/ pcbTicket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_BeginAuthSession" )] internal static extern BeginAuthSessionResult /*EBeginAuthSessionResult*/ BeginAuthSession( IntPtr ISteamGameServer, IntPtr /*const void **/ pAuthTicket , int /*int*/ cbAuthTicket , CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_EndAuthSession" )] internal static extern void /*void*/ EndAuthSession( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_CancelAuthTicket" )] internal static extern void /*void*/ CancelAuthTicket( IntPtr ISteamGameServer, HAuthTicket /*HAuthTicket*/ hAuthTicket );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_UserHasLicenseForApp" )] internal static extern UserHasLicenseForAppResult /*EUserHasLicenseForAppResult*/ UserHasLicenseForApp( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamID, AppId_t /*AppId_t*/ appID );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_RequestUserGroupStatus" )] internal static extern bool /*bool*/ RequestUserGroupStatus( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamIDUser, CSteamID /*class CSteamID*/ steamIDGroup );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetGameplayStats" )] internal static extern void /*void*/ GetGameplayStats( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetServerReputation" )] internal static extern ulong /*SteamAPICall_t*/ GetServerReputation( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetPublicIP" )] internal static extern uint /*uint32*/ GetPublicIP( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_HandleIncomingPacket" )] internal static extern bool /*bool*/ HandleIncomingPacket( IntPtr ISteamGameServer, IntPtr /*const void **/ pData , int /*int*/ cbData , uint /*uint32*/ srcIP , ushort /*uint16*/ srcPort  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_GetNextOutgoingPacket" )] internal static extern int /*int*/ GetNextOutgoingPacket( IntPtr ISteamGameServer, IntPtr /*void **/ pOut , int /*int*/ cbMaxOut , out uint /*uint32 **/ pNetAdr, out ushort /*uint16 **/ pPort );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_EnableHeartbeats" )] internal static extern void /*void*/ EnableHeartbeats( IntPtr ISteamGameServer, bool /*bool*/ bActive  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_SetHeartbeatInterval" )] internal static extern void /*void*/ SetHeartbeatInterval( IntPtr ISteamGameServer, int /*int*/ iHeartbeatInterval  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_ForceHeartbeat" )] internal static extern void /*void*/ ForceHeartbeat( IntPtr ISteamGameServer );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_AssociateWithClan" )] internal static extern ulong /*SteamAPICall_t*/ AssociateWithClan( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamIDClan );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility" )] internal static extern ulong /*SteamAPICall_t*/ ComputeNewPlayerCompatibility( IntPtr ISteamGameServer, CSteamID /*class CSteamID*/ steamIDNewPlayer );
			}
			
			public static unsafe class ISteamGameServerStats
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_RequestUserStats" )] internal static extern ulong /*SteamAPICall_t*/ RequestUserStats( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_GetUserStat" )] internal static extern bool /*bool*/ GetUserStat( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out int /*int32 **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_GetUserStat0" )] internal static extern bool /*bool*/ GetUserStat0( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out float /*float **/ pData );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_GetUserAchievement" )] internal static extern bool /*bool*/ GetUserAchievement( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , out bool /*bool **/ pbAchieved );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_SetUserStat" )] internal static extern bool /*bool*/ SetUserStat( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , int /*int32*/ nData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_SetUserStat0" )] internal static extern bool /*bool*/ SetUserStat0( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , float /*float*/ fData  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat" )] internal static extern bool /*bool*/ UpdateUserAvgRateStat( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName , float /*float*/ flCountThisSession , double /*double*/ dSessionLength  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_SetUserAchievement" )] internal static extern bool /*bool*/ SetUserAchievement( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_ClearUserAchievement" )] internal static extern bool /*bool*/ ClearUserAchievement( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser, string /*const char **/ pchName  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_ISteamGameServerStats_StoreUserStats" )] internal static extern ulong /*SteamAPICall_t*/ StoreUserStats( IntPtr ISteamGameServerStats, CSteamID /*class CSteamID*/ steamIDUser );
			}
			
			public static unsafe class Global
			{
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_Init" )] internal static extern void /*void*/ SteamAPI_Init(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_RunCallbacks" )] internal static extern void /*void*/ SteamAPI_RunCallbacks(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamGameServer_RunCallbacks" )] internal static extern void /*void*/ SteamGameServer_RunCallbacks(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_RegisterCallback" )] internal static extern void /*void*/ SteamAPI_RegisterCallback( IntPtr /*void **/ pCallback , int /*int*/ callback  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_UnregisterCallback" )] internal static extern void /*void*/ SteamAPI_UnregisterCallback( IntPtr /*void **/ pCallback  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamInternal_GameServer_Init" )] internal static extern bool /*bool*/ SteamInternal_GameServer_Init( uint /*uint32*/ unIP , ushort /*uint16*/ usPort , ushort /*uint16*/ usGamePort , ushort /*uint16*/ usQueryPort , int /*int*/ eServerMode , string /*const char **/ pchVersionString  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_Shutdown" )] internal static extern void /*void*/ SteamAPI_Shutdown(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_GetHSteamUser" )] internal static extern int /*HSteamUser*/ SteamAPI_GetHSteamUser(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamAPI_GetHSteamPipe" )] internal static extern int /*HSteamPipe*/ SteamAPI_GetHSteamPipe(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamGameServer_GetHSteamUser" )] internal static extern int /*HSteamUser*/ SteamGameServer_GetHSteamUser(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamGameServer_GetHSteamPipe" )] internal static extern int /*HSteamPipe*/ SteamGameServer_GetHSteamPipe(  );
				[DllImportAttribute( "libsteam_api.so", EntryPoint = "SteamInternal_CreateInterface" )] internal static extern IntPtr /*void **/ SteamInternal_CreateInterface( string /*const char **/ version  );
			}
			
		}
	}
}
