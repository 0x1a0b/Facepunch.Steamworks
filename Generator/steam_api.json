{
  "interfaces": [
    {
      "classname": "ISteamClient",
      "methods": [
        {
          "returntype": "HSteamPipe",
          "params": [],
          "methodname": "CreateSteamPipe",
          "flat_name": "SteamAPI_ISteamClient_CreateSteamPipe"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            }
          ],
          "methodname": "BReleaseSteamPipe",
          "flat_name": "SteamAPI_ISteamClient_BReleaseSteamPipe"
        },
        {
          "returntype": "HSteamUser",
          "params": [
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            }
          ],
          "methodname": "ConnectToGlobalUser",
          "flat_name": "SteamAPI_ISteamClient_ConnectToGlobalUser"
        },
        {
          "returntype": "HSteamUser",
          "params": [
            {
              "paramtype": "HSteamPipe *",
              "paramname": "phSteamPipe"
            },
            {
              "paramtype": "EAccountType",
              "paramname": "eAccountType"
            }
          ],
          "methodname": "CreateLocalUser",
          "flat_name": "SteamAPI_ISteamClient_CreateLocalUser"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "HSteamUser",
              "paramname": "hUser"
            }
          ],
          "methodname": "ReleaseUser",
          "flat_name": "SteamAPI_ISteamClient_ReleaseUser"
        },
        {
          "returntype": "ISteamUser *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamUser",
          "flat_name": "SteamAPI_ISteamClient_GetISteamUser"
        },
        {
          "returntype": "ISteamGameServer *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamGameServer",
          "flat_name": "SteamAPI_ISteamClient_GetISteamGameServer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamIPAddress_t &",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            }
          ],
          "methodname": "SetLocalIPBinding",
          "flat_name": "SteamAPI_ISteamClient_SetLocalIPBinding"
        },
        {
          "returntype": "ISteamFriends *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamFriends",
          "flat_name": "SteamAPI_ISteamClient_GetISteamFriends"
        },
        {
          "returntype": "ISteamUtils *",
          "params": [
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamUtils",
          "flat_name": "SteamAPI_ISteamClient_GetISteamUtils"
        },
        {
          "returntype": "ISteamMatchmaking *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamMatchmaking",
          "flat_name": "SteamAPI_ISteamClient_GetISteamMatchmaking"
        },
        {
          "returntype": "ISteamMatchmakingServers *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamMatchmakingServers",
          "flat_name": "SteamAPI_ISteamClient_GetISteamMatchmakingServers"
        },
        {
          "returntype": "void *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamGenericInterface",
          "flat_name": "SteamAPI_ISteamClient_GetISteamGenericInterface"
        },
        {
          "returntype": "ISteamUserStats *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamUserStats",
          "flat_name": "SteamAPI_ISteamClient_GetISteamUserStats"
        },
        {
          "returntype": "ISteamGameServerStats *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamGameServerStats",
          "flat_name": "SteamAPI_ISteamClient_GetISteamGameServerStats"
        },
        {
          "returntype": "ISteamApps *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamApps",
          "flat_name": "SteamAPI_ISteamClient_GetISteamApps"
        },
        {
          "returntype": "ISteamNetworking *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamNetworking",
          "flat_name": "SteamAPI_ISteamClient_GetISteamNetworking"
        },
        {
          "returntype": "ISteamRemoteStorage *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamRemoteStorage",
          "flat_name": "SteamAPI_ISteamClient_GetISteamRemoteStorage"
        },
        {
          "returntype": "ISteamScreenshots *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamScreenshots",
          "flat_name": "SteamAPI_ISteamClient_GetISteamScreenshots"
        },
        {
          "returntype": "ISteamGameSearch *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamGameSearch",
          "flat_name": "SteamAPI_ISteamClient_GetISteamGameSearch"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetIPCCallCount",
          "flat_name": "SteamAPI_ISteamClient_GetIPCCallCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "SteamAPIWarningMessageHook_t",
              "paramname": "pFunction"
            }
          ],
          "methodname": "SetWarningMessageHook",
          "flat_name": "SteamAPI_ISteamClient_SetWarningMessageHook"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BShutdownIfAllPipesClosed",
          "flat_name": "SteamAPI_ISteamClient_BShutdownIfAllPipesClosed"
        },
        {
          "returntype": "ISteamHTTP *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamHTTP",
          "flat_name": "SteamAPI_ISteamClient_GetISteamHTTP"
        },
        {
          "returntype": "ISteamController *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamController",
          "flat_name": "SteamAPI_ISteamClient_GetISteamController"
        },
        {
          "returntype": "ISteamUGC *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamUGC",
          "flat_name": "SteamAPI_ISteamClient_GetISteamUGC"
        },
        {
          "returntype": "ISteamAppList *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamAppList",
          "flat_name": "SteamAPI_ISteamClient_GetISteamAppList"
        },
        {
          "returntype": "ISteamMusic *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamMusic",
          "flat_name": "SteamAPI_ISteamClient_GetISteamMusic"
        },
        {
          "returntype": "ISteamMusicRemote *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamMusicRemote",
          "flat_name": "SteamAPI_ISteamClient_GetISteamMusicRemote"
        },
        {
          "returntype": "ISteamHTMLSurface *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamHTMLSurface",
          "flat_name": "SteamAPI_ISteamClient_GetISteamHTMLSurface"
        },
        {
          "returntype": "ISteamInventory *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamInventory",
          "flat_name": "SteamAPI_ISteamClient_GetISteamInventory"
        },
        {
          "returntype": "ISteamVideo *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamVideo",
          "flat_name": "SteamAPI_ISteamClient_GetISteamVideo"
        },
        {
          "returntype": "ISteamParentalSettings *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamuser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamParentalSettings",
          "flat_name": "SteamAPI_ISteamClient_GetISteamParentalSettings"
        },
        {
          "returntype": "ISteamInput *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamInput",
          "flat_name": "SteamAPI_ISteamClient_GetISteamInput"
        },
        {
          "returntype": "ISteamParties *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamParties",
          "flat_name": "SteamAPI_ISteamClient_GetISteamParties"
        },
        {
          "returntype": "ISteamRemotePlay *",
          "params": [
            {
              "paramtype": "HSteamUser",
              "paramname": "hSteamUser"
            },
            {
              "paramtype": "HSteamPipe",
              "paramname": "hSteamPipe"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersion"
            }
          ],
          "methodname": "GetISteamRemotePlay",
          "flat_name": "SteamAPI_ISteamClient_GetISteamRemotePlay"
        }
      ]
    },
    {
      "classname": "ISteamUser",
      "version_string": "SteamUser020",
      "methods": [
        {
          "returntype": "HSteamUser",
          "params": [],
          "methodname": "GetHSteamUser",
          "flat_name": "SteamAPI_ISteamUser_GetHSteamUser"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BLoggedOn",
          "flat_name": "SteamAPI_ISteamUser_BLoggedOn"
        },
        {
          "returntype": "CSteamID",
          "params": [],
          "methodname": "GetSteamID",
          "flat_name": "SteamAPI_ISteamUser_GetSteamID"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pAuthBlob"
            },
            {
              "paramtype": "int",
              "paramname": "cbMaxAuthBlob"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDGameServer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unIPServer"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPortServer"
            },
            {
              "paramtype": "bool",
              "paramname": "bSecure"
            }
          ],
          "methodname": "InitiateGameConnection",
          "flat_name": "SteamAPI_ISteamUser_InitiateGameConnection"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIPServer"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPortServer"
            }
          ],
          "methodname": "TerminateGameConnection",
          "flat_name": "SteamAPI_ISteamUser_TerminateGameConnection"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CGameID",
              "paramname": "gameID"
            },
            {
              "paramtype": "int",
              "paramname": "eAppUsageEvent"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchExtraInfo"
            }
          ],
          "methodname": "TrackAppUsageEvent",
          "flat_name": "SteamAPI_ISteamUser_TrackAppUsageEvent"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pchBuffer"
            },
            {
              "paramtype": "int",
              "paramname": "cubBuffer"
            }
          ],
          "methodname": "GetUserDataFolder",
          "flat_name": "SteamAPI_ISteamUser_GetUserDataFolder"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "StartVoiceRecording",
          "flat_name": "SteamAPI_ISteamUser_StartVoiceRecording"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "StopVoiceRecording",
          "flat_name": "SteamAPI_ISteamUser_StopVoiceRecording"
        },
        {
          "returntype": "EVoiceResult",
          "params": [
            {
              "paramtype": "uint32 *",
              "paramname": "pcbCompressed"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcbUncompressed_Deprecated"
            },
            {
              "paramtype": "uint32",
              "paramname": "nUncompressedVoiceDesiredSampleRate_Deprecated"
            }
          ],
          "methodname": "GetAvailableVoice",
          "flat_name": "SteamAPI_ISteamUser_GetAvailableVoice"
        },
        {
          "returntype": "EVoiceResult",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bWantCompressed"
            },
            {
              "paramtype": "void *",
              "paramname": "pDestBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbDestBufferSize"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "nBytesWritten"
            },
            {
              "paramtype": "bool",
              "paramname": "bWantUncompressed_Deprecated"
            },
            {
              "paramtype": "void *",
              "paramname": "pUncompressedDestBuffer_Deprecated"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbUncompressedDestBufferSize_Deprecated"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "nUncompressBytesWritten_Deprecated"
            },
            {
              "paramtype": "uint32",
              "paramname": "nUncompressedVoiceDesiredSampleRate_Deprecated"
            }
          ],
          "methodname": "GetVoice",
          "flat_name": "SteamAPI_ISteamUser_GetVoice"
        },
        {
          "returntype": "EVoiceResult",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pCompressed"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbCompressed"
            },
            {
              "paramtype": "void *",
              "paramname": "pDestBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbDestBufferSize"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "nBytesWritten"
            },
            {
              "paramtype": "uint32",
              "paramname": "nDesiredSampleRate"
            }
          ],
          "methodname": "DecompressVoice",
          "flat_name": "SteamAPI_ISteamUser_DecompressVoice"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetVoiceOptimalSampleRate",
          "flat_name": "SteamAPI_ISteamUser_GetVoiceOptimalSampleRate"
        },
        {
          "returntype": "HAuthTicket",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbMaxTicket"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcbTicket"
            }
          ],
          "methodname": "GetAuthSessionTicket",
          "flat_name": "SteamAPI_ISteamUser_GetAuthSessionTicket"
        },
        {
          "returntype": "EBeginAuthSessionResult",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pAuthTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbAuthTicket"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "BeginAuthSession",
          "flat_name": "SteamAPI_ISteamUser_BeginAuthSession"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "EndAuthSession",
          "flat_name": "SteamAPI_ISteamUser_EndAuthSession"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HAuthTicket",
              "paramname": "hAuthTicket"
            }
          ],
          "methodname": "CancelAuthTicket",
          "flat_name": "SteamAPI_ISteamUser_CancelAuthTicket"
        },
        {
          "returntype": "EUserHasLicenseForAppResult",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            }
          ],
          "methodname": "UserHasLicenseForApp",
          "flat_name": "SteamAPI_ISteamUser_UserHasLicenseForApp"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsBehindNAT",
          "flat_name": "SteamAPI_ISteamUser_BIsBehindNAT"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDGameServer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unIPServer"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPortServer"
            }
          ],
          "methodname": "AdvertiseGame",
          "flat_name": "SteamAPI_ISteamUser_AdvertiseGame"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pDataToInclude"
            },
            {
              "paramtype": "int",
              "paramname": "cbDataToInclude"
            }
          ],
          "callresult": "EncryptedAppTicketResponse_t",
          "methodname": "RequestEncryptedAppTicket",
          "flat_name": "SteamAPI_ISteamUser_RequestEncryptedAppTicket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbMaxTicket"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcbTicket"
            }
          ],
          "methodname": "GetEncryptedAppTicket",
          "flat_name": "SteamAPI_ISteamUser_GetEncryptedAppTicket"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nSeries"
            },
            {
              "paramtype": "bool",
              "paramname": "bFoil"
            }
          ],
          "methodname": "GetGameBadgeLevel",
          "flat_name": "SteamAPI_ISteamUser_GetGameBadgeLevel"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetPlayerSteamLevel",
          "flat_name": "SteamAPI_ISteamUser_GetPlayerSteamLevel"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchRedirectURL"
            }
          ],
          "callresult": "StoreAuthURLResponse_t",
          "methodname": "RequestStoreAuthURL",
          "flat_name": "SteamAPI_ISteamUser_RequestStoreAuthURL"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsPhoneVerified",
          "flat_name": "SteamAPI_ISteamUser_BIsPhoneVerified"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsTwoFactorEnabled",
          "flat_name": "SteamAPI_ISteamUser_BIsTwoFactorEnabled"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsPhoneIdentifying",
          "flat_name": "SteamAPI_ISteamUser_BIsPhoneIdentifying"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsPhoneRequiringVerification",
          "flat_name": "SteamAPI_ISteamUser_BIsPhoneRequiringVerification"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "MarketEligibilityResponse_t",
          "methodname": "GetMarketEligibility",
          "flat_name": "SteamAPI_ISteamUser_GetMarketEligibility"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "DurationControl_t",
          "methodname": "GetDurationControl",
          "flat_name": "SteamAPI_ISteamUser_GetDurationControl"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamUser_v020",
          "kind": "user",
          "name": "SteamUser"
        }
      ]
    },
    {
      "classname": "ISteamFriends",
      "version_string": "SteamFriends017",
      "methods": [
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetPersonaName",
          "flat_name": "SteamAPI_ISteamFriends_GetPersonaName"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchPersonaName"
            }
          ],
          "callresult": "SetPersonaNameResponse_t",
          "methodname": "SetPersonaName",
          "flat_name": "SteamAPI_ISteamFriends_SetPersonaName"
        },
        {
          "returntype": "EPersonaState",
          "params": [],
          "methodname": "GetPersonaState",
          "flat_name": "SteamAPI_ISteamFriends_GetPersonaState"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iFriendFlags"
            }
          ],
          "methodname": "GetFriendCount",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendCount"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iFriend"
            },
            {
              "paramtype": "int",
              "paramname": "iFriendFlags"
            }
          ],
          "methodname": "GetFriendByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendByIndex"
        },
        {
          "returntype": "EFriendRelationship",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendRelationship",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendRelationship"
        },
        {
          "returntype": "EPersonaState",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendPersonaState",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendPersonaState"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendPersonaName",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendPersonaName"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "FriendGameInfo_t *",
              "out_struct": "",
              "paramname": "pFriendGameInfo"
            }
          ],
          "methodname": "GetFriendGamePlayed",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendGamePlayed"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "int",
              "paramname": "iPersonaName"
            }
          ],
          "methodname": "GetFriendPersonaNameHistory",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendPersonaNameHistory"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendSteamLevel",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendSteamLevel"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDPlayer"
            }
          ],
          "methodname": "GetPlayerNickname",
          "flat_name": "SteamAPI_ISteamFriends_GetPlayerNickname"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetFriendsGroupCount",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendsGroupCount"
        },
        {
          "returntype": "FriendsGroupID_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iFG"
            }
          ],
          "methodname": "GetFriendsGroupIDByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "FriendsGroupID_t",
              "paramname": "friendsGroupID"
            }
          ],
          "methodname": "GetFriendsGroupName",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendsGroupName"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "FriendsGroupID_t",
              "paramname": "friendsGroupID"
            }
          ],
          "methodname": "GetFriendsGroupMembersCount",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendsGroupMembersCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "FriendsGroupID_t",
              "paramname": "friendsGroupID"
            },
            {
              "paramtype": "CSteamID *",
              "out_array_call": "nMembersCount,GetFriendsGroupMembersCount,friendsGroupID",
              "paramname": "pOutSteamIDMembers"
            },
            {
              "paramtype": "int",
              "paramname": "nMembersCount"
            }
          ],
          "methodname": "GetFriendsGroupMembersList",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendsGroupMembersList"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "int",
              "paramname": "iFriendFlags"
            }
          ],
          "methodname": "HasFriend",
          "flat_name": "SteamAPI_ISteamFriends_HasFriend"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetClanCount",
          "flat_name": "SteamAPI_ISteamFriends_GetClanCount"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iClan"
            }
          ],
          "methodname": "GetClanByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetClanByIndex"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "GetClanName",
          "flat_name": "SteamAPI_ISteamFriends_GetClanName"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "GetClanTag",
          "flat_name": "SteamAPI_ISteamFriends_GetClanTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            },
            {
              "paramtype": "int *",
              "paramname": "pnOnline"
            },
            {
              "paramtype": "int *",
              "paramname": "pnInGame"
            },
            {
              "paramtype": "int *",
              "paramname": "pnChatting"
            }
          ],
          "methodname": "GetClanActivityCounts",
          "flat_name": "SteamAPI_ISteamFriends_GetClanActivityCounts"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID *",
              "array_count": "cClansToRequest",
              "paramname": "psteamIDClans"
            },
            {
              "paramtype": "int",
              "paramname": "cClansToRequest"
            }
          ],
          "callresult": "DownloadClanActivityCountsResult_t",
          "methodname": "DownloadClanActivityCounts",
          "flat_name": "SteamAPI_ISteamFriends_DownloadClanActivityCounts"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDSource"
            }
          ],
          "methodname": "GetFriendCountFromSource",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendCountFromSource"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDSource"
            },
            {
              "paramtype": "int",
              "paramname": "iFriend"
            }
          ],
          "methodname": "GetFriendFromSourceByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendFromSourceByIndex"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDSource"
            }
          ],
          "methodname": "IsUserInSource",
          "flat_name": "SteamAPI_ISteamFriends_IsUserInSource"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "bool",
              "paramname": "bSpeaking"
            }
          ],
          "methodname": "SetInGameVoiceSpeaking",
          "flat_name": "SteamAPI_ISteamFriends_SetInGameVoiceSpeaking"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchDialog"
            }
          ],
          "methodname": "ActivateGameOverlay",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlay"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchDialog"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "ActivateGameOverlayToUser",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlayToUser"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchURL"
            },
            {
              "paramtype": "EActivateGameOverlayToWebPageMode",
              "paramname": "eMode"
            }
          ],
          "methodname": "ActivateGameOverlayToWebPage",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlayToWebPage"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "EOverlayToStoreFlag",
              "paramname": "eFlag"
            }
          ],
          "methodname": "ActivateGameOverlayToStore",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlayToStore"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUserPlayedWith"
            }
          ],
          "methodname": "SetPlayedWith",
          "flat_name": "SteamAPI_ISteamFriends_SetPlayedWith"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "ActivateGameOverlayInviteDialog",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetSmallFriendAvatar",
          "flat_name": "SteamAPI_ISteamFriends_GetSmallFriendAvatar"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetMediumFriendAvatar",
          "flat_name": "SteamAPI_ISteamFriends_GetMediumFriendAvatar"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetLargeFriendAvatar",
          "flat_name": "SteamAPI_ISteamFriends_GetLargeFriendAvatar"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "bool",
              "paramname": "bRequireNameOnly"
            }
          ],
          "methodname": "RequestUserInformation",
          "flat_name": "SteamAPI_ISteamFriends_RequestUserInformation"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "callresult": "ClanOfficerListResponse_t",
          "methodname": "RequestClanOfficerList",
          "flat_name": "SteamAPI_ISteamFriends_RequestClanOfficerList"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "GetClanOwner",
          "flat_name": "SteamAPI_ISteamFriends_GetClanOwner"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "GetClanOfficerCount",
          "flat_name": "SteamAPI_ISteamFriends_GetClanOfficerCount"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            },
            {
              "paramtype": "int",
              "paramname": "iOfficer"
            }
          ],
          "methodname": "GetClanOfficerByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetClanOfficerByIndex"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetUserRestrictions",
          "flat_name": "SteamAPI_ISteamFriends_GetUserRestrictions"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "SetRichPresence",
          "flat_name": "SteamAPI_ISteamFriends_SetRichPresence"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "ClearRichPresence",
          "flat_name": "SteamAPI_ISteamFriends_ClearRichPresence"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "GetFriendRichPresence",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendRichPresence"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendRichPresenceKeyCount",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "int",
              "paramname": "iKey"
            }
          ],
          "methodname": "GetFriendRichPresenceKeyByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "RequestFriendRichPresence",
          "flat_name": "SteamAPI_ISteamFriends_RequestFriendRichPresence"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchConnectString"
            }
          ],
          "methodname": "InviteUserToGame",
          "flat_name": "SteamAPI_ISteamFriends_InviteUserToGame"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetCoplayFriendCount",
          "flat_name": "SteamAPI_ISteamFriends_GetCoplayFriendCount"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iCoplayFriend"
            }
          ],
          "methodname": "GetCoplayFriend",
          "flat_name": "SteamAPI_ISteamFriends_GetCoplayFriend"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendCoplayTime",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendCoplayTime"
        },
        {
          "returntype": "AppId_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "GetFriendCoplayGame",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendCoplayGame"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "callresult": "JoinClanChatRoomCompletionResult_t",
          "methodname": "JoinClanChatRoom",
          "flat_name": "SteamAPI_ISteamFriends_JoinClanChatRoom"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "LeaveClanChatRoom",
          "flat_name": "SteamAPI_ISteamFriends_LeaveClanChatRoom"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "GetClanChatMemberCount",
          "flat_name": "SteamAPI_ISteamFriends_GetClanChatMemberCount"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            },
            {
              "paramtype": "int",
              "paramname": "iUser"
            }
          ],
          "methodname": "GetChatMemberByIndex",
          "flat_name": "SteamAPI_ISteamFriends_GetChatMemberByIndex"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchText"
            }
          ],
          "methodname": "SendClanChatMessage",
          "flat_name": "SteamAPI_ISteamFriends_SendClanChatMessage"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            },
            {
              "paramtype": "int",
              "paramname": "iMessage"
            },
            {
              "paramtype": "void *",
              "paramname": "prgchText"
            },
            {
              "paramtype": "int",
              "paramname": "cchTextMax"
            },
            {
              "paramtype": "EChatEntryType *",
              "paramname": "peChatEntryType"
            },
            {
              "paramtype": "CSteamID *",
              "out_struct": "",
              "paramname": "psteamidChatter"
            }
          ],
          "methodname": "GetClanChatMessage",
          "flat_name": "SteamAPI_ISteamFriends_GetClanChatMessage"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "methodname": "IsClanChatAdmin",
          "flat_name": "SteamAPI_ISteamFriends_IsClanChatAdmin"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            }
          ],
          "methodname": "IsClanChatWindowOpenInSteam",
          "flat_name": "SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            }
          ],
          "methodname": "OpenClanChatWindowInSteam",
          "flat_name": "SteamAPI_ISteamFriends_OpenClanChatWindowInSteam"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClanChat"
            }
          ],
          "methodname": "CloseClanChatWindowInSteam",
          "flat_name": "SteamAPI_ISteamFriends_CloseClanChatWindowInSteam"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bInterceptEnabled"
            }
          ],
          "methodname": "SetListenForFriendsMessages",
          "flat_name": "SteamAPI_ISteamFriends_SetListenForFriendsMessages"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchMsgToSend"
            }
          ],
          "methodname": "ReplyToFriendMessage",
          "flat_name": "SteamAPI_ISteamFriends_ReplyToFriendMessage"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            },
            {
              "paramtype": "int",
              "paramname": "iMessageID"
            },
            {
              "paramtype": "void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int",
              "paramname": "cubData"
            },
            {
              "paramtype": "EChatEntryType *",
              "paramname": "peChatEntryType"
            }
          ],
          "methodname": "GetFriendMessage",
          "flat_name": "SteamAPI_ISteamFriends_GetFriendMessage"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "callresult": "FriendsGetFollowerCount_t",
          "methodname": "GetFollowerCount",
          "flat_name": "SteamAPI_ISteamFriends_GetFollowerCount"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "callresult": "FriendsIsFollowing_t",
          "methodname": "IsFollowing",
          "flat_name": "SteamAPI_ISteamFriends_IsFollowing"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            }
          ],
          "callresult": "FriendsEnumerateFollowingList_t",
          "methodname": "EnumerateFollowingList",
          "flat_name": "SteamAPI_ISteamFriends_EnumerateFollowingList"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "IsClanPublic",
          "flat_name": "SteamAPI_ISteamFriends_IsClanPublic"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "methodname": "IsClanOfficialGameGroup",
          "flat_name": "SteamAPI_ISteamFriends_IsClanOfficialGameGroup"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetNumChatsWithUnreadPriorityMessages",
          "flat_name": "SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "ActivateGameOverlayRemotePlayTogetherInviteDialog",
          "flat_name": "SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamFriends_v017",
          "kind": "user",
          "name": "SteamFriends"
        }
      ]
    },
    {
      "classname": "ISteamUtils",
      "version_string": "SteamUtils009",
      "methods": [
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetSecondsSinceAppActive",
          "flat_name": "SteamAPI_ISteamUtils_GetSecondsSinceAppActive"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetSecondsSinceComputerActive",
          "flat_name": "SteamAPI_ISteamUtils_GetSecondsSinceComputerActive"
        },
        {
          "returntype": "EUniverse",
          "params": [],
          "methodname": "GetConnectedUniverse",
          "flat_name": "SteamAPI_ISteamUtils_GetConnectedUniverse"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetServerRealTime",
          "flat_name": "SteamAPI_ISteamUtils_GetServerRealTime"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetIPCountry",
          "flat_name": "SteamAPI_ISteamUtils_GetIPCountry"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iImage"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pnWidth"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pnHeight"
            }
          ],
          "methodname": "GetImageSize",
          "flat_name": "SteamAPI_ISteamUtils_GetImageSize"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iImage"
            },
            {
              "paramtype": "uint8 *",
              "paramname": "pubDest"
            },
            {
              "paramtype": "int",
              "paramname": "nDestBufferSize"
            }
          ],
          "methodname": "GetImageRGBA",
          "flat_name": "SteamAPI_ISteamUtils_GetImageRGBA"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint32 *",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "usPort"
            }
          ],
          "methodname": "GetCSERIPPort",
          "flat_name": "SteamAPI_ISteamUtils_GetCSERIPPort"
        },
        {
          "returntype": "uint8",
          "params": [],
          "methodname": "GetCurrentBatteryPower",
          "flat_name": "SteamAPI_ISteamUtils_GetCurrentBatteryPower"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetAppID",
          "flat_name": "SteamAPI_ISteamUtils_GetAppID"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ENotificationPosition",
              "paramname": "eNotificationPosition"
            }
          ],
          "methodname": "SetOverlayNotificationPosition",
          "flat_name": "SteamAPI_ISteamUtils_SetOverlayNotificationPosition"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamAPICall_t",
              "paramname": "hSteamAPICall"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbFailed"
            }
          ],
          "methodname": "IsAPICallCompleted",
          "flat_name": "SteamAPI_ISteamUtils_IsAPICallCompleted"
        },
        {
          "returntype": "ESteamAPICallFailure",
          "params": [
            {
              "paramtype": "SteamAPICall_t",
              "paramname": "hSteamAPICall"
            }
          ],
          "methodname": "GetAPICallFailureReason",
          "flat_name": "SteamAPI_ISteamUtils_GetAPICallFailureReason"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamAPICall_t",
              "paramname": "hSteamAPICall"
            },
            {
              "paramtype": "void *",
              "paramname": "pCallback"
            },
            {
              "paramtype": "int",
              "paramname": "cubCallback"
            },
            {
              "paramtype": "int",
              "paramname": "iCallbackExpected"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbFailed"
            }
          ],
          "methodname": "GetAPICallResult",
          "flat_name": "SteamAPI_ISteamUtils_GetAPICallResult"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetIPCCallCount",
          "flat_name": "SteamAPI_ISteamUtils_GetIPCCallCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "SteamAPIWarningMessageHook_t",
              "paramname": "pFunction"
            }
          ],
          "methodname": "SetWarningMessageHook",
          "flat_name": "SteamAPI_ISteamUtils_SetWarningMessageHook"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsOverlayEnabled",
          "flat_name": "SteamAPI_ISteamUtils_IsOverlayEnabled"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BOverlayNeedsPresent",
          "flat_name": "SteamAPI_ISteamUtils_BOverlayNeedsPresent"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "szFileName"
            }
          ],
          "callresult": "CheckFileSignature_t",
          "methodname": "CheckFileSignature",
          "flat_name": "SteamAPI_ISteamUtils_CheckFileSignature"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "EGamepadTextInputMode",
              "paramname": "eInputMode"
            },
            {
              "paramtype": "EGamepadTextInputLineMode",
              "paramname": "eLineInputMode"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchDescription"
            },
            {
              "paramtype": "uint32",
              "paramname": "unCharMax"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchExistingText"
            }
          ],
          "methodname": "ShowGamepadTextInput",
          "flat_name": "SteamAPI_ISteamUtils_ShowGamepadTextInput"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetEnteredGamepadTextLength",
          "flat_name": "SteamAPI_ISteamUtils_GetEnteredGamepadTextLength"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pchText"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchText"
            }
          ],
          "methodname": "GetEnteredGamepadTextInput",
          "flat_name": "SteamAPI_ISteamUtils_GetEnteredGamepadTextInput"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetSteamUILanguage",
          "flat_name": "SteamAPI_ISteamUtils_GetSteamUILanguage"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsSteamRunningInVR",
          "flat_name": "SteamAPI_ISteamUtils_IsSteamRunningInVR"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nHorizontalInset"
            },
            {
              "paramtype": "int",
              "paramname": "nVerticalInset"
            }
          ],
          "methodname": "SetOverlayNotificationInset",
          "flat_name": "SteamAPI_ISteamUtils_SetOverlayNotificationInset"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsSteamInBigPictureMode",
          "flat_name": "SteamAPI_ISteamUtils_IsSteamInBigPictureMode"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "StartVRDashboard",
          "flat_name": "SteamAPI_ISteamUtils_StartVRDashboard"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsVRHeadsetStreamingEnabled",
          "flat_name": "SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bEnabled"
            }
          ],
          "methodname": "SetVRHeadsetStreamingEnabled",
          "flat_name": "SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsSteamChinaLauncher",
          "flat_name": "SteamAPI_ISteamUtils_IsSteamChinaLauncher"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "InitFilterText",
          "flat_name": "SteamAPI_ISteamUtils_InitFilterText"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pchOutFilteredText"
            },
            {
              "paramtype": "uint32",
              "paramname": "nByteSizeOutFilteredText"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchInputMessage"
            },
            {
              "paramtype": "bool",
              "paramname": "bLegalOnly"
            }
          ],
          "methodname": "FilterText",
          "flat_name": "SteamAPI_ISteamUtils_FilterText"
        },
        {
          "returntype": "ESteamIPv6ConnectivityState",
          "params": [
            {
              "paramtype": "ESteamIPv6ConnectivityProtocol",
              "paramname": "eProtocol"
            }
          ],
          "methodname": "GetIPv6ConnectivityState",
          "flat_name": "SteamAPI_ISteamUtils_GetIPv6ConnectivityState"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamUtils_v009",
          "kind": "user",
          "name": "SteamUtils"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerUtils_v009",
          "kind": "gameserver",
          "name": "SteamGameServerUtils"
        }
      ]
    },
    {
      "classname": "ISteamMatchmaking",
      "version_string": "SteamMatchMaking009",
      "methods": [
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetFavoriteGameCount",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetFavoriteGameCount"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iGame"
            },
            {
              "paramtype": "AppId_t *",
              "paramname": "pnAppID"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pnIP"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "pnConnPort"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "pnQueryPort"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punFlags"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pRTime32LastPlayedOnServer"
            }
          ],
          "methodname": "GetFavoriteGame",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetFavoriteGame"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "uint32",
              "paramname": "nIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "nConnPort"
            },
            {
              "paramtype": "uint16",
              "paramname": "nQueryPort"
            },
            {
              "paramtype": "uint32",
              "paramname": "unFlags"
            },
            {
              "paramtype": "uint32",
              "paramname": "rTime32LastPlayedOnServer"
            }
          ],
          "methodname": "AddFavoriteGame",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddFavoriteGame"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "uint32",
              "paramname": "nIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "nConnPort"
            },
            {
              "paramtype": "uint16",
              "paramname": "nQueryPort"
            },
            {
              "paramtype": "uint32",
              "paramname": "unFlags"
            }
          ],
          "methodname": "RemoveFavoriteGame",
          "flat_name": "SteamAPI_ISteamMatchmaking_RemoveFavoriteGame"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "LobbyMatchList_t",
          "methodname": "RequestLobbyList",
          "flat_name": "SteamAPI_ISteamMatchmaking_RequestLobbyList"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKeyToMatch"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValueToMatch"
            },
            {
              "paramtype": "ELobbyComparison",
              "paramname": "eComparisonType"
            }
          ],
          "methodname": "AddRequestLobbyListStringFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListStringFilter"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKeyToMatch"
            },
            {
              "paramtype": "int",
              "paramname": "nValueToMatch"
            },
            {
              "paramtype": "ELobbyComparison",
              "paramname": "eComparisonType"
            }
          ],
          "methodname": "AddRequestLobbyListNumericalFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNumericalFilter"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKeyToMatch"
            },
            {
              "paramtype": "int",
              "paramname": "nValueToBeCloseTo"
            }
          ],
          "methodname": "AddRequestLobbyListNearValueFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nSlotsAvailable"
            }
          ],
          "methodname": "AddRequestLobbyListFilterSlotsAvailable",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ELobbyDistanceFilter",
              "paramname": "eLobbyDistanceFilter"
            }
          ],
          "methodname": "AddRequestLobbyListDistanceFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListDistanceFilter"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "cMaxResults"
            }
          ],
          "methodname": "AddRequestLobbyListResultCountFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "AddRequestLobbyListCompatibleMembersFilter",
          "flat_name": "SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iLobby"
            }
          ],
          "methodname": "GetLobbyByIndex",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyByIndex"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "ELobbyType",
              "paramname": "eLobbyType"
            },
            {
              "paramtype": "int",
              "paramname": "cMaxMembers"
            }
          ],
          "callresult": "LobbyCreated_t",
          "methodname": "CreateLobby",
          "flat_name": "SteamAPI_ISteamMatchmaking_CreateLobby"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "callresult": "LobbyEnter_t",
          "methodname": "JoinLobby",
          "flat_name": "SteamAPI_ISteamMatchmaking_JoinLobby"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "LeaveLobby",
          "flat_name": "SteamAPI_ISteamMatchmaking_LeaveLobby"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDInvitee"
            }
          ],
          "methodname": "InviteUserToLobby",
          "flat_name": "SteamAPI_ISteamMatchmaking_InviteUserToLobby"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "GetNumLobbyMembers",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetNumLobbyMembers"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "int",
              "paramname": "iMember"
            }
          ],
          "methodname": "GetLobbyMemberByIndex",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "GetLobbyData",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyData"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "SetLobbyData",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyData"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "GetLobbyDataCount",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyDataCount"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "int",
              "paramname": "iLobbyData"
            },
            {
              "paramtype": "char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "int",
              "paramname": "cchKeyBufferSize"
            },
            {
              "paramtype": "char *",
              "paramname": "pchValue"
            },
            {
              "paramtype": "int",
              "paramname": "cchValueBufferSize"
            }
          ],
          "methodname": "GetLobbyDataByIndex",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "DeleteLobbyData",
          "flat_name": "SteamAPI_ISteamMatchmaking_DeleteLobbyData"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "GetLobbyMemberData",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyMemberData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "SetLobbyMemberData",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyMemberData"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "const void *",
              "paramname": "pvMsgBody"
            },
            {
              "paramtype": "int",
              "paramname": "cubMsgBody"
            }
          ],
          "methodname": "SendLobbyChatMsg",
          "flat_name": "SteamAPI_ISteamMatchmaking_SendLobbyChatMsg"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "int",
              "paramname": "iChatID"
            },
            {
              "paramtype": "CSteamID *",
              "out_struct": "",
              "paramname": "pSteamIDUser"
            },
            {
              "paramtype": "void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int",
              "paramname": "cubData"
            },
            {
              "paramtype": "EChatEntryType *",
              "paramname": "peChatEntryType"
            }
          ],
          "methodname": "GetLobbyChatEntry",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyChatEntry"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "RequestLobbyData",
          "flat_name": "SteamAPI_ISteamMatchmaking_RequestLobbyData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "uint32",
              "paramname": "unGameServerIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "unGameServerPort"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDGameServer"
            }
          ],
          "methodname": "SetLobbyGameServer",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyGameServer"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punGameServerIP"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "punGameServerPort"
            },
            {
              "paramtype": "CSteamID *",
              "out_struct": "",
              "paramname": "psteamIDGameServer"
            }
          ],
          "methodname": "GetLobbyGameServer",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyGameServer"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "int",
              "paramname": "cMaxMembers"
            }
          ],
          "methodname": "SetLobbyMemberLimit",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "GetLobbyMemberLimit",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "ELobbyType",
              "paramname": "eLobbyType"
            }
          ],
          "methodname": "SetLobbyType",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyType"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "bool",
              "paramname": "bLobbyJoinable"
            }
          ],
          "methodname": "SetLobbyJoinable",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyJoinable"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            }
          ],
          "methodname": "GetLobbyOwner",
          "flat_name": "SteamAPI_ISteamMatchmaking_GetLobbyOwner"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDNewOwner"
            }
          ],
          "methodname": "SetLobbyOwner",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLobbyOwner"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobbyDependent"
            }
          ],
          "methodname": "SetLinkedLobby",
          "flat_name": "SteamAPI_ISteamMatchmaking_SetLinkedLobby"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamMatchmaking_v009",
          "kind": "user",
          "name": "SteamMatchmaking"
        }
      ]
    },
    {
      "classname": "ISteamMatchmakingServerListResponse",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            },
            {
              "paramtype": "int",
              "paramname": "iServer"
            }
          ],
          "methodname": "ServerResponded",
          "flat_name": "SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            },
            {
              "paramtype": "int",
              "paramname": "iServer"
            }
          ],
          "methodname": "ServerFailedToRespond",
          "flat_name": "SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            },
            {
              "paramtype": "EMatchMakingServerResponse",
              "paramname": "response"
            }
          ],
          "methodname": "RefreshComplete",
          "flat_name": "SteamAPI_ISteamMatchmakingServerListResponse_RefreshComplete"
        }
      ]
    },
    {
      "classname": "ISteamMatchmakingPingResponse",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "gameserveritem_t &",
              "paramname": "server"
            }
          ],
          "methodname": "ServerResponded",
          "flat_name": "SteamAPI_ISteamMatchmakingPingResponse_ServerResponded"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "ServerFailedToRespond",
          "flat_name": "SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond"
        }
      ]
    },
    {
      "classname": "ISteamMatchmakingPlayersResponse",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int",
              "paramname": "nScore"
            },
            {
              "paramtype": "float",
              "paramname": "flTimePlayed"
            }
          ],
          "methodname": "AddPlayerToList",
          "flat_name": "SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "PlayersFailedToRespond",
          "flat_name": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "PlayersRefreshComplete",
          "flat_name": "SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete"
        }
      ]
    },
    {
      "classname": "ISteamMatchmakingRulesResponse",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchRule"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "RulesResponded",
          "flat_name": "SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RulesFailedToRespond",
          "flat_name": "SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RulesRefreshComplete",
          "flat_name": "SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete"
        }
      ]
    },
    {
      "classname": "ISteamMatchmakingServers",
      "version_string": "SteamMatchMakingServers002",
      "methods": [
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "MatchMakingKeyValuePair_t **",
              "array_count": "nFilters",
              "paramname": "ppchFilters"
            },
            {
              "paramtype": "uint32",
              "paramname": "nFilters"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestInternetServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestInternetServerList"
        },
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestLANServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestLANServerList"
        },
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "MatchMakingKeyValuePair_t **",
              "array_count": "nFilters",
              "paramname": "ppchFilters"
            },
            {
              "paramtype": "uint32",
              "paramname": "nFilters"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestFriendsServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestFriendsServerList"
        },
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "MatchMakingKeyValuePair_t **",
              "array_count": "nFilters",
              "paramname": "ppchFilters"
            },
            {
              "paramtype": "uint32",
              "paramname": "nFilters"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestFavoritesServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestFavoritesServerList"
        },
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "MatchMakingKeyValuePair_t **",
              "array_count": "nFilters",
              "paramname": "ppchFilters"
            },
            {
              "paramtype": "uint32",
              "paramname": "nFilters"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestHistoryServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestHistoryServerList"
        },
        {
          "returntype": "HServerListRequest",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "iApp"
            },
            {
              "paramtype": "MatchMakingKeyValuePair_t **",
              "array_count": "nFilters",
              "paramname": "ppchFilters"
            },
            {
              "paramtype": "uint32",
              "paramname": "nFilters"
            },
            {
              "paramtype": "ISteamMatchmakingServerListResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "RequestSpectatorServerList",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RequestSpectatorServerList"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hServerListRequest"
            }
          ],
          "methodname": "ReleaseRequest",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_ReleaseRequest"
        },
        {
          "returntype": "gameserveritem_t *",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            },
            {
              "paramtype": "int",
              "paramname": "iServer"
            }
          ],
          "methodname": "GetServerDetails",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_GetServerDetails"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            }
          ],
          "methodname": "CancelQuery",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_CancelQuery"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            }
          ],
          "methodname": "RefreshQuery",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RefreshQuery"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            }
          ],
          "methodname": "IsRefreshing",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_IsRefreshing"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            }
          ],
          "methodname": "GetServerCount",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_GetServerCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerListRequest",
              "paramname": "hRequest"
            },
            {
              "paramtype": "int",
              "paramname": "iServer"
            }
          ],
          "methodname": "RefreshServer",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_RefreshServer"
        },
        {
          "returntype": "HServerQuery",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            },
            {
              "paramtype": "ISteamMatchmakingPingResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "PingServer",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_PingServer"
        },
        {
          "returntype": "HServerQuery",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            },
            {
              "paramtype": "ISteamMatchmakingPlayersResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "PlayerDetails",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_PlayerDetails"
        },
        {
          "returntype": "HServerQuery",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            },
            {
              "paramtype": "ISteamMatchmakingRulesResponse *",
              "paramname": "pRequestServersResponse"
            }
          ],
          "methodname": "ServerRules",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_ServerRules"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HServerQuery",
              "paramname": "hServerQuery"
            }
          ],
          "methodname": "CancelServerQuery",
          "flat_name": "SteamAPI_ISteamMatchmakingServers_CancelServerQuery"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamMatchmakingServers_v002",
          "kind": "user",
          "name": "SteamMatchmakingServers"
        }
      ]
    },
    {
      "classname": "ISteamGameSearch",
      "version_string": "SteamMatchGameSearch001",
      "methods": [
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKeyToFind"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValuesToFind"
            }
          ],
          "methodname": "AddGameSearchParams",
          "flat_name": "SteamAPI_ISteamGameSearch_AddGameSearchParams"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDLobby"
            },
            {
              "paramtype": "int",
              "paramname": "nPlayerMin"
            },
            {
              "paramtype": "int",
              "paramname": "nPlayerMax"
            }
          ],
          "methodname": "SearchForGameWithLobby",
          "flat_name": "SteamAPI_ISteamGameSearch_SearchForGameWithLobby"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nPlayerMin"
            },
            {
              "paramtype": "int",
              "paramname": "nPlayerMax"
            }
          ],
          "methodname": "SearchForGameSolo",
          "flat_name": "SteamAPI_ISteamGameSearch_SearchForGameSolo"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [],
          "methodname": "AcceptGame",
          "flat_name": "SteamAPI_ISteamGameSearch_AcceptGame"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [],
          "methodname": "DeclineGame",
          "flat_name": "SteamAPI_ISteamGameSearch_DeclineGame"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDHost"
            },
            {
              "paramtype": "char *",
              "paramname": "pchConnectionDetails"
            },
            {
              "paramtype": "int",
              "paramname": "cubConnectionDetails"
            }
          ],
          "methodname": "RetrieveConnectionDetails",
          "flat_name": "SteamAPI_ISteamGameSearch_RetrieveConnectionDetails"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [],
          "methodname": "EndGameSearch",
          "flat_name": "SteamAPI_ISteamGameSearch_EndGameSearch"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "SetGameHostParams",
          "flat_name": "SteamAPI_ISteamGameSearch_SetGameHostParams"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchConnectionDetails"
            },
            {
              "paramtype": "int",
              "paramname": "cubConnectionDetails"
            }
          ],
          "methodname": "SetConnectionDetails",
          "flat_name": "SteamAPI_ISteamGameSearch_SetConnectionDetails"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nPlayerMin"
            },
            {
              "paramtype": "int",
              "paramname": "nPlayerMax"
            },
            {
              "paramtype": "int",
              "paramname": "nMaxTeamSize"
            }
          ],
          "methodname": "RequestPlayersForGame",
          "flat_name": "SteamAPI_ISteamGameSearch_RequestPlayersForGame"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "uint64",
              "paramname": "ullUniqueGameID"
            }
          ],
          "methodname": "HostConfirmGameStart",
          "flat_name": "SteamAPI_ISteamGameSearch_HostConfirmGameStart"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [],
          "methodname": "CancelRequestPlayersForGame",
          "flat_name": "SteamAPI_ISteamGameSearch_CancelRequestPlayersForGame"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "uint64",
              "paramname": "ullUniqueGameID"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDPlayer"
            },
            {
              "paramtype": "EPlayerResult_t",
              "paramname": "EPlayerResult"
            }
          ],
          "methodname": "SubmitPlayerResult",
          "flat_name": "SteamAPI_ISteamGameSearch_SubmitPlayerResult"
        },
        {
          "returntype": "EGameSearchErrorCode_t",
          "params": [
            {
              "paramtype": "uint64",
              "paramname": "ullUniqueGameID"
            }
          ],
          "methodname": "EndGame",
          "flat_name": "SteamAPI_ISteamGameSearch_EndGame"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamGameSearch_v001",
          "kind": "user",
          "name": "SteamGameSearch"
        }
      ]
    },
    {
      "classname": "ISteamParties",
      "version_string": "SteamParties002",
      "methods": [
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetNumActiveBeacons",
          "flat_name": "SteamAPI_ISteamParties_GetNumActiveBeacons"
        },
        {
          "returntype": "PartyBeaconID_t",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIndex"
            }
          ],
          "methodname": "GetBeaconByIndex",
          "flat_name": "SteamAPI_ISteamParties_GetBeaconByIndex"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeaconID"
            },
            {
              "paramtype": "CSteamID *",
              "paramname": "pSteamIDBeaconOwner"
            },
            {
              "paramtype": "SteamPartyBeaconLocation_t *",
              "out_struct": "",
              "paramname": "pLocation"
            },
            {
              "out_string_count": "cchMetadata",
              "paramtype": "char *",
              "paramname": "pchMetadata"
            },
            {
              "paramtype": "int",
              "paramname": "cchMetadata"
            }
          ],
          "methodname": "GetBeaconDetails",
          "flat_name": "SteamAPI_ISteamParties_GetBeaconDetails"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeaconID"
            }
          ],
          "callresult": "JoinPartyCallback_t",
          "methodname": "JoinParty",
          "flat_name": "SteamAPI_ISteamParties_JoinParty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint32 *",
              "paramname": "puNumLocations"
            }
          ],
          "methodname": "GetNumAvailableBeaconLocations",
          "flat_name": "SteamAPI_ISteamParties_GetNumAvailableBeaconLocations"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamPartyBeaconLocation_t *",
              "paramname": "pLocationList"
            },
            {
              "paramtype": "uint32",
              "paramname": "uMaxNumLocations"
            }
          ],
          "methodname": "GetAvailableBeaconLocations",
          "flat_name": "SteamAPI_ISteamParties_GetAvailableBeaconLocations"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unOpenSlots"
            },
            {
              "paramtype": "SteamPartyBeaconLocation_t *",
              "paramname": "pBeaconLocation"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchConnectString"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchMetadata"
            }
          ],
          "callresult": "CreateBeaconCallback_t",
          "methodname": "CreateBeacon",
          "flat_name": "SteamAPI_ISteamParties_CreateBeacon"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeacon"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "methodname": "OnReservationCompleted",
          "flat_name": "SteamAPI_ISteamParties_OnReservationCompleted"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeacon"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "methodname": "CancelReservation",
          "flat_name": "SteamAPI_ISteamParties_CancelReservation"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeacon"
            },
            {
              "paramtype": "uint32",
              "paramname": "unOpenSlots"
            }
          ],
          "callresult": "ChangeNumOpenSlotsCallback_t",
          "methodname": "ChangeNumOpenSlots",
          "flat_name": "SteamAPI_ISteamParties_ChangeNumOpenSlots"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PartyBeaconID_t",
              "paramname": "ulBeacon"
            }
          ],
          "methodname": "DestroyBeacon",
          "flat_name": "SteamAPI_ISteamParties_DestroyBeacon"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamPartyBeaconLocation_t",
              "paramname": "BeaconLocation"
            },
            {
              "paramtype": "ESteamPartyBeaconLocationData",
              "paramname": "eData"
            },
            {
              "out_string_count": "cchDataStringOut",
              "paramtype": "char *",
              "paramname": "pchDataStringOut"
            },
            {
              "paramtype": "int",
              "paramname": "cchDataStringOut"
            }
          ],
          "methodname": "GetBeaconLocationData",
          "flat_name": "SteamAPI_ISteamParties_GetBeaconLocationData"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamParties_v002",
          "kind": "user",
          "name": "SteamParties"
        }
      ]
    },
    {
      "classname": "ISteamRemoteStorage",
      "version_string": "STEAMREMOTESTORAGE_INTERFACE_VERSION014",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "const void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int32",
              "paramname": "cubData"
            }
          ],
          "methodname": "FileWrite",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWrite"
        },
        {
          "returntype": "int32",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int32",
              "paramname": "cubDataToRead"
            }
          ],
          "methodname": "FileRead",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileRead"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "const void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubData"
            }
          ],
          "callresult": "RemoteStorageFileWriteAsyncComplete_t",
          "methodname": "FileWriteAsync",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWriteAsync"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "uint32",
              "paramname": "nOffset"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubToRead"
            }
          ],
          "callresult": "RemoteStorageFileReadAsyncComplete_t",
          "methodname": "FileReadAsync",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileReadAsync"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamAPICall_t",
              "paramname": "hReadCall"
            },
            {
              "paramtype": "void *",
              "paramname": "pvBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubToRead"
            }
          ],
          "methodname": "FileReadAsyncComplete",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "FileForget",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileForget"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "FileDelete",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileDelete"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "callresult": "RemoteStorageFileShareResult_t",
          "methodname": "FileShare",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileShare"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "ERemoteStoragePlatform",
              "paramname": "eRemoteStoragePlatform"
            }
          ],
          "methodname": "SetSyncPlatforms",
          "flat_name": "SteamAPI_ISteamRemoteStorage_SetSyncPlatforms"
        },
        {
          "returntype": "UGCFileWriteStreamHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "FileWriteStreamOpen",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCFileWriteStreamHandle_t",
              "paramname": "writeHandle"
            },
            {
              "paramtype": "const void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int32",
              "paramname": "cubData"
            }
          ],
          "methodname": "FileWriteStreamWriteChunk",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCFileWriteStreamHandle_t",
              "paramname": "writeHandle"
            }
          ],
          "methodname": "FileWriteStreamClose",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWriteStreamClose"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCFileWriteStreamHandle_t",
              "paramname": "writeHandle"
            }
          ],
          "methodname": "FileWriteStreamCancel",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "FileExists",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FileExists"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "FilePersisted",
          "flat_name": "SteamAPI_ISteamRemoteStorage_FilePersisted"
        },
        {
          "returntype": "int32",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "GetFileSize",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetFileSize"
        },
        {
          "returntype": "int64",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "GetFileTimestamp",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetFileTimestamp"
        },
        {
          "returntype": "ERemoteStoragePlatform",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "GetSyncPlatforms",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetSyncPlatforms"
        },
        {
          "returntype": "int32",
          "params": [],
          "methodname": "GetFileCount",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetFileCount"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iFile"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pnFileSizeInBytes"
            }
          ],
          "methodname": "GetFileNameAndSize",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetFileNameAndSize"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint64 *",
              "paramname": "pnTotalBytes"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "puAvailableBytes"
            }
          ],
          "methodname": "GetQuota",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetQuota"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsCloudEnabledForAccount",
          "flat_name": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsCloudEnabledForApp",
          "flat_name": "SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bEnabled"
            }
          ],
          "methodname": "SetCloudEnabledForApp",
          "flat_name": "SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hContent"
            },
            {
              "paramtype": "uint32",
              "paramname": "unPriority"
            }
          ],
          "callresult": "RemoteStorageDownloadUGCResult_t",
          "methodname": "UGCDownload",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UGCDownload"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hContent"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pnBytesDownloaded"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pnBytesExpected"
            }
          ],
          "methodname": "GetUGCDownloadProgress",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hContent"
            },
            {
              "paramtype": "AppId_t *",
              "paramname": "pnAppID"
            },
            {
              "paramtype": "char **",
              "out_string": "",
              "paramname": "ppchName"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pnFileSizeInBytes"
            },
            {
              "paramtype": "CSteamID *",
              "out_struct": "",
              "paramname": "pSteamIDOwner"
            }
          ],
          "methodname": "GetUGCDetails",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetUGCDetails"
        },
        {
          "returntype": "int32",
          "params": [
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hContent"
            },
            {
              "paramtype": "void *",
              "paramname": "pvData"
            },
            {
              "paramtype": "int32",
              "paramname": "cubDataToRead"
            },
            {
              "paramtype": "uint32",
              "paramname": "cOffset"
            },
            {
              "paramtype": "EUGCReadAction",
              "paramname": "eAction"
            }
          ],
          "methodname": "UGCRead",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UGCRead"
        },
        {
          "returntype": "int32",
          "params": [],
          "methodname": "GetCachedUGCCount",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetCachedUGCCount"
        },
        {
          "returntype": "UGCHandle_t",
          "params": [
            {
              "paramtype": "int32",
              "paramname": "iCachedContent"
            }
          ],
          "methodname": "GetCachedUGCHandle",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPreviewFile"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppId"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchTitle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchDescription"
            },
            {
              "paramtype": "ERemoteStoragePublishedFileVisibility",
              "paramname": "eVisibility"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pTags"
            },
            {
              "paramtype": "EWorkshopFileType",
              "paramname": "eWorkshopFileType"
            }
          ],
          "callresult": "RemoteStoragePublishFileProgress_t",
          "methodname": "PublishWorkshopFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_PublishWorkshopFile"
        },
        {
          "returntype": "PublishedFileUpdateHandle_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "methodname": "CreatePublishedFileUpdateRequest",
          "flat_name": "SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchFile"
            }
          ],
          "methodname": "UpdatePublishedFileFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPreviewFile"
            }
          ],
          "methodname": "UpdatePublishedFilePreviewFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchTitle"
            }
          ],
          "methodname": "UpdatePublishedFileTitle",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchDescription"
            }
          ],
          "methodname": "UpdatePublishedFileDescription",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "ERemoteStoragePublishedFileVisibility",
              "paramname": "eVisibility"
            }
          ],
          "methodname": "UpdatePublishedFileVisibility",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileVisibility"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pTags"
            }
          ],
          "methodname": "UpdatePublishedFileTags",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTags"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            }
          ],
          "callresult": "RemoteStorageUpdatePublishedFileResult_t",
          "methodname": "CommitPublishedFileUpdate",
          "flat_name": "SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            },
            {
              "paramtype": "uint32",
              "paramname": "unMaxSecondsOld"
            }
          ],
          "callresult": "RemoteStorageGetPublishedFileDetailsResult_t",
          "methodname": "GetPublishedFileDetails",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "callresult": "RemoteStorageDeletePublishedFileResult_t",
          "methodname": "DeletePublishedFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_DeletePublishedFile"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            }
          ],
          "callresult": "RemoteStorageEnumerateUserPublishedFilesResult_t",
          "methodname": "EnumerateUserPublishedFiles",
          "flat_name": "SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "callresult": "RemoteStorageSubscribePublishedFileResult_t",
          "methodname": "SubscribePublishedFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_SubscribePublishedFile"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            }
          ],
          "callresult": "RemoteStorageEnumerateUserSubscribedFilesResult_t",
          "methodname": "EnumerateUserSubscribedFiles",
          "flat_name": "SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "callresult": "RemoteStorageUnsubscribePublishedFileResult_t",
          "methodname": "UnsubscribePublishedFile",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchChangeDescription"
            }
          ],
          "methodname": "UpdatePublishedFileSetChangeDescription",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "callresult": "RemoteStorageGetPublishedItemVoteDetailsResult_t",
          "methodname": "GetPublishedItemVoteDetails",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            },
            {
              "paramtype": "bool",
              "paramname": "bVoteUp"
            }
          ],
          "callresult": "RemoteStorageUpdateUserPublishedItemVoteResult_t",
          "methodname": "UpdateUserPublishedItemVote",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            }
          ],
          "callresult": "RemoteStorageGetPublishedItemVoteDetailsResult_t",
          "methodname": "GetUserPublishedItemVoteDetails",
          "flat_name": "SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamId"
            },
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pRequiredTags"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pExcludedTags"
            }
          ],
          "callresult": "RemoteStorageEnumerateUserPublishedFilesResult_t",
          "methodname": "EnumerateUserSharedWorkshopFiles",
          "flat_name": "SteamAPI_ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "EWorkshopVideoProvider",
              "paramname": "eVideoProvider"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVideoAccount"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVideoIdentifier"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPreviewFile"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppId"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchTitle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchDescription"
            },
            {
              "paramtype": "ERemoteStoragePublishedFileVisibility",
              "paramname": "eVisibility"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pTags"
            }
          ],
          "callresult": "RemoteStoragePublishFileProgress_t",
          "methodname": "PublishVideo",
          "flat_name": "SteamAPI_ISteamRemoteStorage_PublishVideo"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileId"
            },
            {
              "paramtype": "EWorkshopFileAction",
              "paramname": "eAction"
            }
          ],
          "callresult": "RemoteStorageSetUserPublishedFileActionResult_t",
          "methodname": "SetUserPublishedFileAction",
          "flat_name": "SteamAPI_ISteamRemoteStorage_SetUserPublishedFileAction"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "EWorkshopFileAction",
              "paramname": "eAction"
            },
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            }
          ],
          "callresult": "RemoteStorageEnumeratePublishedFilesByUserActionResult_t",
          "methodname": "EnumeratePublishedFilesByUserAction",
          "flat_name": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedFilesByUserAction"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "EWorkshopEnumerationType",
              "paramname": "eEnumerationType"
            },
            {
              "paramtype": "uint32",
              "paramname": "unStartIndex"
            },
            {
              "paramtype": "uint32",
              "paramname": "unCount"
            },
            {
              "paramtype": "uint32",
              "paramname": "unDays"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pTags"
            },
            {
              "paramtype": "SteamParamStringArray_t *",
              "paramname": "pUserTags"
            }
          ],
          "callresult": "RemoteStorageEnumerateWorkshopFilesResult_t",
          "methodname": "EnumeratePublishedWorkshopFiles",
          "flat_name": "SteamAPI_ISteamRemoteStorage_EnumeratePublishedWorkshopFiles"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hContent"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchLocation"
            },
            {
              "paramtype": "uint32",
              "paramname": "unPriority"
            }
          ],
          "callresult": "RemoteStorageDownloadUGCResult_t",
          "methodname": "UGCDownloadToLocation",
          "flat_name": "SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamRemoteStorage_v014",
          "kind": "user",
          "name": "SteamRemoteStorage"
        }
      ]
    },
    {
      "classname": "ISteamUserStats",
      "version_string": "STEAMUSERSTATS_INTERFACE_VERSION011",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "callback": "UserStatsReceived_t",
          "methodname": "RequestCurrentStats",
          "flat_name": "SteamAPI_ISteamUserStats_RequestCurrentStats"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetStatInt32"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetStatFloat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int32",
              "paramname": "nData"
            }
          ],
          "methodname": "SetStat",
          "flat_name": "SteamAPI_ISteamUserStats_SetStatInt32"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float",
              "paramname": "fData"
            }
          ],
          "methodname": "SetStat",
          "flat_name": "SteamAPI_ISteamUserStats_SetStatFloat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float",
              "paramname": "flCountThisSession"
            },
            {
              "paramtype": "double",
              "paramname": "dSessionLength"
            }
          ],
          "methodname": "UpdateAvgRateStat",
          "flat_name": "SteamAPI_ISteamUserStats_UpdateAvgRateStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            }
          ],
          "methodname": "GetAchievement",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "SetAchievement",
          "flat_name": "SteamAPI_ISteamUserStats_SetAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "ClearAchievement",
          "flat_name": "SteamAPI_ISteamUserStats_ClearAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punUnlockTime"
            }
          ],
          "methodname": "GetAchievementAndUnlockTime",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "StoreStats",
          "flat_name": "SteamAPI_ISteamUserStats_StoreStats"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "GetAchievementIcon",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievementIcon"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "GetAchievementDisplayAttribute",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "uint32",
              "paramname": "nCurProgress"
            },
            {
              "paramtype": "uint32",
              "paramname": "nMaxProgress"
            }
          ],
          "methodname": "IndicateAchievementProgress",
          "flat_name": "SteamAPI_ISteamUserStats_IndicateAchievementProgress"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetNumAchievements",
          "flat_name": "SteamAPI_ISteamUserStats_GetNumAchievements"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "iAchievement"
            }
          ],
          "methodname": "GetAchievementName",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievementName"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "callresult": "UserStatsReceived_t",
          "methodname": "RequestUserStats",
          "flat_name": "SteamAPI_ISteamUserStats_RequestUserStats"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetUserStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetUserStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetUserStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetUserStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            }
          ],
          "methodname": "GetUserAchievement",
          "flat_name": "SteamAPI_ISteamUserStats_GetUserAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punUnlockTime"
            }
          ],
          "methodname": "GetUserAchievementAndUnlockTime",
          "flat_name": "SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bAchievementsToo"
            }
          ],
          "methodname": "ResetAllStats",
          "flat_name": "SteamAPI_ISteamUserStats_ResetAllStats"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchLeaderboardName"
            },
            {
              "paramtype": "ELeaderboardSortMethod",
              "paramname": "eLeaderboardSortMethod"
            },
            {
              "paramtype": "ELeaderboardDisplayType",
              "paramname": "eLeaderboardDisplayType"
            }
          ],
          "callresult": "LeaderboardFindResult_t",
          "methodname": "FindOrCreateLeaderboard",
          "flat_name": "SteamAPI_ISteamUserStats_FindOrCreateLeaderboard"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchLeaderboardName"
            }
          ],
          "callresult": "LeaderboardFindResult_t",
          "methodname": "FindLeaderboard",
          "flat_name": "SteamAPI_ISteamUserStats_FindLeaderboard"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            }
          ],
          "methodname": "GetLeaderboardName",
          "flat_name": "SteamAPI_ISteamUserStats_GetLeaderboardName"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            }
          ],
          "methodname": "GetLeaderboardEntryCount",
          "flat_name": "SteamAPI_ISteamUserStats_GetLeaderboardEntryCount"
        },
        {
          "returntype": "ELeaderboardSortMethod",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            }
          ],
          "methodname": "GetLeaderboardSortMethod",
          "flat_name": "SteamAPI_ISteamUserStats_GetLeaderboardSortMethod"
        },
        {
          "returntype": "ELeaderboardDisplayType",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            }
          ],
          "methodname": "GetLeaderboardDisplayType",
          "flat_name": "SteamAPI_ISteamUserStats_GetLeaderboardDisplayType"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            },
            {
              "paramtype": "ELeaderboardDataRequest",
              "paramname": "eLeaderboardDataRequest"
            },
            {
              "paramtype": "int",
              "paramname": "nRangeStart"
            },
            {
              "paramtype": "int",
              "paramname": "nRangeEnd"
            }
          ],
          "callresult": "LeaderboardScoresDownloaded_t",
          "methodname": "DownloadLeaderboardEntries",
          "flat_name": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntries"
        },
        {
          "methodname": "DownloadLeaderboardEntriesForUsers",
          "callresult": "LeaderboardScoresDownloaded_t",
          "flat_name": "SteamAPI_ISteamUserStats_DownloadLeaderboardEntriesForUsers",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            },
            {
              "paramtype": "CSteamID *",
              "desc": "Array of users to retrieve",
              "array_count": "cUsers",
              "paramname": "prgUsers"
            },
            {
              "paramtype": "int",
              "paramname": "cUsers"
            }
          ],
          "returntype": "SteamAPICall_t",
          "desc": "Downloads leaderboard entries for an arbitrary set of users - ELeaderboardDataRequest is k_ELeaderboardDataRequestUsers"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamLeaderboardEntries_t",
              "paramname": "hSteamLeaderboardEntries"
            },
            {
              "paramtype": "int",
              "paramname": "index"
            },
            {
              "paramtype": "LeaderboardEntry_t *",
              "paramname": "pLeaderboardEntry"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pDetails"
            },
            {
              "paramtype": "int",
              "paramname": "cDetailsMax"
            }
          ],
          "methodname": "GetDownloadedLeaderboardEntry",
          "flat_name": "SteamAPI_ISteamUserStats_GetDownloadedLeaderboardEntry"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            },
            {
              "paramtype": "ELeaderboardUploadScoreMethod",
              "paramname": "eLeaderboardUploadScoreMethod"
            },
            {
              "paramtype": "int32",
              "paramname": "nScore"
            },
            {
              "paramtype": "const int32 *",
              "paramname": "pScoreDetails"
            },
            {
              "paramtype": "int",
              "paramname": "cScoreDetailsCount"
            }
          ],
          "callresult": "LeaderboardScoreUploaded_t",
          "methodname": "UploadLeaderboardScore",
          "flat_name": "SteamAPI_ISteamUserStats_UploadLeaderboardScore"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "SteamLeaderboard_t",
              "paramname": "hSteamLeaderboard"
            },
            {
              "paramtype": "UGCHandle_t",
              "paramname": "hUGC"
            }
          ],
          "callresult": "LeaderboardUGCSet_t",
          "methodname": "AttachLeaderboardUGC",
          "flat_name": "SteamAPI_ISteamUserStats_AttachLeaderboardUGC"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "NumberOfCurrentPlayers_t",
          "methodname": "GetNumberOfCurrentPlayers",
          "flat_name": "SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "GlobalAchievementPercentagesReady_t",
          "methodname": "RequestGlobalAchievementPercentages",
          "flat_name": "SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "uint32",
              "paramname": "unNameBufLen"
            },
            {
              "paramtype": "float *",
              "paramname": "pflPercent"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            }
          ],
          "methodname": "GetMostAchievedAchievementInfo",
          "flat_name": "SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iIteratorPrevious"
            },
            {
              "paramtype": "char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "uint32",
              "paramname": "unNameBufLen"
            },
            {
              "paramtype": "float *",
              "paramname": "pflPercent"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            }
          ],
          "methodname": "GetNextMostAchievedAchievementInfo",
          "flat_name": "SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float *",
              "paramname": "pflPercent"
            }
          ],
          "methodname": "GetAchievementAchievedPercent",
          "flat_name": "SteamAPI_ISteamUserStats_GetAchievementAchievedPercent"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nHistoryDays"
            }
          ],
          "callresult": "GlobalStatsReceived_t",
          "methodname": "RequestGlobalStats",
          "flat_name": "SteamAPI_ISteamUserStats_RequestGlobalStats"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchStatName"
            },
            {
              "paramtype": "int64 *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetGlobalStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetGlobalStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchStatName"
            },
            {
              "paramtype": "double *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetGlobalStat",
          "flat_name": "SteamAPI_ISteamUserStats_GetGlobalStat"
        },
        {
          "returntype": "int32",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchStatName"
            },
            {
              "paramtype": "int64 *",
              "array_count": "cubData",
              "paramname": "pData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubData"
            }
          ],
          "methodname": "GetGlobalStatHistory",
          "flat_name": "SteamAPI_ISteamUserStats_GetGlobalStatHistory"
        },
        {
          "returntype": "int32",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchStatName"
            },
            {
              "paramtype": "double *",
              "array_count": "cubData",
              "paramname": "pData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubData"
            }
          ],
          "methodname": "GetGlobalStatHistory",
          "flat_name": "SteamAPI_ISteamUserStats_GetGlobalStatHistory"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamUserStats_v011",
          "kind": "user",
          "name": "SteamUserStats"
        }
      ]
    },
    {
      "classname": "ISteamApps",
      "version_string": "STEAMAPPS_INTERFACE_VERSION008",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsSubscribed",
          "flat_name": "SteamAPI_ISteamApps_BIsSubscribed"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsLowViolence",
          "flat_name": "SteamAPI_ISteamApps_BIsLowViolence"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsCybercafe",
          "flat_name": "SteamAPI_ISteamApps_BIsCybercafe"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsVACBanned",
          "flat_name": "SteamAPI_ISteamApps_BIsVACBanned"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetCurrentGameLanguage",
          "flat_name": "SteamAPI_ISteamApps_GetCurrentGameLanguage"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetAvailableGameLanguages",
          "flat_name": "SteamAPI_ISteamApps_GetAvailableGameLanguages"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            }
          ],
          "methodname": "BIsSubscribedApp",
          "flat_name": "SteamAPI_ISteamApps_BIsSubscribedApp"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            }
          ],
          "methodname": "BIsDlcInstalled",
          "flat_name": "SteamAPI_ISteamApps_BIsDlcInstalled"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "GetEarliestPurchaseUnixTime",
          "flat_name": "SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsSubscribedFromFreeWeekend",
          "flat_name": "SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetDLCCount",
          "flat_name": "SteamAPI_ISteamApps_GetDLCCount"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iDLC"
            },
            {
              "paramtype": "AppId_t *",
              "paramname": "pAppID"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAvailable"
            },
            {
              "paramtype": "char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int",
              "paramname": "cchNameBufferSize"
            }
          ],
          "methodname": "BGetDLCDataByIndex",
          "flat_name": "SteamAPI_ISteamApps_BGetDLCDataByIndex"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "InstallDLC",
          "flat_name": "SteamAPI_ISteamApps_InstallDLC"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "UninstallDLC",
          "flat_name": "SteamAPI_ISteamApps_UninstallDLC"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "RequestAppProofOfPurchaseKey",
          "flat_name": "SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int",
              "paramname": "cchNameBufferSize"
            }
          ],
          "methodname": "GetCurrentBetaName",
          "flat_name": "SteamAPI_ISteamApps_GetCurrentBetaName"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bMissingFilesOnly"
            }
          ],
          "methodname": "MarkContentCorrupt",
          "flat_name": "SteamAPI_ISteamApps_MarkContentCorrupt"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            },
            {
              "paramtype": "DepotId_t *",
              "paramname": "pvecDepots"
            },
            {
              "paramtype": "uint32",
              "paramname": "cMaxDepots"
            }
          ],
          "methodname": "GetInstalledDepots",
          "flat_name": "SteamAPI_ISteamApps_GetInstalledDepots"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            },
            {
              "paramtype": "char *",
              "paramname": "pchFolder"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchFolderBufferSize"
            }
          ],
          "methodname": "GetAppInstallDir",
          "flat_name": "SteamAPI_ISteamApps_GetAppInstallDir"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            }
          ],
          "methodname": "BIsAppInstalled",
          "flat_name": "SteamAPI_ISteamApps_BIsAppInstalled"
        },
        {
          "returntype": "CSteamID",
          "params": [],
          "methodname": "GetAppOwner",
          "flat_name": "SteamAPI_ISteamApps_GetAppOwner"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "GetLaunchQueryParam",
          "flat_name": "SteamAPI_ISteamApps_GetLaunchQueryParam"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesDownloaded"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesTotal"
            }
          ],
          "methodname": "GetDlcDownloadProgress",
          "flat_name": "SteamAPI_ISteamApps_GetDlcDownloadProgress"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetAppBuildId",
          "flat_name": "SteamAPI_ISteamApps_GetAppBuildId"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RequestAllProofOfPurchaseKeys",
          "flat_name": "SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszFileName"
            }
          ],
          "callresult": "FileDetailsResult_t",
          "methodname": "GetFileDetails",
          "flat_name": "SteamAPI_ISteamApps_GetFileDetails"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "pszCommandLine"
            },
            {
              "paramtype": "int",
              "paramname": "cubCommandLine"
            }
          ],
          "methodname": "GetLaunchCommandLine",
          "flat_name": "SteamAPI_ISteamApps_GetLaunchCommandLine"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsSubscribedFromFamilySharing",
          "flat_name": "SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamApps_v008",
          "kind": "user",
          "name": "SteamApps"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerApps_v008",
          "kind": "gameserver",
          "name": "SteamGameServerApps"
        }
      ]
    },
    {
      "classname": "ISteamNetworking",
      "version_string": "SteamNetworking006",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDRemote"
            },
            {
              "paramtype": "const void *",
              "paramname": "pubData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubData"
            },
            {
              "paramtype": "EP2PSend",
              "paramname": "eP2PSendType"
            },
            {
              "paramtype": "int",
              "paramname": "nChannel"
            }
          ],
          "methodname": "SendP2PPacket",
          "flat_name": "SteamAPI_ISteamNetworking_SendP2PPacket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            },
            {
              "paramtype": "int",
              "paramname": "nChannel"
            }
          ],
          "methodname": "IsP2PPacketAvailable",
          "flat_name": "SteamAPI_ISteamNetworking_IsP2PPacketAvailable"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pubDest"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubDest"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            },
            {
              "paramtype": "CSteamID *",
              "paramname": "psteamIDRemote"
            },
            {
              "paramtype": "int",
              "paramname": "nChannel"
            }
          ],
          "methodname": "ReadP2PPacket",
          "flat_name": "SteamAPI_ISteamNetworking_ReadP2PPacket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDRemote"
            }
          ],
          "methodname": "AcceptP2PSessionWithUser",
          "flat_name": "SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDRemote"
            }
          ],
          "methodname": "CloseP2PSessionWithUser",
          "flat_name": "SteamAPI_ISteamNetworking_CloseP2PSessionWithUser"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDRemote"
            },
            {
              "paramtype": "int",
              "paramname": "nChannel"
            }
          ],
          "methodname": "CloseP2PChannelWithUser",
          "flat_name": "SteamAPI_ISteamNetworking_CloseP2PChannelWithUser"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDRemote"
            },
            {
              "paramtype": "P2PSessionState_t *",
              "paramname": "pConnectionState"
            }
          ],
          "methodname": "GetP2PSessionState",
          "flat_name": "SteamAPI_ISteamNetworking_GetP2PSessionState"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bAllow"
            }
          ],
          "methodname": "AllowP2PPacketRelay",
          "flat_name": "SteamAPI_ISteamNetworking_AllowP2PPacketRelay"
        },
        {
          "returntype": "SNetListenSocket_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nVirtualP2PPort"
            },
            {
              "paramtype": "SteamIPAddress_t",
              "paramname": "nIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "nPort"
            },
            {
              "paramtype": "bool",
              "paramname": "bAllowUseOfPacketRelay"
            }
          ],
          "methodname": "CreateListenSocket",
          "flat_name": "SteamAPI_ISteamNetworking_CreateListenSocket"
        },
        {
          "returntype": "SNetSocket_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDTarget"
            },
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "int",
              "paramname": "nTimeoutSec"
            },
            {
              "paramtype": "bool",
              "paramname": "bAllowUseOfPacketRelay"
            }
          ],
          "methodname": "CreateP2PConnectionSocket",
          "flat_name": "SteamAPI_ISteamNetworking_CreateP2PConnectionSocket"
        },
        {
          "returntype": "SNetSocket_t",
          "params": [
            {
              "paramtype": "SteamIPAddress_t",
              "paramname": "nIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "nPort"
            },
            {
              "paramtype": "int",
              "paramname": "nTimeoutSec"
            }
          ],
          "methodname": "CreateConnectionSocket",
          "flat_name": "SteamAPI_ISteamNetworking_CreateConnectionSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "bool",
              "paramname": "bNotifyRemoteEnd"
            }
          ],
          "methodname": "DestroySocket",
          "flat_name": "SteamAPI_ISteamNetworking_DestroySocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetListenSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "bool",
              "paramname": "bNotifyRemoteEnd"
            }
          ],
          "methodname": "DestroyListenSocket",
          "flat_name": "SteamAPI_ISteamNetworking_DestroyListenSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "void *",
              "paramname": "pubData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubData"
            },
            {
              "paramtype": "bool",
              "paramname": "bReliable"
            }
          ],
          "methodname": "SendDataOnSocket",
          "flat_name": "SteamAPI_ISteamNetworking_SendDataOnSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            }
          ],
          "methodname": "IsDataAvailableOnSocket",
          "flat_name": "SteamAPI_ISteamNetworking_IsDataAvailableOnSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "void *",
              "paramname": "pubDest"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubDest"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            }
          ],
          "methodname": "RetrieveDataFromSocket",
          "flat_name": "SteamAPI_ISteamNetworking_RetrieveDataFromSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetListenSocket_t",
              "paramname": "hListenSocket"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            },
            {
              "paramtype": "SNetSocket_t *",
              "paramname": "phSocket"
            }
          ],
          "methodname": "IsDataAvailable",
          "flat_name": "SteamAPI_ISteamNetworking_IsDataAvailable"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetListenSocket_t",
              "paramname": "hListenSocket"
            },
            {
              "paramtype": "void *",
              "paramname": "pubDest"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubDest"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcubMsgSize"
            },
            {
              "paramtype": "SNetSocket_t *",
              "paramname": "phSocket"
            }
          ],
          "methodname": "RetrieveData",
          "flat_name": "SteamAPI_ISteamNetworking_RetrieveData"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            },
            {
              "paramtype": "CSteamID *",
              "paramname": "pSteamIDRemote"
            },
            {
              "paramtype": "int *",
              "paramname": "peSocketStatus"
            },
            {
              "paramtype": "SteamIPAddress_t *",
              "paramname": "punIPRemote"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "punPortRemote"
            }
          ],
          "methodname": "GetSocketInfo",
          "flat_name": "SteamAPI_ISteamNetworking_GetSocketInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SNetListenSocket_t",
              "paramname": "hListenSocket"
            },
            {
              "paramtype": "SteamIPAddress_t *",
              "paramname": "pnIP"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "pnPort"
            }
          ],
          "methodname": "GetListenSocketInfo",
          "flat_name": "SteamAPI_ISteamNetworking_GetListenSocketInfo"
        },
        {
          "returntype": "ESNetSocketConnectionType",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            }
          ],
          "methodname": "GetSocketConnectionType",
          "flat_name": "SteamAPI_ISteamNetworking_GetSocketConnectionType"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "SNetSocket_t",
              "paramname": "hSocket"
            }
          ],
          "methodname": "GetMaxPacketSize",
          "flat_name": "SteamAPI_ISteamNetworking_GetMaxPacketSize"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamNetworking_v006",
          "kind": "user",
          "name": "SteamNetworking"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerNetworking_v006",
          "kind": "gameserver",
          "name": "SteamGameServerNetworking"
        }
      ]
    },
    {
      "classname": "ISteamScreenshots",
      "version_string": "STEAMSCREENSHOTS_INTERFACE_VERSION003",
      "methods": [
        {
          "returntype": "ScreenshotHandle",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pubRGB"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubRGB"
            },
            {
              "paramtype": "int",
              "paramname": "nWidth"
            },
            {
              "paramtype": "int",
              "paramname": "nHeight"
            }
          ],
          "methodname": "WriteScreenshot",
          "flat_name": "SteamAPI_ISteamScreenshots_WriteScreenshot"
        },
        {
          "returntype": "ScreenshotHandle",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchFilename"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchThumbnailFilename"
            },
            {
              "paramtype": "int",
              "paramname": "nWidth"
            },
            {
              "paramtype": "int",
              "paramname": "nHeight"
            }
          ],
          "methodname": "AddScreenshotToLibrary",
          "flat_name": "SteamAPI_ISteamScreenshots_AddScreenshotToLibrary"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "TriggerScreenshot",
          "flat_name": "SteamAPI_ISteamScreenshots_TriggerScreenshot"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bHook"
            }
          ],
          "methodname": "HookScreenshots",
          "flat_name": "SteamAPI_ISteamScreenshots_HookScreenshots"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ScreenshotHandle",
              "paramname": "hScreenshot"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchLocation"
            }
          ],
          "methodname": "SetLocation",
          "flat_name": "SteamAPI_ISteamScreenshots_SetLocation"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ScreenshotHandle",
              "paramname": "hScreenshot"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "TagUser",
          "flat_name": "SteamAPI_ISteamScreenshots_TagUser"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ScreenshotHandle",
              "paramname": "hScreenshot"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "unPublishedFileID"
            }
          ],
          "methodname": "TagPublishedFile",
          "flat_name": "SteamAPI_ISteamScreenshots_TagPublishedFile"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsScreenshotsHooked",
          "flat_name": "SteamAPI_ISteamScreenshots_IsScreenshotsHooked"
        },
        {
          "returntype": "ScreenshotHandle",
          "params": [
            {
              "paramtype": "EVRScreenshotType",
              "paramname": "eType"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchFilename"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVRFilename"
            }
          ],
          "methodname": "AddVRScreenshotToLibrary",
          "flat_name": "SteamAPI_ISteamScreenshots_AddVRScreenshotToLibrary"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamScreenshots_v003",
          "kind": "user",
          "name": "SteamScreenshots"
        }
      ]
    },
    {
      "classname": "ISteamMusic",
      "version_string": "STEAMMUSIC_INTERFACE_VERSION001",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsEnabled",
          "flat_name": "SteamAPI_ISteamMusic_BIsEnabled"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsPlaying",
          "flat_name": "SteamAPI_ISteamMusic_BIsPlaying"
        },
        {
          "returntype": "AudioPlayback_Status",
          "params": [],
          "methodname": "GetPlaybackStatus",
          "flat_name": "SteamAPI_ISteamMusic_GetPlaybackStatus"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "Play",
          "flat_name": "SteamAPI_ISteamMusic_Play"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "Pause",
          "flat_name": "SteamAPI_ISteamMusic_Pause"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "PlayPrevious",
          "flat_name": "SteamAPI_ISteamMusic_PlayPrevious"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "PlayNext",
          "flat_name": "SteamAPI_ISteamMusic_PlayNext"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "float",
              "paramname": "flVolume"
            }
          ],
          "methodname": "SetVolume",
          "flat_name": "SteamAPI_ISteamMusic_SetVolume"
        },
        {
          "returntype": "float",
          "params": [],
          "methodname": "GetVolume",
          "flat_name": "SteamAPI_ISteamMusic_GetVolume"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamMusic_v001",
          "kind": "user",
          "name": "SteamMusic"
        }
      ]
    },
    {
      "classname": "ISteamMusicRemote",
      "version_string": "STEAMMUSICREMOTE_INTERFACE_VERSION001",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "RegisterSteamMusicRemote",
          "flat_name": "SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "DeregisterSteamMusicRemote",
          "flat_name": "SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsCurrentMusicRemote",
          "flat_name": "SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "BActivationSuccess",
          "flat_name": "SteamAPI_ISteamMusicRemote_BActivationSuccess"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchDisplayName"
            }
          ],
          "methodname": "SetDisplayName",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetDisplayName"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pvBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBufferLength"
            }
          ],
          "methodname": "SetPNGIcon_64x64",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnablePlayPrevious",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnablePlayPrevious"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnablePlayNext",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnablePlayNext"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnableShuffled",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnableShuffled"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnableLooped",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnableLooped"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnableQueue",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnableQueue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "EnablePlaylists",
          "flat_name": "SteamAPI_ISteamMusicRemote_EnablePlaylists"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AudioPlayback_Status",
              "paramname": "nStatus"
            }
          ],
          "methodname": "UpdatePlaybackStatus",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdatePlaybackStatus"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "UpdateShuffled",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateShuffled"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "UpdateLooped",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateLooped"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "float",
              "paramname": "flValue"
            }
          ],
          "methodname": "UpdateVolume",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateVolume"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "CurrentEntryWillChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_CurrentEntryWillChange"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bAvailable"
            }
          ],
          "methodname": "CurrentEntryIsAvailable",
          "flat_name": "SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchText"
            }
          ],
          "methodname": "UpdateCurrentEntryText",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nValue"
            }
          ],
          "methodname": "UpdateCurrentEntryElapsedSeconds",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pvBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBufferLength"
            }
          ],
          "methodname": "UpdateCurrentEntryCoverArt",
          "flat_name": "SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "CurrentEntryDidChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_CurrentEntryDidChange"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "QueueWillChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_QueueWillChange"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "ResetQueueEntries",
          "flat_name": "SteamAPI_ISteamMusicRemote_ResetQueueEntries"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nID"
            },
            {
              "paramtype": "int",
              "paramname": "nPosition"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchEntryText"
            }
          ],
          "methodname": "SetQueueEntry",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetQueueEntry"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nID"
            }
          ],
          "methodname": "SetCurrentQueueEntry",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "QueueDidChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_QueueDidChange"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "PlaylistWillChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_PlaylistWillChange"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "ResetPlaylistEntries",
          "flat_name": "SteamAPI_ISteamMusicRemote_ResetPlaylistEntries"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nID"
            },
            {
              "paramtype": "int",
              "paramname": "nPosition"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchEntryText"
            }
          ],
          "methodname": "SetPlaylistEntry",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetPlaylistEntry"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nID"
            }
          ],
          "methodname": "SetCurrentPlaylistEntry",
          "flat_name": "SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "PlaylistDidChange",
          "flat_name": "SteamAPI_ISteamMusicRemote_PlaylistDidChange"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamMusicRemote_v001",
          "kind": "user",
          "name": "SteamMusicRemote"
        }
      ]
    },
    {
      "classname": "ISteamHTTP",
      "version_string": "STEAMHTTP_INTERFACE_VERSION003",
      "methods": [
        {
          "returntype": "HTTPRequestHandle",
          "params": [
            {
              "paramtype": "EHTTPMethod",
              "paramname": "eHTTPRequestMethod"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchAbsoluteURL"
            }
          ],
          "methodname": "CreateHTTPRequest",
          "flat_name": "SteamAPI_ISteamHTTP_CreateHTTPRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint64",
              "paramname": "ulContextValue"
            }
          ],
          "methodname": "SetHTTPRequestContextValue",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestContextValue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint32",
              "paramname": "unTimeoutSeconds"
            }
          ],
          "methodname": "SetHTTPRequestNetworkActivityTimeout",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchHeaderName"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchHeaderValue"
            }
          ],
          "methodname": "SetHTTPRequestHeaderValue",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchParamName"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchParamValue"
            }
          ],
          "methodname": "SetHTTPRequestGetOrPostParameter",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "SteamAPICall_t *",
              "paramname": "pCallHandle"
            }
          ],
          "methodname": "SendHTTPRequest",
          "flat_name": "SteamAPI_ISteamHTTP_SendHTTPRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "SteamAPICall_t *",
              "paramname": "pCallHandle"
            }
          ],
          "methodname": "SendHTTPRequestAndStreamResponse",
          "flat_name": "SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            }
          ],
          "methodname": "DeferHTTPRequest",
          "flat_name": "SteamAPI_ISteamHTTP_DeferHTTPRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            }
          ],
          "methodname": "PrioritizeHTTPRequest",
          "flat_name": "SteamAPI_ISteamHTTP_PrioritizeHTTPRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchHeaderName"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "unResponseHeaderSize"
            }
          ],
          "methodname": "GetHTTPResponseHeaderSize",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchHeaderName"
            },
            {
              "paramtype": "uint8 *",
              "paramname": "pHeaderValueBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unBufferSize"
            }
          ],
          "methodname": "GetHTTPResponseHeaderValue",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "unBodySize"
            }
          ],
          "methodname": "GetHTTPResponseBodySize",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPResponseBodySize"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint8 *",
              "paramname": "pBodyDataBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unBufferSize"
            }
          ],
          "methodname": "GetHTTPResponseBodyData",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPResponseBodyData"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint32",
              "paramname": "cOffset"
            },
            {
              "paramtype": "uint8 *",
              "paramname": "pBodyDataBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unBufferSize"
            }
          ],
          "methodname": "GetHTTPStreamingResponseBodyData",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            }
          ],
          "methodname": "ReleaseHTTPRequest",
          "flat_name": "SteamAPI_ISteamHTTP_ReleaseHTTPRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "float *",
              "paramname": "pflPercentOut"
            }
          ],
          "methodname": "GetHTTPDownloadProgressPct",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchContentType"
            },
            {
              "paramtype": "uint8 *",
              "paramname": "pubBody"
            },
            {
              "paramtype": "uint32",
              "paramname": "unBodyLen"
            }
          ],
          "methodname": "SetHTTPRequestRawPostBody",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody"
        },
        {
          "returntype": "HTTPCookieContainerHandle",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bAllowResponsesToModify"
            }
          ],
          "methodname": "CreateCookieContainer",
          "flat_name": "SteamAPI_ISteamHTTP_CreateCookieContainer"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPCookieContainerHandle",
              "paramname": "hCookieContainer"
            }
          ],
          "methodname": "ReleaseCookieContainer",
          "flat_name": "SteamAPI_ISteamHTTP_ReleaseCookieContainer"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPCookieContainerHandle",
              "paramname": "hCookieContainer"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchHost"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchUrl"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchCookie"
            }
          ],
          "methodname": "SetCookie",
          "flat_name": "SteamAPI_ISteamHTTP_SetCookie"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "HTTPCookieContainerHandle",
              "paramname": "hCookieContainer"
            }
          ],
          "methodname": "SetHTTPRequestCookieContainer",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchUserAgentInfo"
            }
          ],
          "methodname": "SetHTTPRequestUserAgentInfo",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "bool",
              "paramname": "bRequireVerifiedCertificate"
            }
          ],
          "methodname": "SetHTTPRequestRequiresVerifiedCertificate",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "uint32",
              "paramname": "unMilliseconds"
            }
          ],
          "methodname": "SetHTTPRequestAbsoluteTimeoutMS",
          "flat_name": "SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HTTPRequestHandle",
              "paramname": "hRequest"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbWasTimedOut"
            }
          ],
          "methodname": "GetHTTPRequestWasTimedOut",
          "flat_name": "SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamHTTP_v003",
          "kind": "user",
          "name": "SteamHTTP"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerHTTP_v003",
          "kind": "gameserver",
          "name": "SteamGameServerHTTP"
        }
      ]
    },
    {
      "classname": "ISteamInput",
      "version_string": "SteamInput001",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Init",
          "flat_name": "SteamAPI_ISteamInput_Init"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Shutdown",
          "flat_name": "SteamAPI_ISteamInput_Shutdown"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RunFrame",
          "flat_name": "SteamAPI_ISteamInput_RunFrame"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "InputHandle_t *",
              "desc": "Receives list of connected controllers",
              "out_array_count": "STEAM_INPUT_MAX_COUNT",
              "paramname": "handlesOut"
            }
          ],
          "methodname": "GetConnectedControllers",
          "flat_name": "SteamAPI_ISteamInput_GetConnectedControllers"
        },
        {
          "returntype": "InputActionSetHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionSetName"
            }
          ],
          "methodname": "GetActionSetHandle",
          "flat_name": "SteamAPI_ISteamInput_GetActionSetHandle"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t",
              "paramname": "actionSetHandle"
            }
          ],
          "methodname": "ActivateActionSet",
          "flat_name": "SteamAPI_ISteamInput_ActivateActionSet"
        },
        {
          "returntype": "InputActionSetHandle_t",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "GetCurrentActionSet",
          "flat_name": "SteamAPI_ISteamInput_GetCurrentActionSet"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t",
              "paramname": "actionSetLayerHandle"
            }
          ],
          "methodname": "ActivateActionSetLayer",
          "flat_name": "SteamAPI_ISteamInput_ActivateActionSetLayer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t",
              "paramname": "actionSetLayerHandle"
            }
          ],
          "methodname": "DeactivateActionSetLayer",
          "flat_name": "SteamAPI_ISteamInput_DeactivateActionSetLayer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "DeactivateAllActionSetLayers",
          "flat_name": "SteamAPI_ISteamInput_DeactivateAllActionSetLayers"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t *",
              "desc": "Receives list of active layers",
              "out_array_count": "STEAM_INPUT_MAX_ACTIVE_LAYERS",
              "paramname": "handlesOut"
            }
          ],
          "methodname": "GetActiveActionSetLayers",
          "flat_name": "SteamAPI_ISteamInput_GetActiveActionSetLayers"
        },
        {
          "returntype": "InputDigitalActionHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionName"
            }
          ],
          "methodname": "GetDigitalActionHandle",
          "flat_name": "SteamAPI_ISteamInput_GetDigitalActionHandle"
        },
        {
          "returntype": "InputDigitalActionData_t",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputDigitalActionHandle_t",
              "paramname": "digitalActionHandle"
            }
          ],
          "methodname": "GetDigitalActionData",
          "flat_name": "SteamAPI_ISteamInput_GetDigitalActionData"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t",
              "paramname": "actionSetHandle"
            },
            {
              "paramtype": "InputDigitalActionHandle_t",
              "paramname": "digitalActionHandle"
            },
            {
              "paramtype": "EInputActionOrigin *",
              "desc": "Receives list of action origins",
              "out_array_count": "STEAM_INPUT_MAX_ORIGINS",
              "paramname": "originsOut"
            }
          ],
          "methodname": "GetDigitalActionOrigins",
          "flat_name": "SteamAPI_ISteamInput_GetDigitalActionOrigins"
        },
        {
          "returntype": "InputAnalogActionHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionName"
            }
          ],
          "methodname": "GetAnalogActionHandle",
          "flat_name": "SteamAPI_ISteamInput_GetAnalogActionHandle"
        },
        {
          "returntype": "InputAnalogActionData_t",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputAnalogActionHandle_t",
              "paramname": "analogActionHandle"
            }
          ],
          "methodname": "GetAnalogActionData",
          "flat_name": "SteamAPI_ISteamInput_GetAnalogActionData"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputActionSetHandle_t",
              "paramname": "actionSetHandle"
            },
            {
              "paramtype": "InputAnalogActionHandle_t",
              "paramname": "analogActionHandle"
            },
            {
              "paramtype": "EInputActionOrigin *",
              "desc": "Receives list of action origins",
              "out_array_count": "STEAM_INPUT_MAX_ORIGINS",
              "paramname": "originsOut"
            }
          ],
          "methodname": "GetAnalogActionOrigins",
          "flat_name": "SteamAPI_ISteamInput_GetAnalogActionOrigins"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EInputActionOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetGlyphForActionOrigin",
          "flat_name": "SteamAPI_ISteamInput_GetGlyphForActionOrigin"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EInputActionOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetStringForActionOrigin",
          "flat_name": "SteamAPI_ISteamInput_GetStringForActionOrigin"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "InputAnalogActionHandle_t",
              "paramname": "eAction"
            }
          ],
          "methodname": "StopAnalogActionMomentum",
          "flat_name": "SteamAPI_ISteamInput_StopAnalogActionMomentum"
        },
        {
          "returntype": "InputMotionData_t",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "GetMotionData",
          "flat_name": "SteamAPI_ISteamInput_GetMotionData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usLeftSpeed"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usRightSpeed"
            }
          ],
          "methodname": "TriggerVibration",
          "flat_name": "SteamAPI_ISteamInput_TriggerVibration"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorR"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorG"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorB"
            },
            {
              "paramtype": "unsigned int",
              "paramname": "nFlags"
            }
          ],
          "methodname": "SetLEDColor",
          "flat_name": "SteamAPI_ISteamInput_SetLEDColor"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "ESteamControllerPad",
              "paramname": "eTargetPad"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usDurationMicroSec"
            }
          ],
          "methodname": "TriggerHapticPulse",
          "flat_name": "SteamAPI_ISteamInput_TriggerHapticPulse"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "ESteamControllerPad",
              "paramname": "eTargetPad"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usDurationMicroSec"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usOffMicroSec"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "unRepeat"
            },
            {
              "paramtype": "unsigned int",
              "paramname": "nFlags"
            }
          ],
          "methodname": "TriggerRepeatedHapticPulse",
          "flat_name": "SteamAPI_ISteamInput_TriggerRepeatedHapticPulse"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "ShowBindingPanel",
          "flat_name": "SteamAPI_ISteamInput_ShowBindingPanel"
        },
        {
          "returntype": "ESteamInputType",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "GetInputTypeForHandle",
          "flat_name": "SteamAPI_ISteamInput_GetInputTypeForHandle"
        },
        {
          "returntype": "InputHandle_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nIndex"
            }
          ],
          "methodname": "GetControllerForGamepadIndex",
          "flat_name": "SteamAPI_ISteamInput_GetControllerForGamepadIndex"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "ulinputHandle"
            }
          ],
          "methodname": "GetGamepadIndexForController",
          "flat_name": "SteamAPI_ISteamInput_GetGamepadIndexForController"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetStringForXboxOrigin",
          "flat_name": "SteamAPI_ISteamInput_GetStringForXboxOrigin"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetGlyphForXboxOrigin",
          "flat_name": "SteamAPI_ISteamInput_GetGlyphForXboxOrigin"
        },
        {
          "returntype": "EInputActionOrigin",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetActionOriginFromXboxOrigin",
          "flat_name": "SteamAPI_ISteamInput_GetActionOriginFromXboxOrigin"
        },
        {
          "returntype": "EInputActionOrigin",
          "params": [
            {
              "paramtype": "ESteamInputType",
              "paramname": "eDestinationInputType"
            },
            {
              "paramtype": "EInputActionOrigin",
              "paramname": "eSourceOrigin"
            }
          ],
          "methodname": "TranslateActionOrigin",
          "flat_name": "SteamAPI_ISteamInput_TranslateActionOrigin"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            },
            {
              "paramtype": "int *",
              "paramname": "pMajor"
            },
            {
              "paramtype": "int *",
              "paramname": "pMinor"
            }
          ],
          "methodname": "GetDeviceBindingRevision",
          "flat_name": "SteamAPI_ISteamInput_GetDeviceBindingRevision"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "InputHandle_t",
              "paramname": "inputHandle"
            }
          ],
          "methodname": "GetRemotePlaySessionID",
          "flat_name": "SteamAPI_ISteamInput_GetRemotePlaySessionID"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamInput_v001",
          "kind": "user",
          "name": "SteamInput"
        }
      ]
    },
    {
      "classname": "ISteamController",
      "version_string": "SteamController007",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Init",
          "flat_name": "SteamAPI_ISteamController_Init"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Shutdown",
          "flat_name": "SteamAPI_ISteamController_Shutdown"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RunFrame",
          "flat_name": "SteamAPI_ISteamController_RunFrame"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "ControllerHandle_t *",
              "desc": "Receives list of connected controllers",
              "out_array_count": "STEAM_CONTROLLER_MAX_COUNT",
              "paramname": "handlesOut"
            }
          ],
          "methodname": "GetConnectedControllers",
          "flat_name": "SteamAPI_ISteamController_GetConnectedControllers"
        },
        {
          "returntype": "ControllerActionSetHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionSetName"
            }
          ],
          "methodname": "GetActionSetHandle",
          "flat_name": "SteamAPI_ISteamController_GetActionSetHandle"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t",
              "paramname": "actionSetHandle"
            }
          ],
          "methodname": "ActivateActionSet",
          "flat_name": "SteamAPI_ISteamController_ActivateActionSet"
        },
        {
          "returntype": "ControllerActionSetHandle_t",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            }
          ],
          "methodname": "GetCurrentActionSet",
          "flat_name": "SteamAPI_ISteamController_GetCurrentActionSet"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t",
              "paramname": "actionSetLayerHandle"
            }
          ],
          "methodname": "ActivateActionSetLayer",
          "flat_name": "SteamAPI_ISteamController_ActivateActionSetLayer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t",
              "paramname": "actionSetLayerHandle"
            }
          ],
          "methodname": "DeactivateActionSetLayer",
          "flat_name": "SteamAPI_ISteamController_DeactivateActionSetLayer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            }
          ],
          "methodname": "DeactivateAllActionSetLayers",
          "flat_name": "SteamAPI_ISteamController_DeactivateAllActionSetLayers"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t *",
              "desc": "Receives list of active layers",
              "out_array_count": "STEAM_CONTROLLER_MAX_ACTIVE_LAYERS",
              "paramname": "handlesOut"
            }
          ],
          "methodname": "GetActiveActionSetLayers",
          "flat_name": "SteamAPI_ISteamController_GetActiveActionSetLayers"
        },
        {
          "returntype": "ControllerDigitalActionHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionName"
            }
          ],
          "methodname": "GetDigitalActionHandle",
          "flat_name": "SteamAPI_ISteamController_GetDigitalActionHandle"
        },
        {
          "returntype": "InputDigitalActionData_t",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerDigitalActionHandle_t",
              "paramname": "digitalActionHandle"
            }
          ],
          "methodname": "GetDigitalActionData",
          "flat_name": "SteamAPI_ISteamController_GetDigitalActionData"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t",
              "paramname": "actionSetHandle"
            },
            {
              "paramtype": "ControllerDigitalActionHandle_t",
              "paramname": "digitalActionHandle"
            },
            {
              "paramtype": "EControllerActionOrigin *",
              "desc": "Receives list of aciton origins",
              "out_array_count": "STEAM_CONTROLLER_MAX_ORIGINS",
              "paramname": "originsOut"
            }
          ],
          "methodname": "GetDigitalActionOrigins",
          "flat_name": "SteamAPI_ISteamController_GetDigitalActionOrigins"
        },
        {
          "returntype": "ControllerAnalogActionHandle_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszActionName"
            }
          ],
          "methodname": "GetAnalogActionHandle",
          "flat_name": "SteamAPI_ISteamController_GetAnalogActionHandle"
        },
        {
          "returntype": "InputAnalogActionData_t",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerAnalogActionHandle_t",
              "paramname": "analogActionHandle"
            }
          ],
          "methodname": "GetAnalogActionData",
          "flat_name": "SteamAPI_ISteamController_GetAnalogActionData"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerActionSetHandle_t",
              "paramname": "actionSetHandle"
            },
            {
              "paramtype": "ControllerAnalogActionHandle_t",
              "paramname": "analogActionHandle"
            },
            {
              "paramtype": "EControllerActionOrigin *",
              "desc": "Receives list of action origins",
              "out_array_count": "STEAM_CONTROLLER_MAX_ORIGINS",
              "paramname": "originsOut"
            }
          ],
          "methodname": "GetAnalogActionOrigins",
          "flat_name": "SteamAPI_ISteamController_GetAnalogActionOrigins"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EControllerActionOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetGlyphForActionOrigin",
          "flat_name": "SteamAPI_ISteamController_GetGlyphForActionOrigin"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EControllerActionOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetStringForActionOrigin",
          "flat_name": "SteamAPI_ISteamController_GetStringForActionOrigin"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ControllerAnalogActionHandle_t",
              "paramname": "eAction"
            }
          ],
          "methodname": "StopAnalogActionMomentum",
          "flat_name": "SteamAPI_ISteamController_StopAnalogActionMomentum"
        },
        {
          "returntype": "InputMotionData_t",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            }
          ],
          "methodname": "GetMotionData",
          "flat_name": "SteamAPI_ISteamController_GetMotionData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ESteamControllerPad",
              "paramname": "eTargetPad"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usDurationMicroSec"
            }
          ],
          "methodname": "TriggerHapticPulse",
          "flat_name": "SteamAPI_ISteamController_TriggerHapticPulse"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "ESteamControllerPad",
              "paramname": "eTargetPad"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usDurationMicroSec"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usOffMicroSec"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "unRepeat"
            },
            {
              "paramtype": "unsigned int",
              "paramname": "nFlags"
            }
          ],
          "methodname": "TriggerRepeatedHapticPulse",
          "flat_name": "SteamAPI_ISteamController_TriggerRepeatedHapticPulse"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usLeftSpeed"
            },
            {
              "paramtype": "unsigned short",
              "paramname": "usRightSpeed"
            }
          ],
          "methodname": "TriggerVibration",
          "flat_name": "SteamAPI_ISteamController_TriggerVibration"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorR"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorG"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorB"
            },
            {
              "paramtype": "unsigned int",
              "paramname": "nFlags"
            }
          ],
          "methodname": "SetLEDColor",
          "flat_name": "SteamAPI_ISteamController_SetLEDColor"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            }
          ],
          "methodname": "ShowBindingPanel",
          "flat_name": "SteamAPI_ISteamController_ShowBindingPanel"
        },
        {
          "returntype": "ESteamInputType",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            }
          ],
          "methodname": "GetInputTypeForHandle",
          "flat_name": "SteamAPI_ISteamController_GetInputTypeForHandle"
        },
        {
          "returntype": "ControllerHandle_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nIndex"
            }
          ],
          "methodname": "GetControllerForGamepadIndex",
          "flat_name": "SteamAPI_ISteamController_GetControllerForGamepadIndex"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "ulControllerHandle"
            }
          ],
          "methodname": "GetGamepadIndexForController",
          "flat_name": "SteamAPI_ISteamController_GetGamepadIndexForController"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetStringForXboxOrigin",
          "flat_name": "SteamAPI_ISteamController_GetStringForXboxOrigin"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetGlyphForXboxOrigin",
          "flat_name": "SteamAPI_ISteamController_GetGlyphForXboxOrigin"
        },
        {
          "returntype": "EControllerActionOrigin",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "EXboxOrigin",
              "paramname": "eOrigin"
            }
          ],
          "methodname": "GetActionOriginFromXboxOrigin",
          "flat_name": "SteamAPI_ISteamController_GetActionOriginFromXboxOrigin"
        },
        {
          "returntype": "EControllerActionOrigin",
          "params": [
            {
              "paramtype": "ESteamInputType",
              "paramname": "eDestinationInputType"
            },
            {
              "paramtype": "EControllerActionOrigin",
              "paramname": "eSourceOrigin"
            }
          ],
          "methodname": "TranslateActionOrigin",
          "flat_name": "SteamAPI_ISteamController_TranslateActionOrigin"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ControllerHandle_t",
              "paramname": "controllerHandle"
            },
            {
              "paramtype": "int *",
              "paramname": "pMajor"
            },
            {
              "paramtype": "int *",
              "paramname": "pMinor"
            }
          ],
          "methodname": "GetControllerBindingRevision",
          "flat_name": "SteamAPI_ISteamController_GetControllerBindingRevision"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamController_v007",
          "kind": "user",
          "name": "SteamController"
        }
      ]
    },
    {
      "classname": "ISteamUGC",
      "version_string": "STEAMUGC_INTERFACE_VERSION014",
      "methods": [
        {
          "returntype": "UGCQueryHandle_t",
          "params": [
            {
              "paramtype": "AccountID_t",
              "paramname": "unAccountID"
            },
            {
              "paramtype": "EUserUGCList",
              "paramname": "eListType"
            },
            {
              "paramtype": "EUGCMatchingUGCType",
              "paramname": "eMatchingUGCType"
            },
            {
              "paramtype": "EUserUGCListSortOrder",
              "paramname": "eSortOrder"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nCreatorAppID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unPage"
            }
          ],
          "methodname": "CreateQueryUserUGCRequest",
          "flat_name": "SteamAPI_ISteamUGC_CreateQueryUserUGCRequest"
        },
        {
          "returntype": "UGCQueryHandle_t",
          "params": [
            {
              "paramtype": "EUGCQuery",
              "paramname": "eQueryType"
            },
            {
              "paramtype": "EUGCMatchingUGCType",
              "paramname": "eMatchingeMatchingUGCTypeFileType"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nCreatorAppID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unPage"
            }
          ],
          "methodname": "CreateQueryAllUGCRequest",
          "flat_name": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequest"
        },
        {
          "returntype": "UGCQueryHandle_t",
          "params": [
            {
              "paramtype": "EUGCQuery",
              "paramname": "eQueryType"
            },
            {
              "paramtype": "EUGCMatchingUGCType",
              "paramname": "eMatchingeMatchingUGCTypeFileType"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nCreatorAppID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchCursor"
            }
          ],
          "methodname": "CreateQueryAllUGCRequest",
          "flat_name": "SteamAPI_ISteamUGC_CreateQueryAllUGCRequest"
        },
        {
          "returntype": "UGCQueryHandle_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t *",
              "paramname": "pvecPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unNumPublishedFileIDs"
            }
          ],
          "methodname": "CreateQueryUGCDetailsRequest",
          "flat_name": "SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            }
          ],
          "callresult": "SteamUGCQueryCompleted_t",
          "methodname": "SendQueryUGCRequest",
          "flat_name": "SteamAPI_ISteamUGC_SendQueryUGCRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "SteamUGCDetails_t *",
              "paramname": "pDetails"
            }
          ],
          "methodname": "GetQueryUGCResult",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCResult"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "out_string_count": "cchURLSize",
              "paramtype": "char *",
              "paramname": "pchURL"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchURLSize"
            }
          ],
          "methodname": "GetQueryUGCPreviewURL",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCPreviewURL"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "out_string_count": "cchMetadatasize",
              "paramtype": "char *",
              "paramname": "pchMetadata"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchMetadatasize"
            }
          ],
          "methodname": "GetQueryUGCMetadata",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCMetadata"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "PublishedFileId_t *",
              "paramname": "pvecPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "cMaxEntries"
            }
          ],
          "methodname": "GetQueryUGCChildren",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCChildren"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "EItemStatistic",
              "paramname": "eStatType"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "pStatValue"
            }
          ],
          "methodname": "GetQueryUGCStatistic",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCStatistic"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            }
          ],
          "methodname": "GetQueryUGCNumAdditionalPreviews",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "uint32",
              "paramname": "previewIndex"
            },
            {
              "out_string_count": "cchURLSize",
              "paramtype": "char *",
              "paramname": "pchURLOrVideoID"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchURLSize"
            },
            {
              "out_string_count": "cchURLSize",
              "paramtype": "char *",
              "paramname": "pchOriginalFileName"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchOriginalFileNameSize"
            },
            {
              "paramtype": "EItemPreviewType *",
              "paramname": "pPreviewType"
            }
          ],
          "methodname": "GetQueryUGCAdditionalPreview",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCAdditionalPreview"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            }
          ],
          "methodname": "GetQueryUGCNumKeyValueTags",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "uint32",
              "paramname": "keyValueTagIndex"
            },
            {
              "out_string_count": "cchKeySize",
              "paramtype": "char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchKeySize"
            },
            {
              "out_string_count": "cchValueSize",
              "paramtype": "char *",
              "paramname": "pchValue"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchValueSize"
            }
          ],
          "methodname": "GetQueryUGCKeyValueTag",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "out_string_count": "cchValueSize",
              "paramtype": "char *",
              "paramname": "pchValue"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchValueSize"
            }
          ],
          "methodname": "GetQueryUGCKeyValueTag",
          "flat_name": "SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            }
          ],
          "methodname": "ReleaseQueryUGCRequest",
          "flat_name": "SteamAPI_ISteamUGC_ReleaseQueryUGCRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pTagName"
            }
          ],
          "methodname": "AddRequiredTag",
          "flat_name": "SteamAPI_ISteamUGC_AddRequiredTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const SteamParamStringArray_t *",
              "paramname": "pTagGroups"
            }
          ],
          "methodname": "AddRequiredTagGroup",
          "flat_name": "SteamAPI_ISteamUGC_AddRequiredTagGroup"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pTagName"
            }
          ],
          "methodname": "AddExcludedTag",
          "flat_name": "SteamAPI_ISteamUGC_AddExcludedTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnOnlyIDs"
            }
          ],
          "methodname": "SetReturnOnlyIDs",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnOnlyIDs"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnKeyValueTags"
            }
          ],
          "methodname": "SetReturnKeyValueTags",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnKeyValueTags"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnLongDescription"
            }
          ],
          "methodname": "SetReturnLongDescription",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnLongDescription"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnMetadata"
            }
          ],
          "methodname": "SetReturnMetadata",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnMetadata"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnChildren"
            }
          ],
          "methodname": "SetReturnChildren",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnChildren"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnAdditionalPreviews"
            }
          ],
          "methodname": "SetReturnAdditionalPreviews",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnAdditionalPreviews"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bReturnTotalOnly"
            }
          ],
          "methodname": "SetReturnTotalOnly",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnTotalOnly"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "unDays"
            }
          ],
          "methodname": "SetReturnPlaytimeStats",
          "flat_name": "SteamAPI_ISteamUGC_SetReturnPlaytimeStats"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchLanguage"
            }
          ],
          "methodname": "SetLanguage",
          "flat_name": "SteamAPI_ISteamUGC_SetLanguage"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "unMaxAgeSeconds"
            }
          ],
          "methodname": "SetAllowCachedResponse",
          "flat_name": "SteamAPI_ISteamUGC_SetAllowCachedResponse"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pMatchCloudFileName"
            }
          ],
          "methodname": "SetCloudFileNameFilter",
          "flat_name": "SteamAPI_ISteamUGC_SetCloudFileNameFilter"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bMatchAnyTag"
            }
          ],
          "methodname": "SetMatchAnyTag",
          "flat_name": "SteamAPI_ISteamUGC_SetMatchAnyTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pSearchText"
            }
          ],
          "methodname": "SetSearchText",
          "flat_name": "SteamAPI_ISteamUGC_SetSearchText"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "unDays"
            }
          ],
          "methodname": "SetRankedByTrendDays",
          "flat_name": "SteamAPI_ISteamUGC_SetRankedByTrendDays"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCQueryHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pValue"
            }
          ],
          "methodname": "AddRequiredKeyValueTag",
          "flat_name": "SteamAPI_ISteamUGC_AddRequiredKeyValueTag"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unMaxAgeSeconds"
            }
          ],
          "callresult": "SteamUGCQueryCompleted_t",
          "methodname": "RequestUGCDetails",
          "flat_name": "SteamAPI_ISteamUGC_RequestUGCDetails"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppId"
            },
            {
              "paramtype": "EWorkshopFileType",
              "paramname": "eFileType"
            }
          ],
          "callresult": "CreateItemResult_t",
          "methodname": "CreateItem",
          "flat_name": "SteamAPI_ISteamUGC_CreateItem"
        },
        {
          "returntype": "UGCUpdateHandle_t",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nConsumerAppId"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "methodname": "StartItemUpdate",
          "flat_name": "SteamAPI_ISteamUGC_StartItemUpdate"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchTitle"
            }
          ],
          "methodname": "SetItemTitle",
          "flat_name": "SteamAPI_ISteamUGC_SetItemTitle"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchDescription"
            }
          ],
          "methodname": "SetItemDescription",
          "flat_name": "SteamAPI_ISteamUGC_SetItemDescription"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchLanguage"
            }
          ],
          "methodname": "SetItemUpdateLanguage",
          "flat_name": "SteamAPI_ISteamUGC_SetItemUpdateLanguage"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchMetaData"
            }
          ],
          "methodname": "SetItemMetadata",
          "flat_name": "SteamAPI_ISteamUGC_SetItemMetadata"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "ERemoteStoragePublishedFileVisibility",
              "paramname": "eVisibility"
            }
          ],
          "methodname": "SetItemVisibility",
          "flat_name": "SteamAPI_ISteamUGC_SetItemVisibility"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "updateHandle"
            },
            {
              "paramtype": "const SteamParamStringArray_t *",
              "paramname": "pTags"
            }
          ],
          "methodname": "SetItemTags",
          "flat_name": "SteamAPI_ISteamUGC_SetItemTags"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszContentFolder"
            }
          ],
          "methodname": "SetItemContent",
          "flat_name": "SteamAPI_ISteamUGC_SetItemContent"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszPreviewFile"
            }
          ],
          "methodname": "SetItemPreview",
          "flat_name": "SteamAPI_ISteamUGC_SetItemPreview"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "bool",
              "paramname": "bAllowLegacyUpload"
            }
          ],
          "methodname": "SetAllowLegacyUpload",
          "flat_name": "SteamAPI_ISteamUGC_SetAllowLegacyUpload"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            }
          ],
          "methodname": "RemoveAllItemKeyValueTags",
          "flat_name": "SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "RemoveItemKeyValueTags",
          "flat_name": "SteamAPI_ISteamUGC_RemoveItemKeyValueTags"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "AddItemKeyValueTag",
          "flat_name": "SteamAPI_ISteamUGC_AddItemKeyValueTag"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszPreviewFile"
            },
            {
              "paramtype": "EItemPreviewType",
              "paramname": "type"
            }
          ],
          "methodname": "AddItemPreviewFile",
          "flat_name": "SteamAPI_ISteamUGC_AddItemPreviewFile"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszVideoID"
            }
          ],
          "methodname": "AddItemPreviewVideo",
          "flat_name": "SteamAPI_ISteamUGC_AddItemPreviewVideo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszPreviewFile"
            }
          ],
          "methodname": "UpdateItemPreviewFile",
          "flat_name": "SteamAPI_ISteamUGC_UpdateItemPreviewFile"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszVideoID"
            }
          ],
          "methodname": "UpdateItemPreviewVideo",
          "flat_name": "SteamAPI_ISteamUGC_UpdateItemPreviewVideo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint32",
              "paramname": "index"
            }
          ],
          "methodname": "RemoveItemPreview",
          "flat_name": "SteamAPI_ISteamUGC_RemoveItemPreview"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchChangeNote"
            }
          ],
          "callresult": "SubmitItemUpdateResult_t",
          "methodname": "SubmitItemUpdate",
          "flat_name": "SteamAPI_ISteamUGC_SubmitItemUpdate"
        },
        {
          "returntype": "EItemUpdateStatus",
          "params": [
            {
              "paramtype": "UGCUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesProcessed"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesTotal"
            }
          ],
          "methodname": "GetItemUpdateProgress",
          "flat_name": "SteamAPI_ISteamUGC_GetItemUpdateProgress"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "bool",
              "paramname": "bVoteUp"
            }
          ],
          "callresult": "SetUserItemVoteResult_t",
          "methodname": "SetUserItemVote",
          "flat_name": "SteamAPI_ISteamUGC_SetUserItemVote"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "GetUserItemVoteResult_t",
          "methodname": "GetUserItemVote",
          "flat_name": "SteamAPI_ISteamUGC_GetUserItemVote"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppId"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "UserFavoriteItemsListChanged_t",
          "methodname": "AddItemToFavorites",
          "flat_name": "SteamAPI_ISteamUGC_AddItemToFavorites"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppId"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "UserFavoriteItemsListChanged_t",
          "methodname": "RemoveItemFromFavorites",
          "flat_name": "SteamAPI_ISteamUGC_RemoveItemFromFavorites"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "RemoteStorageSubscribePublishedFileResult_t",
          "methodname": "SubscribeItem",
          "flat_name": "SteamAPI_ISteamUGC_SubscribeItem"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "RemoteStorageUnsubscribePublishedFileResult_t",
          "methodname": "UnsubscribeItem",
          "flat_name": "SteamAPI_ISteamUGC_UnsubscribeItem"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetNumSubscribedItems",
          "flat_name": "SteamAPI_ISteamUGC_GetNumSubscribedItems"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "PublishedFileId_t *",
              "paramname": "pvecPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "cMaxEntries"
            }
          ],
          "methodname": "GetSubscribedItems",
          "flat_name": "SteamAPI_ISteamUGC_GetSubscribedItems"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "methodname": "GetItemState",
          "flat_name": "SteamAPI_ISteamUGC_GetItemState"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punSizeOnDisk"
            },
            {
              "out_string_count": "cchFolderSize",
              "paramtype": "char *",
              "paramname": "pchFolder"
            },
            {
              "paramtype": "uint32",
              "paramname": "cchFolderSize"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punTimeStamp"
            }
          ],
          "methodname": "GetItemInstallInfo",
          "flat_name": "SteamAPI_ISteamUGC_GetItemInstallInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesDownloaded"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "punBytesTotal"
            }
          ],
          "methodname": "GetItemDownloadInfo",
          "flat_name": "SteamAPI_ISteamUGC_GetItemDownloadInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "bool",
              "paramname": "bHighPriority"
            }
          ],
          "methodname": "DownloadItem",
          "flat_name": "SteamAPI_ISteamUGC_DownloadItem"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "DepotId_t",
              "paramname": "unWorkshopDepotID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszFolder"
            }
          ],
          "methodname": "BInitWorkshopForGameServer",
          "flat_name": "SteamAPI_ISteamUGC_BInitWorkshopForGameServer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bSuspend"
            }
          ],
          "methodname": "SuspendDownloads",
          "flat_name": "SteamAPI_ISteamUGC_SuspendDownloads"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t *",
              "paramname": "pvecPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unNumPublishedFileIDs"
            }
          ],
          "callresult": "StartPlaytimeTrackingResult_t",
          "methodname": "StartPlaytimeTracking",
          "flat_name": "SteamAPI_ISteamUGC_StartPlaytimeTracking"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t *",
              "paramname": "pvecPublishedFileID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unNumPublishedFileIDs"
            }
          ],
          "callresult": "StopPlaytimeTrackingResult_t",
          "methodname": "StopPlaytimeTracking",
          "flat_name": "SteamAPI_ISteamUGC_StopPlaytimeTracking"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "StopPlaytimeTrackingResult_t",
          "methodname": "StopPlaytimeTrackingForAllItems",
          "flat_name": "SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nParentPublishedFileID"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nChildPublishedFileID"
            }
          ],
          "callresult": "AddUGCDependencyResult_t",
          "methodname": "AddDependency",
          "flat_name": "SteamAPI_ISteamUGC_AddDependency"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nParentPublishedFileID"
            },
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nChildPublishedFileID"
            }
          ],
          "callresult": "RemoveUGCDependencyResult_t",
          "methodname": "RemoveDependency",
          "flat_name": "SteamAPI_ISteamUGC_RemoveDependency"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "callresult": "AddAppDependencyResult_t",
          "methodname": "AddAppDependency",
          "flat_name": "SteamAPI_ISteamUGC_AddAppDependency"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "callresult": "RemoveAppDependencyResult_t",
          "methodname": "RemoveAppDependency",
          "flat_name": "SteamAPI_ISteamUGC_RemoveAppDependency"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "GetAppDependenciesResult_t",
          "methodname": "GetAppDependencies",
          "flat_name": "SteamAPI_ISteamUGC_GetAppDependencies"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "PublishedFileId_t",
              "paramname": "nPublishedFileID"
            }
          ],
          "callresult": "DeleteItemResult_t",
          "methodname": "DeleteItem",
          "flat_name": "SteamAPI_ISteamUGC_DeleteItem"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamUGC_v014",
          "kind": "user",
          "name": "SteamUGC"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerUGC_v014",
          "kind": "gameserver",
          "name": "SteamGameServerUGC"
        }
      ]
    },
    {
      "classname": "ISteamAppList",
      "version_string": "STEAMAPPLIST_INTERFACE_VERSION001",
      "methods": [
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetNumInstalledApps",
          "flat_name": "SteamAPI_ISteamAppList_GetNumInstalledApps"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "AppId_t *",
              "paramname": "pvecAppID"
            },
            {
              "paramtype": "uint32",
              "paramname": "unMaxAppIDs"
            }
          ],
          "methodname": "GetInstalledApps",
          "flat_name": "SteamAPI_ISteamAppList_GetInstalledApps"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "char *",
              "out_string": "",
              "paramname": "pchName"
            },
            {
              "paramtype": "int",
              "paramname": "cchNameMax"
            }
          ],
          "methodname": "GetAppName",
          "flat_name": "SteamAPI_ISteamAppList_GetAppName"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            },
            {
              "paramtype": "char *",
              "paramname": "pchDirectory"
            },
            {
              "paramtype": "int",
              "paramname": "cchNameMax"
            }
          ],
          "methodname": "GetAppInstallDir",
          "flat_name": "SteamAPI_ISteamAppList_GetAppInstallDir"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "GetAppBuildId",
          "flat_name": "SteamAPI_ISteamAppList_GetAppBuildId"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamAppList_v001",
          "kind": "user",
          "name": "SteamAppList"
        }
      ]
    },
    {
      "classname": "ISteamHTMLSurface",
      "version_string": "STEAMHTMLSURFACE_INTERFACE_VERSION_005",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Init",
          "flat_name": "SteamAPI_ISteamHTMLSurface_Init"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "Shutdown",
          "flat_name": "SteamAPI_ISteamHTMLSurface_Shutdown"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchUserAgent"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchUserCSS"
            }
          ],
          "callresult": "HTML_BrowserReady_t",
          "methodname": "CreateBrowser",
          "flat_name": "SteamAPI_ISteamHTMLSurface_CreateBrowser"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "RemoveBrowser",
          "flat_name": "SteamAPI_ISteamHTMLSurface_RemoveBrowser"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchURL"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPostData"
            }
          ],
          "methodname": "LoadURL",
          "flat_name": "SteamAPI_ISteamHTMLSurface_LoadURL"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "unWidth"
            },
            {
              "paramtype": "uint32",
              "paramname": "unHeight"
            }
          ],
          "methodname": "SetSize",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetSize"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "StopLoad",
          "flat_name": "SteamAPI_ISteamHTMLSurface_StopLoad"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "Reload",
          "flat_name": "SteamAPI_ISteamHTMLSurface_Reload"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "GoBack",
          "flat_name": "SteamAPI_ISteamHTMLSurface_GoBack"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "GoForward",
          "flat_name": "SteamAPI_ISteamHTMLSurface_GoForward"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "AddHeader",
          "flat_name": "SteamAPI_ISteamHTMLSurface_AddHeader"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchScript"
            }
          ],
          "methodname": "ExecuteJavascript",
          "flat_name": "SteamAPI_ISteamHTMLSurface_ExecuteJavascript"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLMouseButton",
              "paramname": "eMouseButton"
            }
          ],
          "methodname": "MouseUp",
          "flat_name": "SteamAPI_ISteamHTMLSurface_MouseUp"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLMouseButton",
              "paramname": "eMouseButton"
            }
          ],
          "methodname": "MouseDown",
          "flat_name": "SteamAPI_ISteamHTMLSurface_MouseDown"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLMouseButton",
              "paramname": "eMouseButton"
            }
          ],
          "methodname": "MouseDoubleClick",
          "flat_name": "SteamAPI_ISteamHTMLSurface_MouseDoubleClick"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "int",
              "paramname": "x"
            },
            {
              "paramtype": "int",
              "paramname": "y"
            }
          ],
          "methodname": "MouseMove",
          "flat_name": "SteamAPI_ISteamHTMLSurface_MouseMove"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "int32",
              "paramname": "nDelta"
            }
          ],
          "methodname": "MouseWheel",
          "flat_name": "SteamAPI_ISteamHTMLSurface_MouseWheel"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "nNativeKeyCode"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLKeyModifiers",
              "paramname": "eHTMLKeyModifiers"
            },
            {
              "paramtype": "bool",
              "paramname": "bIsSystemKey"
            }
          ],
          "methodname": "KeyDown",
          "flat_name": "SteamAPI_ISteamHTMLSurface_KeyDown"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "nNativeKeyCode"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLKeyModifiers",
              "paramname": "eHTMLKeyModifiers"
            }
          ],
          "methodname": "KeyUp",
          "flat_name": "SteamAPI_ISteamHTMLSurface_KeyUp"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "cUnicodeChar"
            },
            {
              "paramtype": "ISteamHTMLSurface::EHTMLKeyModifiers",
              "paramname": "eHTMLKeyModifiers"
            }
          ],
          "methodname": "KeyChar",
          "flat_name": "SteamAPI_ISteamHTMLSurface_KeyChar"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "nAbsolutePixelScroll"
            }
          ],
          "methodname": "SetHorizontalScroll",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetHorizontalScroll"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "nAbsolutePixelScroll"
            }
          ],
          "methodname": "SetVerticalScroll",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetVerticalScroll"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "bool",
              "paramname": "bHasKeyFocus"
            }
          ],
          "methodname": "SetKeyFocus",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetKeyFocus"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "ViewSource",
          "flat_name": "SteamAPI_ISteamHTMLSurface_ViewSource"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "CopyToClipboard",
          "flat_name": "SteamAPI_ISteamHTMLSurface_CopyToClipboard"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "PasteFromClipboard",
          "flat_name": "SteamAPI_ISteamHTMLSurface_PasteFromClipboard"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchSearchStr"
            },
            {
              "paramtype": "bool",
              "paramname": "bCurrentlyInFind"
            },
            {
              "paramtype": "bool",
              "paramname": "bReverse"
            }
          ],
          "methodname": "Find",
          "flat_name": "SteamAPI_ISteamHTMLSurface_Find"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "StopFind",
          "flat_name": "SteamAPI_ISteamHTMLSurface_StopFind"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "int",
              "paramname": "x"
            },
            {
              "paramtype": "int",
              "paramname": "y"
            }
          ],
          "methodname": "GetLinkAtPosition",
          "flat_name": "SteamAPI_ISteamHTMLSurface_GetLinkAtPosition"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchHostname"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPath"
            },
            {
              "paramtype": "RTime32",
              "paramname": "nExpires"
            },
            {
              "paramtype": "bool",
              "paramname": "bSecure"
            },
            {
              "paramtype": "bool",
              "paramname": "bHTTPOnly"
            }
          ],
          "methodname": "SetCookie",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetCookie"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "float",
              "paramname": "flZoom"
            },
            {
              "paramtype": "int",
              "paramname": "nPointX"
            },
            {
              "paramtype": "int",
              "paramname": "nPointY"
            }
          ],
          "methodname": "SetPageScaleFactor",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetPageScaleFactor"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "bool",
              "paramname": "bBackgroundMode"
            }
          ],
          "methodname": "SetBackgroundMode",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetBackgroundMode"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "float",
              "paramname": "flDPIScaling"
            }
          ],
          "methodname": "SetDPIScalingFactor",
          "flat_name": "SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            }
          ],
          "methodname": "OpenDeveloperTools",
          "flat_name": "SteamAPI_ISteamHTMLSurface_OpenDeveloperTools"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "bool",
              "paramname": "bAllowed"
            }
          ],
          "methodname": "AllowStartRequest",
          "flat_name": "SteamAPI_ISteamHTMLSurface_AllowStartRequest"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "bool",
              "paramname": "bResult"
            }
          ],
          "methodname": "JSDialogResponse",
          "flat_name": "SteamAPI_ISteamHTMLSurface_JSDialogResponse"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HHTMLBrowser",
              "paramname": "unBrowserHandle"
            },
            {
              "paramtype": "const char **",
              "paramname": "pchSelectedFiles"
            }
          ],
          "ignore": null,
          "methodname": "FileLoadDialogResponse",
          "flat_name": "SteamAPI_ISteamHTMLSurface_FileLoadDialogResponse"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamHTMLSurface_v005",
          "kind": "user",
          "name": "SteamHTMLSurface"
        }
      ]
    },
    {
      "classname": "ISteamInventory",
      "version_string": "STEAMINVENTORY_INTERFACE_V003",
      "methods": [
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            }
          ],
          "desc": "Find out the status of an asynchronous inventory result handle.",
          "methodname": "GetResultStatus",
          "flat_name": "SteamAPI_ISteamInventory_GetResultStatus"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            },
            {
              "paramtype": "SteamItemDetails_t *",
              "desc": "Output array",
              "out_array_count": "punOutItemsArraySize",
              "paramname": "pOutItemsArray"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punOutItemsArraySize"
            }
          ],
          "desc": "Copies the contents of a result set into a flat array. The specific contents of the result set depend on which query which was used.",
          "methodname": "GetResultItems",
          "flat_name": "SteamAPI_ISteamInventory_GetResultItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            },
            {
              "paramtype": "uint32",
              "paramname": "unItemIndex"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "out_string_count": "punValueBufferSizeOut",
              "paramtype": "char *",
              "paramname": "pchValueBuffer"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punValueBufferSizeOut"
            }
          ],
          "methodname": "GetResultItemProperty",
          "flat_name": "SteamAPI_ISteamInventory_GetResultItemProperty"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            }
          ],
          "desc": "Returns the server time at which the result was generated. Compare against the value of IClientUtils::GetServerRealTime() to determine age.",
          "methodname": "GetResultTimestamp",
          "flat_name": "SteamAPI_ISteamInventory_GetResultTimestamp"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDExpected"
            }
          ],
          "desc": "Returns true if the result belongs to the target steam ID or false if the result does not. This is important when using DeserializeResult to verify that a remote player is not pretending to have a different users inventory.",
          "methodname": "CheckResultSteamID",
          "flat_name": "SteamAPI_ISteamInventory_CheckResultSteamID"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            }
          ],
          "desc": "Destroys a result handle and frees all associated memory.",
          "methodname": "DestroyResult",
          "flat_name": "SteamAPI_ISteamInventory_DestroyResult"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            }
          ],
          "desc": "Captures the entire state of the current users Steam inventory.",
          "methodname": "GetAllItems",
          "flat_name": "SteamAPI_ISteamInventory_GetAllItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "const SteamItemInstanceID_t *",
              "array_count": "unCountInstanceIDs",
              "paramname": "pInstanceIDs"
            },
            {
              "paramtype": "uint32",
              "paramname": "unCountInstanceIDs"
            }
          ],
          "desc": "Captures the state of a subset of the current users Steam inventory identified by an array of item instance IDs.",
          "methodname": "GetItemsByID",
          "flat_name": "SteamAPI_ISteamInventory_GetItemsByID"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t",
              "paramname": "resultHandle"
            },
            {
              "paramtype": "void *",
              "out_buffer_count": "punOutBufferSize",
              "paramname": "pOutBuffer"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punOutBufferSize"
            }
          ],
          "methodname": "SerializeResult",
          "flat_name": "SteamAPI_ISteamInventory_SerializeResult"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pOutResultHandle"
            },
            {
              "paramtype": "const void *",
              "buffer_count": "punOutBufferSize",
              "paramname": "pBuffer"
            },
            {
              "paramtype": "uint32",
              "paramname": "unBufferSize"
            },
            {
              "paramtype": "bool",
              "paramname": "bRESERVED_MUST_BE_FALSE"
            }
          ],
          "methodname": "DeserializeResult",
          "flat_name": "SteamAPI_ISteamInventory_DeserializeResult"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "const SteamItemDef_t *",
              "array_count": "unArrayLength",
              "paramname": "pArrayItemDefs"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "unArrayLength",
              "paramname": "punArrayQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayLength"
            }
          ],
          "methodname": "GenerateItems",
          "flat_name": "SteamAPI_ISteamInventory_GenerateItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            }
          ],
          "desc": "GrantPromoItems() checks the list of promotional items for which the user may be eligible and grants the items (one time only).",
          "methodname": "GrantPromoItems",
          "flat_name": "SteamAPI_ISteamInventory_GrantPromoItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "SteamItemDef_t",
              "paramname": "itemDef"
            }
          ],
          "methodname": "AddPromoItem",
          "flat_name": "SteamAPI_ISteamInventory_AddPromoItem"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "const SteamItemDef_t *",
              "array_count": "unArrayLength",
              "paramname": "pArrayItemDefs"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayLength"
            }
          ],
          "methodname": "AddPromoItems",
          "flat_name": "SteamAPI_ISteamInventory_AddPromoItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "itemConsume"
            },
            {
              "paramtype": "uint32",
              "paramname": "unQuantity"
            }
          ],
          "desc": "ConsumeItem() removes items from the inventory permanently.",
          "methodname": "ConsumeItem",
          "flat_name": "SteamAPI_ISteamInventory_ConsumeItem"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "const SteamItemDef_t *",
              "array_count": "unArrayGenerateLength",
              "paramname": "pArrayGenerate"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "unArrayGenerateLength",
              "paramname": "punArrayGenerateQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayGenerateLength"
            },
            {
              "paramtype": "const SteamItemInstanceID_t *",
              "array_count": "unArrayDestroyLength",
              "paramname": "pArrayDestroy"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "unArrayDestroyLength",
              "paramname": "punArrayDestroyQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayDestroyLength"
            }
          ],
          "methodname": "ExchangeItems",
          "flat_name": "SteamAPI_ISteamInventory_ExchangeItems"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "itemIdSource"
            },
            {
              "paramtype": "uint32",
              "paramname": "unQuantity"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "itemIdDest"
            }
          ],
          "methodname": "TransferItemQuantity",
          "flat_name": "SteamAPI_ISteamInventory_TransferItemQuantity"
        },
        {
          "returntype": "void",
          "params": [],
          "desc": "Deprecated method. Playtime accounting is performed on the Steam servers.",
          "methodname": "SendItemDropHeartbeat",
          "flat_name": "SteamAPI_ISteamInventory_SendItemDropHeartbeat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "SteamItemDef_t",
              "paramname": "dropListDefinition"
            }
          ],
          "desc": "Playtime credit must be consumed and turned into item drops by your game.",
          "methodname": "TriggerItemDrop",
          "flat_name": "SteamAPI_ISteamInventory_TriggerItemDrop"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDTradePartner"
            },
            {
              "paramtype": "const SteamItemInstanceID_t *",
              "array_count": "nArrayGiveLength",
              "paramname": "pArrayGive"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "nArrayGiveLength",
              "paramname": "pArrayGiveQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "nArrayGiveLength"
            },
            {
              "paramtype": "const SteamItemInstanceID_t *",
              "array_count": "nArrayGetLength",
              "paramname": "pArrayGet"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "nArrayGetLength",
              "paramname": "pArrayGetQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "nArrayGetLength"
            }
          ],
          "methodname": "TradeItems",
          "flat_name": "SteamAPI_ISteamInventory_TradeItems"
        },
        {
          "returntype": "bool",
          "params": [],
          "desc": "LoadItemDefinitions triggers the automatic load and refresh of item definitions.",
          "methodname": "LoadItemDefinitions",
          "flat_name": "SteamAPI_ISteamInventory_LoadItemDefinitions"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamItemDef_t *",
              "desc": "List of item definition IDs",
              "out_array_count": "punItemDefIDsArraySize",
              "paramname": "pItemDefIDs"
            },
            {
              "paramtype": "uint32 *",
              "desc": "Size of array is passed in and actual size used is returned in this param",
              "paramname": "punItemDefIDsArraySize"
            }
          ],
          "methodname": "GetItemDefinitionIDs",
          "flat_name": "SteamAPI_ISteamInventory_GetItemDefinitionIDs"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamItemDef_t",
              "paramname": "iDefinition"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "out_string_count": "punValueBufferSizeOut",
              "paramtype": "char *",
              "paramname": "pchValueBuffer"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "punValueBufferSizeOut"
            }
          ],
          "methodname": "GetItemDefinitionProperty",
          "flat_name": "SteamAPI_ISteamInventory_GetItemDefinitionProperty"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "callresult": "SteamInventoryEligiblePromoItemDefIDs_t",
          "methodname": "RequestEligiblePromoItemDefinitionsIDs",
          "flat_name": "SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            },
            {
              "paramtype": "SteamItemDef_t *",
              "desc": "List of item definition IDs",
              "out_array_count": "punItemDefIDsArraySize",
              "paramname": "pItemDefIDs"
            },
            {
              "paramtype": "uint32 *",
              "desc": "Size of array is passed in and actual size used is returned in this param",
              "paramname": "punItemDefIDsArraySize"
            }
          ],
          "methodname": "GetEligiblePromoItemDefinitionIDs",
          "flat_name": "SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "const SteamItemDef_t *",
              "array_count": "unArrayLength",
              "paramname": "pArrayItemDefs"
            },
            {
              "paramtype": "const uint32 *",
              "array_count": "unArrayLength",
              "paramname": "punArrayQuantity"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayLength"
            }
          ],
          "callresult": "SteamInventoryStartPurchaseResult_t",
          "methodname": "StartPurchase",
          "flat_name": "SteamAPI_ISteamInventory_StartPurchase"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "SteamInventoryRequestPricesResult_t",
          "methodname": "RequestPrices",
          "flat_name": "SteamAPI_ISteamInventory_RequestPrices"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetNumItemsWithPrices",
          "flat_name": "SteamAPI_ISteamInventory_GetNumItemsWithPrices"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamItemDef_t *",
              "desc": "Items with prices",
              "array_count": "unArrayLength",
              "out_array_count": "pArrayItemDefs",
              "paramname": "pArrayItemDefs"
            },
            {
              "paramtype": "uint64 *",
              "desc": "List of prices for the given item defs",
              "array_count": "unArrayLength",
              "out_array_count": "pPrices",
              "paramname": "pCurrentPrices"
            },
            {
              "paramtype": "uint64 *",
              "desc": "List of prices for the given item defs",
              "array_count": "unArrayLength",
              "out_array_count": "pPrices",
              "paramname": "pBasePrices"
            },
            {
              "paramtype": "uint32",
              "paramname": "unArrayLength"
            }
          ],
          "methodname": "GetItemsWithPrices",
          "flat_name": "SteamAPI_ISteamInventory_GetItemsWithPrices"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamItemDef_t",
              "paramname": "iDefinition"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "pCurrentPrice"
            },
            {
              "paramtype": "uint64 *",
              "paramname": "pBasePrice"
            }
          ],
          "methodname": "GetItemPrice",
          "flat_name": "SteamAPI_ISteamInventory_GetItemPrice"
        },
        {
          "returntype": "SteamInventoryUpdateHandle_t",
          "params": [],
          "methodname": "StartUpdateProperties",
          "flat_name": "SteamAPI_ISteamInventory_StartUpdateProperties"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "nItemID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            }
          ],
          "methodname": "RemoveProperty",
          "flat_name": "SteamAPI_ISteamInventory_RemoveProperty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "nItemID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyValue"
            }
          ],
          "methodname": "SetProperty",
          "flat_name": "SteamAPI_ISteamInventory_SetProperty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "nItemID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "paramtype": "bool",
              "paramname": "bValue"
            }
          ],
          "methodname": "SetProperty",
          "flat_name": "SteamAPI_ISteamInventory_SetProperty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "nItemID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "paramtype": "int64",
              "paramname": "nValue"
            }
          ],
          "methodname": "SetProperty",
          "flat_name": "SteamAPI_ISteamInventory_SetProperty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamItemInstanceID_t",
              "paramname": "nItemID"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPropertyName"
            },
            {
              "paramtype": "float",
              "paramname": "flValue"
            }
          ],
          "methodname": "SetProperty",
          "flat_name": "SteamAPI_ISteamInventory_SetProperty"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamInventoryUpdateHandle_t",
              "paramname": "handle"
            },
            {
              "paramtype": "SteamInventoryResult_t *",
              "paramname": "pResultHandle"
            }
          ],
          "methodname": "SubmitUpdateProperties",
          "flat_name": "SteamAPI_ISteamInventory_SubmitUpdateProperties"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamInventory_v003",
          "kind": "user",
          "name": "SteamInventory"
        },
        {
          "flat_name": "SteamAPI_SteamGameServerInventory_v003",
          "kind": "gameserver",
          "name": "SteamGameServerInventory"
        }
      ]
    },
    {
      "classname": "ISteamVideo",
      "version_string": "STEAMVIDEO_INTERFACE_V002",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "unVideoAppID"
            }
          ],
          "methodname": "GetVideoURL",
          "flat_name": "SteamAPI_ISteamVideo_GetVideoURL"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int *",
              "paramname": "pnNumViewers"
            }
          ],
          "methodname": "IsBroadcasting",
          "flat_name": "SteamAPI_ISteamVideo_IsBroadcasting"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "unVideoAppID"
            }
          ],
          "callback": "GetOPFSettingsResult_t",
          "methodname": "GetOPFSettings",
          "flat_name": "SteamAPI_ISteamVideo_GetOPFSettings"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "unVideoAppID"
            },
            {
              "paramtype": "char *",
              "paramname": "pchBuffer"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pnBufferSize"
            }
          ],
          "methodname": "GetOPFStringForApp",
          "flat_name": "SteamAPI_ISteamVideo_GetOPFStringForApp"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamVideo_v002",
          "kind": "user",
          "name": "SteamVideo"
        }
      ]
    },
    {
      "classname": "ISteamTV",
      "version_string": "STEAMTV_INTERFACE_V001",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int *",
              "paramname": "pnNumViewers"
            }
          ],
          "methodname": "IsBroadcasting",
          "flat_name": "SteamAPI_ISteamTV_IsBroadcasting"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchValue"
            }
          ],
          "methodname": "AddBroadcastGameData",
          "flat_name": "SteamAPI_ISteamTV_AddBroadcastGameData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchKey"
            }
          ],
          "methodname": "RemoveBroadcastGameData",
          "flat_name": "SteamAPI_ISteamTV_RemoveBroadcastGameData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchTemplateName"
            },
            {
              "paramtype": "bool",
              "paramname": "bPersistent"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorR"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorG"
            },
            {
              "paramtype": "uint8",
              "paramname": "nColorB"
            }
          ],
          "methodname": "AddTimelineMarker",
          "flat_name": "SteamAPI_ISteamTV_AddTimelineMarker"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "RemoveTimelineMarker",
          "flat_name": "SteamAPI_ISteamTV_RemoveTimelineMarker"
        },
        {
          "returntype": "uint32",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchElementName"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchTimelineDataSection"
            },
            {
              "paramtype": "const SteamTVRegion_t *",
              "paramname": "pSteamTVRegion"
            },
            {
              "paramtype": "ESteamTVRegionBehavior",
              "paramname": "eSteamTVRegionBehavior"
            }
          ],
          "methodname": "AddRegion",
          "flat_name": "SteamAPI_ISteamTV_AddRegion"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unRegionHandle"
            }
          ],
          "methodname": "RemoveRegion",
          "flat_name": "SteamAPI_ISteamTV_RemoveRegion"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamTV_v001",
          "kind": "user",
          "name": "SteamTV"
        }
      ]
    },
    {
      "classname": "ISteamParentalSettings",
      "version_string": "STEAMPARENTALSETTINGS_INTERFACE_VERSION001",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsParentalLockEnabled",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BIsParentalLockLocked",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsParentalLockLocked"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "BIsAppBlocked",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsAppBlocked"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "AppId_t",
              "paramname": "nAppID"
            }
          ],
          "methodname": "BIsAppInBlockList",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsAppInBlockList"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "EParentalFeature",
              "paramname": "eFeature"
            }
          ],
          "methodname": "BIsFeatureBlocked",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsFeatureBlocked"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "EParentalFeature",
              "paramname": "eFeature"
            }
          ],
          "methodname": "BIsFeatureInBlockList",
          "flat_name": "SteamAPI_ISteamParentalSettings_BIsFeatureInBlockList"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamParentalSettings_v001",
          "kind": "user",
          "name": "SteamParentalSettings"
        }
      ]
    },
    {
      "classname": "ISteamRemotePlay",
      "version_string": "STEAMREMOTEPLAY_INTERFACE_VERSION001",
      "methods": [
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetSessionCount",
          "flat_name": "SteamAPI_ISteamRemotePlay_GetSessionCount"
        },
        {
          "returntype": "RemotePlaySessionID_t",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iSessionIndex"
            }
          ],
          "methodname": "GetSessionID",
          "flat_name": "SteamAPI_ISteamRemotePlay_GetSessionID"
        },
        {
          "returntype": "CSteamID",
          "params": [
            {
              "paramtype": "RemotePlaySessionID_t",
              "paramname": "unSessionID"
            }
          ],
          "methodname": "GetSessionSteamID",
          "flat_name": "SteamAPI_ISteamRemotePlay_GetSessionSteamID"
        },
        {
          "returntype": "const char *",
          "params": [
            {
              "paramtype": "RemotePlaySessionID_t",
              "paramname": "unSessionID"
            }
          ],
          "methodname": "GetSessionClientName",
          "flat_name": "SteamAPI_ISteamRemotePlay_GetSessionClientName"
        },
        {
          "returntype": "ESteamDeviceFormFactor",
          "params": [
            {
              "paramtype": "RemotePlaySessionID_t",
              "paramname": "unSessionID"
            }
          ],
          "methodname": "GetSessionClientFormFactor",
          "flat_name": "SteamAPI_ISteamRemotePlay_GetSessionClientFormFactor"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "RemotePlaySessionID_t",
              "paramname": "unSessionID"
            },
            {
              "paramtype": "int *",
              "paramname": "pnResolutionX"
            },
            {
              "paramtype": "int *",
              "paramname": "pnResolutionY"
            }
          ],
          "methodname": "BGetSessionClientResolution",
          "flat_name": "SteamAPI_ISteamRemotePlay_BGetSessionClientResolution"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDFriend"
            }
          ],
          "methodname": "BSendRemotePlayTogetherInvite",
          "flat_name": "SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamRemotePlay_v001",
          "kind": "user",
          "name": "SteamRemotePlay"
        }
      ]
    },
    {
      "classname": "ISteamNetworkingSockets",
      "methods": [
        {
          "returntype": "HSteamListenSocket",
          "params": [
            {
              "paramtype": "const SteamNetworkingIPAddr &",
              "paramname": "localAddress"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "CreateListenSocketIP",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP"
        },
        {
          "returntype": "HSteamNetConnection",
          "params": [
            {
              "paramtype": "const SteamNetworkingIPAddr &",
              "paramname": "address"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "ConnectByIPAddress",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress"
        },
        {
          "returntype": "HSteamListenSocket",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "CreateListenSocketP2P",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P"
        },
        {
          "returntype": "HSteamNetConnection",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identityRemote"
            },
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "ConnectP2P",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ConnectP2P"
        },
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            }
          ],
          "methodname": "AcceptConnection",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_AcceptConnection"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hPeer"
            },
            {
              "paramtype": "int",
              "paramname": "nReason"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszDebug"
            },
            {
              "paramtype": "bool",
              "paramname": "bEnableLinger"
            }
          ],
          "methodname": "CloseConnection",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CloseConnection"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamListenSocket",
              "paramname": "hSocket"
            }
          ],
          "methodname": "CloseListenSocket",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CloseListenSocket"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hPeer"
            },
            {
              "paramtype": "int64",
              "paramname": "nUserData"
            }
          ],
          "methodname": "SetConnectionUserData",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SetConnectionUserData"
        },
        {
          "returntype": "int64",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hPeer"
            }
          ],
          "methodname": "GetConnectionUserData",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetConnectionUserData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hPeer"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszName"
            }
          ],
          "methodname": "SetConnectionName",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SetConnectionName"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hPeer"
            },
            {
              "paramtype": "char *",
              "paramname": "pszName"
            },
            {
              "paramtype": "int",
              "paramname": "nMaxLen"
            }
          ],
          "methodname": "GetConnectionName",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetConnectionName"
        },
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "const void *",
              "paramname": "pData"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbData"
            },
            {
              "paramtype": "int",
              "paramname": "nSendFlags"
            },
            {
              "paramtype": "int64 *",
              "paramname": "pOutMessageNumber"
            }
          ],
          "methodname": "SendMessageToConnection",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SendMessageToConnection"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nMessages"
            },
            {
              "paramtype": "SteamNetworkingMessage_t *const *",
              "paramname": "pMessages"
            },
            {
              "paramtype": "int64 *",
              "paramname": "pOutMessageNumberOrResult"
            }
          ],
          "methodname": "SendMessages",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SendMessages"
        },
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            }
          ],
          "methodname": "FlushMessagesOnConnection",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "SteamNetworkingMessage_t **",
              "paramname": "ppOutMessages"
            },
            {
              "paramtype": "int",
              "paramname": "nMaxMessages"
            }
          ],
          "methodname": "ReceiveMessagesOnConnection",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "SteamNetConnectionInfo_t *",
              "paramname": "pInfo"
            }
          ],
          "methodname": "GetConnectionInfo",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetConnectionInfo"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "SteamNetworkingQuickConnectionStatus *",
              "paramname": "pStats"
            }
          ],
          "methodname": "GetQuickConnectionStatus",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "char *",
              "paramname": "pszBuf"
            },
            {
              "paramtype": "int",
              "paramname": "cbBuf"
            }
          ],
          "methodname": "GetDetailedConnectionStatus",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamListenSocket",
              "paramname": "hSocket"
            },
            {
              "paramtype": "SteamNetworkingIPAddr *",
              "paramname": "address"
            }
          ],
          "methodname": "GetListenSocketAddress",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection *",
              "paramname": "pOutConnection1"
            },
            {
              "paramtype": "HSteamNetConnection *",
              "paramname": "pOutConnection2"
            },
            {
              "paramtype": "bool",
              "paramname": "bUseNetworkLoopback"
            },
            {
              "paramtype": "const SteamNetworkingIdentity *",
              "paramname": "pIdentity1"
            },
            {
              "paramtype": "const SteamNetworkingIdentity *",
              "paramname": "pIdentity2"
            }
          ],
          "methodname": "CreateSocketPair",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CreateSocketPair"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamNetworkingIdentity *",
              "paramname": "pIdentity"
            }
          ],
          "methodname": "GetIdentity",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetIdentity"
        },
        {
          "returntype": "ESteamNetworkingAvailability",
          "params": [],
          "methodname": "InitAuthentication",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_InitAuthentication"
        },
        {
          "returntype": "ESteamNetworkingAvailability",
          "params": [
            {
              "paramtype": "SteamNetAuthenticationStatus_t *",
              "paramname": "pDetails"
            }
          ],
          "methodname": "GetAuthenticationStatus",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus"
        },
        {
          "returntype": "HSteamNetPollGroup",
          "params": [],
          "methodname": "CreatePollGroup",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CreatePollGroup"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetPollGroup",
              "paramname": "hPollGroup"
            }
          ],
          "methodname": "DestroyPollGroup",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_DestroyPollGroup"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "HSteamNetPollGroup",
              "paramname": "hPollGroup"
            }
          ],
          "methodname": "SetConnectionPollGroup",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "HSteamNetPollGroup",
              "paramname": "hPollGroup"
            },
            {
              "paramtype": "SteamNetworkingMessage_t **",
              "paramname": "ppOutMessages"
            },
            {
              "paramtype": "int",
              "paramname": "nMaxMessages"
            }
          ],
          "methodname": "ReceiveMessagesOnPollGroup",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pvTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbTicket"
            },
            {
              "paramtype": "SteamDatagramRelayAuthTicket *",
              "paramname": "pOutParsedTicket"
            }
          ],
          "methodname": "ReceivedRelayAuthTicket",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identityGameServer"
            },
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "SteamDatagramRelayAuthTicket *",
              "paramname": "pOutParsedTicket"
            }
          ],
          "methodname": "FindRelayAuthTicketForServer",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer"
        },
        {
          "returntype": "HSteamNetConnection",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identityTarget"
            },
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "ConnectToHostedDedicatedServer",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer"
        },
        {
          "returntype": "uint16",
          "params": [],
          "methodname": "GetHostedDedicatedServerPort",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort"
        },
        {
          "returntype": "SteamNetworkingPOPID",
          "params": [],
          "methodname": "GetHostedDedicatedServerPOPID",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID"
        },
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "SteamDatagramHostedAddress *",
              "paramname": "pRouting"
            }
          ],
          "methodname": "GetHostedDedicatedServerAddress",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress"
        },
        {
          "returntype": "HSteamListenSocket",
          "params": [
            {
              "paramtype": "int",
              "paramname": "nVirtualPort"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "CreateHostedDedicatedServerListenSocket",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket"
        },
        {
          "returntype": "EResult",
          "params": [
            {
              "paramtype": "SteamDatagramGameCoordinatorServerLogin *",
              "paramname": "pLoginInfo"
            },
            {
              "paramtype": "int *",
              "paramname": "pcbSignedBlob"
            },
            {
              "paramtype": "void *",
              "paramname": "pBlob"
            }
          ],
          "methodname": "GetGameCoordinatorServerLogin",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin"
        },
        {
          "returntype": "HSteamNetConnection",
          "params": [
            {
              "paramtype": "ISteamNetworkingConnectionCustomSignaling *",
              "paramname": "pSignaling"
            },
            {
              "paramtype": "const SteamNetworkingIdentity *",
              "paramname": "pPeerIdentity"
            },
            {
              "paramtype": "int",
              "paramname": "nOptions"
            },
            {
              "paramtype": "const SteamNetworkingConfigValue_t *",
              "paramname": "pOptions"
            }
          ],
          "methodname": "ConnectP2PCustomSignaling",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pMsg"
            },
            {
              "paramtype": "int",
              "paramname": "cbMsg"
            },
            {
              "paramtype": "ISteamNetworkingCustomSignalingRecvContext *",
              "paramname": "pContext"
            }
          ],
          "methodname": "ReceivedP2PCustomSignal",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "int *",
              "paramname": "pcbBlob"
            },
            {
              "paramtype": "void *",
              "paramname": "pBlob"
            },
            {
              "paramtype": "SteamNetworkingErrMsg &",
              "paramname": "errMsg"
            }
          ],
          "methodname": "GetCertificateRequest",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_GetCertificateRequest"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pCertificate"
            },
            {
              "paramtype": "int",
              "paramname": "cbCertificate"
            },
            {
              "paramtype": "SteamNetworkingErrMsg &",
              "paramname": "errMsg"
            }
          ],
          "methodname": "SetCertificate",
          "flat_name": "SteamAPI_ISteamNetworkingSockets_SetCertificate"
        }
      ]
    },
    {
      "classname": "ISteamNetworkingConnectionCustomSignaling",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "const SteamNetConnectionInfo_t &",
              "paramname": "info"
            },
            {
              "paramtype": "const void *",
              "paramname": "pMsg"
            },
            {
              "paramtype": "int",
              "paramname": "cbMsg"
            }
          ],
          "methodname": "SendSignal",
          "flat_name": "SteamAPI_ISteamNetworkingConnectionCustomSignaling_SendSignal"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "Release",
          "flat_name": "SteamAPI_ISteamNetworkingConnectionCustomSignaling_Release"
        }
      ]
    },
    {
      "classname": "ISteamNetworkingCustomSignalingRecvContext",
      "methods": [
        {
          "returntype": "ISteamNetworkingConnectionCustomSignaling *",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identityPeer"
            }
          ],
          "methodname": "OnConnectRequest",
          "flat_name": "SteamAPI_ISteamNetworkingCustomSignalingRecvContext_OnConnectRequest"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identityPeer"
            },
            {
              "paramtype": "const void *",
              "paramname": "pMsg"
            },
            {
              "paramtype": "int",
              "paramname": "cbMsg"
            }
          ],
          "methodname": "SendRejectionSignal",
          "flat_name": "SteamAPI_ISteamNetworkingCustomSignalingRecvContext_SendRejectionSignal"
        }
      ]
    },
    {
      "classname": "ISteamNetworkingUtils",
      "version_string": "SteamNetworkingUtils003",
      "methods": [
        {
          "returntype": "SteamNetworkingMessage_t *",
          "params": [
            {
              "paramtype": "int",
              "paramname": "cbAllocateBuffer"
            }
          ],
          "methodname": "AllocateMessage",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_AllocateMessage"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "InitRelayNetworkAccess",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess"
        },
        {
          "returntype": "ESteamNetworkingAvailability",
          "params": [
            {
              "paramtype": "SteamRelayNetworkStatus_t *",
              "paramname": "pDetails"
            }
          ],
          "methodname": "GetRelayNetworkStatus",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus"
        },
        {
          "returntype": "float",
          "params": [
            {
              "paramtype": "SteamNetworkPingLocation_t &",
              "paramname": "result"
            }
          ],
          "methodname": "GetLocalPingLocation",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "const SteamNetworkPingLocation_t &",
              "paramname": "location1"
            },
            {
              "paramtype": "const SteamNetworkPingLocation_t &",
              "paramname": "location2"
            }
          ],
          "methodname": "EstimatePingTimeBetweenTwoLocations",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "const SteamNetworkPingLocation_t &",
              "paramname": "remoteLocation"
            }
          ],
          "methodname": "EstimatePingTimeFromLocalHost",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamNetworkPingLocation_t &",
              "paramname": "location"
            },
            {
              "paramtype": "char *",
              "paramname": "pszBuf"
            },
            {
              "paramtype": "int",
              "paramname": "cchBufSize"
            }
          ],
          "methodname": "ConvertPingLocationToString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszString"
            },
            {
              "paramtype": "SteamNetworkPingLocation_t &",
              "paramname": "result"
            }
          ],
          "methodname": "ParsePingLocationString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_ParsePingLocationString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "float",
              "paramname": "flMaxAgeSeconds"
            }
          ],
          "methodname": "CheckPingDataUpToDate",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "SteamNetworkingPOPID",
              "paramname": "popID"
            },
            {
              "paramtype": "SteamNetworkingPOPID *",
              "paramname": "pViaRelayPoP"
            }
          ],
          "methodname": "GetPingToDataCenter",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "SteamNetworkingPOPID",
              "paramname": "popID"
            }
          ],
          "methodname": "GetDirectPingToPOP",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP"
        },
        {
          "returntype": "int",
          "params": [],
          "methodname": "GetPOPCount",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetPOPCount"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "SteamNetworkingPOPID *",
              "paramname": "list"
            },
            {
              "paramtype": "int",
              "paramname": "nListSz"
            }
          ],
          "methodname": "GetPOPList",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetPOPList"
        },
        {
          "returntype": "SteamNetworkingMicroseconds",
          "params": [],
          "methodname": "GetLocalTimestamp",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "ESteamNetworkingSocketsDebugOutputType",
              "paramname": "eDetailLevel"
            },
            {
              "paramtype": "FSteamNetworkingSocketsDebugOutput",
              "paramname": "pfnFunc"
            }
          ],
          "methodname": "SetDebugOutputFunction",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "int32",
              "paramname": "val"
            }
          ],
          "methodname": "SetGlobalConfigValueInt32",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "float",
              "paramname": "val"
            }
          ],
          "methodname": "SetGlobalConfigValueFloat",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "const char *",
              "paramname": "val"
            }
          ],
          "methodname": "SetGlobalConfigValueString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "int32",
              "paramname": "val"
            }
          ],
          "methodname": "SetConnectionConfigValueInt32",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "float",
              "paramname": "val"
            }
          ],
          "methodname": "SetConnectionConfigValueFloat",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "HSteamNetConnection",
              "paramname": "hConn"
            },
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "const char *",
              "paramname": "val"
            }
          ],
          "methodname": "SetConnectionConfigValueString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "ESteamNetworkingConfigScope",
              "paramname": "eScopeType"
            },
            {
              "paramtype": "intptr_t",
              "paramname": "scopeObj"
            },
            {
              "paramtype": "ESteamNetworkingConfigDataType",
              "paramname": "eDataType"
            },
            {
              "paramtype": "const void *",
              "paramname": "pArg"
            }
          ],
          "methodname": "SetConfigValue",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetConfigValue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const SteamNetworkingConfigValue_t &",
              "paramname": "opt"
            },
            {
              "paramtype": "ESteamNetworkingConfigScope",
              "paramname": "eScopeType"
            },
            {
              "paramtype": "intptr_t",
              "paramname": "scopeObj"
            }
          ],
          "methodname": "SetConfigValueStruct",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct"
        },
        {
          "returntype": "ESteamNetworkingGetConfigValueResult",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "ESteamNetworkingConfigScope",
              "paramname": "eScopeType"
            },
            {
              "paramtype": "intptr_t",
              "paramname": "scopeObj"
            },
            {
              "paramtype": "ESteamNetworkingConfigDataType *",
              "paramname": "pOutDataType"
            },
            {
              "paramtype": "void *",
              "paramname": "pResult"
            },
            {
              "paramtype": "size_t *",
              "paramname": "cbResult"
            }
          ],
          "methodname": "GetConfigValue",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetConfigValue"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "ESteamNetworkingConfigValue",
              "paramname": "eValue"
            },
            {
              "paramtype": "const char **",
              "paramname": "pOutName"
            },
            {
              "paramtype": "ESteamNetworkingConfigDataType *",
              "paramname": "pOutDataType"
            },
            {
              "paramtype": "ESteamNetworkingConfigScope *",
              "paramname": "pOutScope"
            },
            {
              "paramtype": "ESteamNetworkingConfigValue *",
              "paramname": "pOutNextValue"
            }
          ],
          "methodname": "GetConfigValueInfo",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo"
        },
        {
          "returntype": "ESteamNetworkingConfigValue",
          "params": [],
          "methodname": "GetFirstConfigValue",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_GetFirstConfigValue"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamNetworkingIPAddr &",
              "paramname": "addr"
            },
            {
              "paramtype": "char *",
              "paramname": "buf"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBuf"
            },
            {
              "paramtype": "bool",
              "paramname": "bWithPort"
            }
          ],
          "methodname": "SteamNetworkingIPAddr_ToString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ToString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamNetworkingIPAddr *",
              "paramname": "pAddr"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszStr"
            }
          ],
          "methodname": "SteamNetworkingIPAddr_ParseString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIPAddr_ParseString"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "identity"
            },
            {
              "paramtype": "char *",
              "paramname": "buf"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBuf"
            }
          ],
          "methodname": "SteamNetworkingIdentity_ToString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ToString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "SteamNetworkingIdentity *",
              "paramname": "pIdentity"
            },
            {
              "paramtype": "const char *",
              "paramname": "pszStr"
            }
          ],
          "methodname": "SteamNetworkingIdentity_ParseString",
          "flat_name": "SteamAPI_ISteamNetworkingUtils_SteamNetworkingIdentity_ParseString"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamNetworkingUtils_v003",
          "kind": "global",
          "name": "SteamNetworkingUtils"
        }
      ]
    },
    {
      "classname": "ISteamGameServer",
      "version_string": "SteamGameServer013",
      "methods": [
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "usGamePort"
            },
            {
              "paramtype": "uint16",
              "paramname": "usQueryPort"
            },
            {
              "paramtype": "uint32",
              "paramname": "unFlags"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "nGameAppId"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchVersionString"
            }
          ],
          "methodname": "InitGameServer",
          "flat_name": "SteamAPI_ISteamGameServer_InitGameServer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszProduct"
            }
          ],
          "methodname": "SetProduct",
          "flat_name": "SteamAPI_ISteamGameServer_SetProduct"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszGameDescription"
            }
          ],
          "methodname": "SetGameDescription",
          "flat_name": "SteamAPI_ISteamGameServer_SetGameDescription"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszModDir"
            }
          ],
          "methodname": "SetModDir",
          "flat_name": "SteamAPI_ISteamGameServer_SetModDir"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bDedicated"
            }
          ],
          "methodname": "SetDedicatedServer",
          "flat_name": "SteamAPI_ISteamGameServer_SetDedicatedServer"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszToken"
            }
          ],
          "methodname": "LogOn",
          "flat_name": "SteamAPI_ISteamGameServer_LogOn"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "LogOnAnonymous",
          "flat_name": "SteamAPI_ISteamGameServer_LogOnAnonymous"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "LogOff",
          "flat_name": "SteamAPI_ISteamGameServer_LogOff"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BLoggedOn",
          "flat_name": "SteamAPI_ISteamGameServer_BLoggedOn"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "BSecure",
          "flat_name": "SteamAPI_ISteamGameServer_BSecure"
        },
        {
          "returntype": "CSteamID",
          "params": [],
          "methodname": "GetSteamID",
          "flat_name": "SteamAPI_ISteamGameServer_GetSteamID"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "WasRestartRequested",
          "flat_name": "SteamAPI_ISteamGameServer_WasRestartRequested"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "cPlayersMax"
            }
          ],
          "methodname": "SetMaxPlayerCount",
          "flat_name": "SteamAPI_ISteamGameServer_SetMaxPlayerCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "cBotplayers"
            }
          ],
          "methodname": "SetBotPlayerCount",
          "flat_name": "SteamAPI_ISteamGameServer_SetBotPlayerCount"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszServerName"
            }
          ],
          "methodname": "SetServerName",
          "flat_name": "SteamAPI_ISteamGameServer_SetServerName"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszMapName"
            }
          ],
          "methodname": "SetMapName",
          "flat_name": "SteamAPI_ISteamGameServer_SetMapName"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bPasswordProtected"
            }
          ],
          "methodname": "SetPasswordProtected",
          "flat_name": "SteamAPI_ISteamGameServer_SetPasswordProtected"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint16",
              "paramname": "unSpectatorPort"
            }
          ],
          "methodname": "SetSpectatorPort",
          "flat_name": "SteamAPI_ISteamGameServer_SetSpectatorPort"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszSpectatorServerName"
            }
          ],
          "methodname": "SetSpectatorServerName",
          "flat_name": "SteamAPI_ISteamGameServer_SetSpectatorServerName"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "ClearAllKeyValues",
          "flat_name": "SteamAPI_ISteamGameServer_ClearAllKeyValues"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pKey"
            },
            {
              "paramtype": "const char *",
              "paramname": "pValue"
            }
          ],
          "methodname": "SetKeyValue",
          "flat_name": "SteamAPI_ISteamGameServer_SetKeyValue"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchGameTags"
            }
          ],
          "methodname": "SetGameTags",
          "flat_name": "SteamAPI_ISteamGameServer_SetGameTags"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pchGameData"
            }
          ],
          "methodname": "SetGameData",
          "flat_name": "SteamAPI_ISteamGameServer_SetGameData"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszRegion"
            }
          ],
          "methodname": "SetRegion",
          "flat_name": "SteamAPI_ISteamGameServer_SetRegion"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "unIPClient"
            },
            {
              "paramtype": "const void *",
              "paramname": "pvAuthBlob"
            },
            {
              "paramtype": "uint32",
              "paramname": "cubAuthBlobSize"
            },
            {
              "paramtype": "CSteamID *",
              "paramname": "pSteamIDUser"
            }
          ],
          "methodname": "SendUserConnectAndAuthenticate",
          "flat_name": "SteamAPI_ISteamGameServer_SendUserConnectAndAuthenticate"
        },
        {
          "returntype": "CSteamID",
          "params": [],
          "methodname": "CreateUnauthenticatedUserConnection",
          "flat_name": "SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "methodname": "SendUserDisconnect",
          "flat_name": "SteamAPI_ISteamGameServer_SendUserDisconnect"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchPlayerName"
            },
            {
              "paramtype": "uint32",
              "paramname": "uScore"
            }
          ],
          "methodname": "BUpdateUserData",
          "flat_name": "SteamAPI_ISteamGameServer_BUpdateUserData"
        },
        {
          "returntype": "HAuthTicket",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbMaxTicket"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pcbTicket"
            }
          ],
          "methodname": "GetAuthSessionTicket",
          "flat_name": "SteamAPI_ISteamGameServer_GetAuthSessionTicket"
        },
        {
          "returntype": "EBeginAuthSessionResult",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pAuthTicket"
            },
            {
              "paramtype": "int",
              "paramname": "cbAuthTicket"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "BeginAuthSession",
          "flat_name": "SteamAPI_ISteamGameServer_BeginAuthSession"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "EndAuthSession",
          "flat_name": "SteamAPI_ISteamGameServer_EndAuthSession"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "HAuthTicket",
              "paramname": "hAuthTicket"
            }
          ],
          "methodname": "CancelAuthTicket",
          "flat_name": "SteamAPI_ISteamGameServer_CancelAuthTicket"
        },
        {
          "returntype": "EUserHasLicenseForAppResult",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            },
            {
              "paramtype": "AppId_t",
              "paramname": "appID"
            }
          ],
          "methodname": "UserHasLicenseForApp",
          "flat_name": "SteamAPI_ISteamGameServer_UserHasLicenseForApp"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDGroup"
            }
          ],
          "methodname": "RequestUserGroupStatus",
          "flat_name": "SteamAPI_ISteamGameServer_RequestUserGroupStatus"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "GetGameplayStats",
          "flat_name": "SteamAPI_ISteamGameServer_GetGameplayStats"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [],
          "callresult": "GSReputation_t",
          "methodname": "GetServerReputation",
          "flat_name": "SteamAPI_ISteamGameServer_GetServerReputation"
        },
        {
          "returntype": "SteamIPAddress_t",
          "params": [],
          "methodname": "GetPublicIP",
          "flat_name": "SteamAPI_ISteamGameServer_GetPublicIP"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "pData"
            },
            {
              "paramtype": "int",
              "paramname": "cbData"
            },
            {
              "paramtype": "uint32",
              "paramname": "srcIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "srcPort"
            }
          ],
          "methodname": "HandleIncomingPacket",
          "flat_name": "SteamAPI_ISteamGameServer_HandleIncomingPacket"
        },
        {
          "returntype": "int",
          "params": [
            {
              "paramtype": "void *",
              "paramname": "pOut"
            },
            {
              "paramtype": "int",
              "paramname": "cbMaxOut"
            },
            {
              "paramtype": "uint32 *",
              "paramname": "pNetAdr"
            },
            {
              "paramtype": "uint16 *",
              "paramname": "pPort"
            }
          ],
          "methodname": "GetNextOutgoingPacket",
          "flat_name": "SteamAPI_ISteamGameServer_GetNextOutgoingPacket"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "bool",
              "paramname": "bActive"
            }
          ],
          "methodname": "EnableHeartbeats",
          "flat_name": "SteamAPI_ISteamGameServer_EnableHeartbeats"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "int",
              "paramname": "iHeartbeatInterval"
            }
          ],
          "methodname": "SetHeartbeatInterval",
          "flat_name": "SteamAPI_ISteamGameServer_SetHeartbeatInterval"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "ForceHeartbeat",
          "flat_name": "SteamAPI_ISteamGameServer_ForceHeartbeat"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDClan"
            }
          ],
          "callresult": "AssociateWithClanResult_t",
          "methodname": "AssociateWithClan",
          "flat_name": "SteamAPI_ISteamGameServer_AssociateWithClan"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDNewPlayer"
            }
          ],
          "callresult": "ComputeNewPlayerCompatibilityResult_t",
          "methodname": "ComputeNewPlayerCompatibility",
          "flat_name": "SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamGameServer_v013",
          "kind": "gameserver",
          "name": "SteamGameServer"
        }
      ]
    },
    {
      "classname": "ISteamGameServerStats",
      "version_string": "SteamGameServerStats001",
      "methods": [
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "callresult": "GSStatsReceived_t",
          "methodname": "RequestUserStats",
          "flat_name": "SteamAPI_ISteamGameServerStats_RequestUserStats"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int32 *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetUserStat",
          "flat_name": "SteamAPI_ISteamGameServerStats_GetUserStatInt32"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float *",
              "paramname": "pData"
            }
          ],
          "methodname": "GetUserStat",
          "flat_name": "SteamAPI_ISteamGameServerStats_GetUserStatFloat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "bool *",
              "paramname": "pbAchieved"
            }
          ],
          "methodname": "GetUserAchievement",
          "flat_name": "SteamAPI_ISteamGameServerStats_GetUserAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "int32",
              "paramname": "nData"
            }
          ],
          "methodname": "SetUserStat",
          "flat_name": "SteamAPI_ISteamGameServerStats_SetUserStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float",
              "paramname": "fData"
            }
          ],
          "methodname": "SetUserStat",
          "flat_name": "SteamAPI_ISteamGameServerStats_SetUserStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            },
            {
              "paramtype": "float",
              "paramname": "flCountThisSession"
            },
            {
              "paramtype": "double",
              "paramname": "dSessionLength"
            }
          ],
          "methodname": "UpdateUserAvgRateStat",
          "flat_name": "SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "SetUserAchievement",
          "flat_name": "SteamAPI_ISteamGameServerStats_SetUserAchievement"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            },
            {
              "paramtype": "const char *",
              "paramname": "pchName"
            }
          ],
          "methodname": "ClearUserAchievement",
          "flat_name": "SteamAPI_ISteamGameServerStats_ClearUserAchievement"
        },
        {
          "returntype": "SteamAPICall_t",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamIDUser"
            }
          ],
          "callresult": "GSStatsStored_t",
          "methodname": "StoreUserStats",
          "flat_name": "SteamAPI_ISteamGameServerStats_StoreUserStats"
        }
      ],
      "accessors": [
        {
          "flat_name": "SteamAPI_SteamGameServerStats_v001",
          "kind": "gameserver",
          "name": "SteamGameServerStats"
        }
      ]
    }
  ],
  "typedefs": [
    {
      "typedef": "uint8",
      "type": "unsigned char"
    },
    {
      "typedef": "int8",
      "type": "signed char"
    },
    {
      "typedef": "int16",
      "type": "short"
    },
    {
      "typedef": "uint16",
      "type": "unsigned short"
    },
    {
      "typedef": "int32",
      "type": "int"
    },
    {
      "typedef": "uint32",
      "type": "unsigned int"
    },
    {
      "typedef": "int64",
      "type": "long long"
    },
    {
      "typedef": "uint64",
      "type": "unsigned long long"
    },
    {
      "typedef": "lint64",
      "type": "long long"
    },
    {
      "typedef": "ulint64",
      "type": "unsigned long long"
    },
    {
      "typedef": "intp",
      "type": "long long"
    },
    {
      "typedef": "uintp",
      "type": "unsigned long long"
    },
    {
      "typedef": "Salt_t",
      "type": "unsigned char [8]"
    },
    {
      "typedef": "GID_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "JobID_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "TxnID_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "PackageId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "BundleId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "AppId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "AssetClassId_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "PhysicalItemId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "DepotId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "RTime32",
      "type": "unsigned int"
    },
    {
      "typedef": "CellID_t",
      "type": "unsigned int"
    },
    {
      "typedef": "SteamAPICall_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "AccountID_t",
      "type": "unsigned int"
    },
    {
      "typedef": "PartnerId_t",
      "type": "unsigned int"
    },
    {
      "typedef": "ManifestId_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "SiteId_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "PartyBeaconID_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "HAuthTicket",
      "type": "unsigned int"
    },
    {
      "typedef": "PFNLegacyKeyRegistration",
      "type": "void (*)(const char *, const char *)"
    },
    {
      "typedef": "PFNLegacyKeyInstalled",
      "type": "bool (*)()"
    },
    {
      "typedef": "PFNPreMinidumpCallback",
      "type": "void (*)(void *)"
    },
    {
      "typedef": "BREAKPAD_HANDLE",
      "type": "void *"
    },
    {
      "typedef": "HSteamPipe",
      "type": "int"
    },
    {
      "typedef": "HSteamUser",
      "type": "int"
    },
    {
      "typedef": "FriendsGroupID_t",
      "type": "short"
    },
    {
      "typedef": "HServerListRequest",
      "type": "void *"
    },
    {
      "typedef": "HServerQuery",
      "type": "int"
    },
    {
      "typedef": "UGCHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "PublishedFileUpdateHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "PublishedFileId_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "UGCFileWriteStreamHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "SteamLeaderboard_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "SteamLeaderboardEntries_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "SNetSocket_t",
      "type": "unsigned int"
    },
    {
      "typedef": "SNetListenSocket_t",
      "type": "unsigned int"
    },
    {
      "typedef": "ScreenshotHandle",
      "type": "unsigned int"
    },
    {
      "typedef": "HTTPRequestHandle",
      "type": "unsigned int"
    },
    {
      "typedef": "HTTPCookieContainerHandle",
      "type": "unsigned int"
    },
    {
      "typedef": "InputHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "InputActionSetHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "InputDigitalActionHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "InputAnalogActionHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "ControllerHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "ControllerActionSetHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "ControllerDigitalActionHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "ControllerAnalogActionHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "UGCQueryHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "UGCUpdateHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "HHTMLBrowser",
      "type": "unsigned int"
    },
    {
      "typedef": "SteamItemInstanceID_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "SteamItemDef_t",
      "type": "int"
    },
    {
      "typedef": "SteamInventoryResult_t",
      "type": "int"
    },
    {
      "typedef": "SteamInventoryUpdateHandle_t",
      "type": "unsigned long long"
    },
    {
      "typedef": "RemotePlaySessionID_t",
      "type": "unsigned int"
    },
    {
      "typedef": "HSteamNetConnection",
      "type": "unsigned int"
    },
    {
      "typedef": "HSteamListenSocket",
      "type": "unsigned int"
    },
    {
      "typedef": "HSteamNetPollGroup",
      "type": "unsigned int"
    },
    {
      "typedef": "SteamNetworkingErrMsg",
      "type": "char [1024]"
    },
    {
      "typedef": "SteamNetworkingPOPID",
      "type": "unsigned int"
    },
    {
      "typedef": "SteamNetworkingMicroseconds",
      "type": "long long"
    },
    {
      "typedef": "FSteamNetworkingSocketsDebugOutput",
      "type": "void (*)(ESteamNetworkingSocketsDebugOutputType, const char *)"
    },
    {
      "typedef": "ISteamNetworkingMessage",
      "type": "SteamNetworkingMessage_t"
    },
    {
      "typedef": "SteamDatagramErrMsg",
      "type": "char [1024]"
    }
  ],
  "consts": [
    {
      "consttype": "const int",
      "constname": "k_cubSaltSize",
      "constval": "8"
    },
    {
      "consttype": "const GID_t",
      "constname": "k_GIDNil",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const GID_t",
      "constname": "k_TxnIDNil",
      "constval": "k_GIDNil"
    },
    {
      "consttype": "const GID_t",
      "constname": "k_TxnIDUnknown",
      "constval": "0"
    },
    {
      "consttype": "const JobID_t",
      "constname": "k_JobIDNil",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const PackageId_t",
      "constname": "k_uPackageIdInvalid",
      "constval": "0xFFFFFFFF"
    },
    {
      "consttype": "const BundleId_t",
      "constname": "k_uBundleIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const AppId_t",
      "constname": "k_uAppIdInvalid",
      "constval": "0x0"
    },
    {
      "consttype": "const AssetClassId_t",
      "constname": "k_ulAssetClassIdInvalid",
      "constval": "0x0"
    },
    {
      "consttype": "const PhysicalItemId_t",
      "constname": "k_uPhysicalItemIdInvalid",
      "constval": "0x0"
    },
    {
      "consttype": "const DepotId_t",
      "constname": "k_uDepotIdInvalid",
      "constval": "0x0"
    },
    {
      "consttype": "const CellID_t",
      "constname": "k_uCellIDInvalid",
      "constval": "0xFFFFFFFF"
    },
    {
      "consttype": "const SteamAPICall_t",
      "constname": "k_uAPICallInvalid",
      "constval": "0x0"
    },
    {
      "consttype": "const PartnerId_t",
      "constname": "k_uPartnerIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const ManifestId_t",
      "constname": "k_uManifestIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const SiteId_t",
      "constname": "k_ulSiteIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const PartyBeaconID_t",
      "constname": "k_ulPartyBeaconIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const HAuthTicket",
      "constname": "k_HAuthTicketInvalid",
      "constval": "0"
    },
    {
      "consttype": "const unsigned int",
      "constname": "k_unSteamAccountIDMask",
      "constval": "0xFFFFFFFF"
    },
    {
      "consttype": "const unsigned int",
      "constname": "k_unSteamAccountInstanceMask",
      "constval": "0x000FFFFF"
    },
    {
      "consttype": "const unsigned int",
      "constname": "k_unSteamUserDefaultInstance",
      "constval": "1"
    },
    {
      "consttype": "const int",
      "constname": "k_cchGameExtraInfoMax",
      "constval": "64"
    },
    {
      "consttype": "const int",
      "constname": "k_cchMaxFriendsGroupName",
      "constval": "64"
    },
    {
      "consttype": "const int",
      "constname": "k_cFriendsGroupLimit",
      "constval": "100"
    },
    {
      "consttype": "const FriendsGroupID_t",
      "constname": "k_FriendsGroupID_Invalid",
      "constval": "- 1"
    },
    {
      "consttype": "const int",
      "constname": "k_cEnumerateFollowersMax",
      "constval": "50"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cubChatMetadataMax",
      "constval": "8192"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerGameDir",
      "constval": "32"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerMapName",
      "constval": "32"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerGameDescription",
      "constval": "64"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerName",
      "constval": "64"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerTags",
      "constval": "128"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxGameServerGameData",
      "constval": "2048"
    },
    {
      "consttype": "const int",
      "constname": "HSERVERQUERY_INVALID",
      "constval": "0xffffffff"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unFavoriteFlagNone",
      "constval": "0x00"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unFavoriteFlagFavorite",
      "constval": "0x01"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unFavoriteFlagHistory",
      "constval": "0x02"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unMaxCloudFileChunkSize",
      "constval": "100 * 1024 * 1024"
    },
    {
      "consttype": "const PublishedFileId_t",
      "constname": "k_PublishedFileIdInvalid",
      "constval": "0"
    },
    {
      "consttype": "const UGCHandle_t",
      "constname": "k_UGCHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const PublishedFileUpdateHandle_t",
      "constname": "k_PublishedFileUpdateHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const UGCFileWriteStreamHandle_t",
      "constname": "k_UGCFileStreamHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchPublishedDocumentTitleMax",
      "constval": "128 + 1"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchPublishedDocumentDescriptionMax",
      "constval": "8000"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchPublishedDocumentChangeDescriptionMax",
      "constval": "8000"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unEnumeratePublishedFilesMaxResults",
      "constval": "50"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchTagListMax",
      "constval": "1024 + 1"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchFilenameMax",
      "constval": "260"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchPublishedFileURLMax",
      "constval": "256"
    },
    {
      "consttype": "const int",
      "constname": "k_cubAppProofOfPurchaseKeyMax",
      "constval": "240"
    },
    {
      "consttype": "const uint32",
      "constname": "k_nScreenshotMaxTaggedUsers",
      "constval": "32"
    },
    {
      "consttype": "const uint32",
      "constname": "k_nScreenshotMaxTaggedPublishedFiles",
      "constval": "32"
    },
    {
      "consttype": "const int",
      "constname": "k_cubUFSTagTypeMax",
      "constval": "255"
    },
    {
      "consttype": "const int",
      "constname": "k_cubUFSTagValueMax",
      "constval": "255"
    },
    {
      "consttype": "const int",
      "constname": "k_ScreenshotThumbWidth",
      "constval": "200"
    },
    {
      "consttype": "const UGCQueryHandle_t",
      "constname": "k_UGCQueryHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const UGCUpdateHandle_t",
      "constname": "k_UGCUpdateHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const uint32",
      "constname": "kNumUGCResultsPerPage",
      "constval": "50"
    },
    {
      "consttype": "const uint32",
      "constname": "k_cchDeveloperMetadataMax",
      "constval": "5000"
    },
    {
      "consttype": "const uint32",
      "constname": "INVALID_HTMLBROWSER",
      "constval": "0"
    },
    {
      "consttype": "const SteamItemInstanceID_t",
      "constname": "k_SteamItemInstanceIDInvalid",
      "constval": "( SteamItemInstanceID_t ) ~ 0"
    },
    {
      "consttype": "const SteamInventoryResult_t",
      "constname": "k_SteamInventoryResultInvalid",
      "constval": "- 1"
    },
    {
      "consttype": "const SteamInventoryUpdateHandle_t",
      "constname": "k_SteamInventoryUpdateHandleInvalid",
      "constval": "0xffffffffffffffffull"
    },
    {
      "consttype": "const HSteamNetConnection",
      "constname": "k_HSteamNetConnection_Invalid",
      "constval": "0"
    },
    {
      "consttype": "const HSteamListenSocket",
      "constname": "k_HSteamListenSocket_Invalid",
      "constval": "0"
    },
    {
      "consttype": "const HSteamNetPollGroup",
      "constname": "k_HSteamNetPollGroup_Invalid",
      "constval": "0"
    },
    {
      "consttype": "const int",
      "constname": "k_cchMaxSteamNetworkingErrMsg",
      "constval": "1024"
    },
    {
      "consttype": "const int",
      "constname": "k_cchSteamNetworkingMaxConnectionCloseReason",
      "constval": "128"
    },
    {
      "consttype": "const int",
      "constname": "k_cchSteamNetworkingMaxConnectionDescription",
      "constval": "128"
    },
    {
      "consttype": "const int",
      "constname": "k_cbMaxSteamNetworkingSocketsMessageSizeSend",
      "constval": "512 * 1024"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_Unreliable",
      "constval": "0"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_NoNagle",
      "constval": "1"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_UnreliableNoNagle",
      "constval": "k_nSteamNetworkingSend_Unreliable | k_nSteamNetworkingSend_NoNagle"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_NoDelay",
      "constval": "4"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_UnreliableNoDelay",
      "constval": "k_nSteamNetworkingSend_Unreliable | k_nSteamNetworkingSend_NoDelay | k_nSteamNetworkingSend_NoNagle"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_Reliable",
      "constval": "8"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_ReliableNoNagle",
      "constval": "k_nSteamNetworkingSend_Reliable | k_nSteamNetworkingSend_NoNagle"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingSend_UseCurrentThread",
      "constval": "16"
    },
    {
      "consttype": "const int",
      "constname": "k_cchMaxSteamNetworkingPingLocationString",
      "constval": "1024"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingPing_Failed",
      "constval": "- 1"
    },
    {
      "consttype": "const int",
      "constname": "k_nSteamNetworkingPing_Unknown",
      "constval": "- 2"
    },
    {
      "consttype": "const SteamNetworkingPOPID",
      "constname": "k_SteamDatagramPOPID_dev",
      "constval": "( ( uint32 ) 'd' << 16U ) | ( ( uint32 ) 'e' << 8U ) | ( uint32 ) 'v'"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagNone",
      "constval": "0x00"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagActive",
      "constval": "0x01"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagSecure",
      "constval": "0x02"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagDedicated",
      "constval": "0x04"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagLinux",
      "constval": "0x08"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagPassworded",
      "constval": "0x10"
    },
    {
      "consttype": "const uint32",
      "constname": "k_unServerFlagPrivate",
      "constval": "0x20"
    }
  ],
  "enums": [
    {
      "enumname": "ESteamIPType",
      "values": [
        {
          "name": "k_ESteamIPTypeIPv4",
          "value": 0
        },
        {
          "name": "k_ESteamIPTypeIPv6",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EUniverse",
      "values": [
        {
          "name": "k_EUniverseInvalid",
          "value": 0
        },
        {
          "name": "k_EUniversePublic",
          "value": 1
        },
        {
          "name": "k_EUniverseBeta",
          "value": 2
        },
        {
          "name": "k_EUniverseInternal",
          "value": 3
        },
        {
          "name": "k_EUniverseDev",
          "value": 4
        },
        {
          "name": "k_EUniverseMax",
          "value": 5
        }
      ]
    },
    {
      "enumname": "EResult",
      "values": [
        {
          "name": "k_EResultNone",
          "value": 0
        },
        {
          "name": "k_EResultOK",
          "value": 1
        },
        {
          "name": "k_EResultFail",
          "value": 2
        },
        {
          "name": "k_EResultNoConnection",
          "value": 3
        },
        {
          "name": "k_EResultInvalidPassword",
          "value": 5
        },
        {
          "name": "k_EResultLoggedInElsewhere",
          "value": 6
        },
        {
          "name": "k_EResultInvalidProtocolVer",
          "value": 7
        },
        {
          "name": "k_EResultInvalidParam",
          "value": 8
        },
        {
          "name": "k_EResultFileNotFound",
          "value": 9
        },
        {
          "name": "k_EResultBusy",
          "value": 10
        },
        {
          "name": "k_EResultInvalidState",
          "value": 11
        },
        {
          "name": "k_EResultInvalidName",
          "value": 12
        },
        {
          "name": "k_EResultInvalidEmail",
          "value": 13
        },
        {
          "name": "k_EResultDuplicateName",
          "value": 14
        },
        {
          "name": "k_EResultAccessDenied",
          "value": 15
        },
        {
          "name": "k_EResultTimeout",
          "value": 16
        },
        {
          "name": "k_EResultBanned",
          "value": 17
        },
        {
          "name": "k_EResultAccountNotFound",
          "value": 18
        },
        {
          "name": "k_EResultInvalidSteamID",
          "value": 19
        },
        {
          "name": "k_EResultServiceUnavailable",
          "value": 20
        },
        {
          "name": "k_EResultNotLoggedOn",
          "value": 21
        },
        {
          "name": "k_EResultPending",
          "value": 22
        },
        {
          "name": "k_EResultEncryptionFailure",
          "value": 23
        },
        {
          "name": "k_EResultInsufficientPrivilege",
          "value": 24
        },
        {
          "name": "k_EResultLimitExceeded",
          "value": 25
        },
        {
          "name": "k_EResultRevoked",
          "value": 26
        },
        {
          "name": "k_EResultExpired",
          "value": 27
        },
        {
          "name": "k_EResultAlreadyRedeemed",
          "value": 28
        },
        {
          "name": "k_EResultDuplicateRequest",
          "value": 29
        },
        {
          "name": "k_EResultAlreadyOwned",
          "value": 30
        },
        {
          "name": "k_EResultIPNotFound",
          "value": 31
        },
        {
          "name": "k_EResultPersistFailed",
          "value": 32
        },
        {
          "name": "k_EResultLockingFailed",
          "value": 33
        },
        {
          "name": "k_EResultLogonSessionReplaced",
          "value": 34
        },
        {
          "name": "k_EResultConnectFailed",
          "value": 35
        },
        {
          "name": "k_EResultHandshakeFailed",
          "value": 36
        },
        {
          "name": "k_EResultIOFailure",
          "value": 37
        },
        {
          "name": "k_EResultRemoteDisconnect",
          "value": 38
        },
        {
          "name": "k_EResultShoppingCartNotFound",
          "value": 39
        },
        {
          "name": "k_EResultBlocked",
          "value": 40
        },
        {
          "name": "k_EResultIgnored",
          "value": 41
        },
        {
          "name": "k_EResultNoMatch",
          "value": 42
        },
        {
          "name": "k_EResultAccountDisabled",
          "value": 43
        },
        {
          "name": "k_EResultServiceReadOnly",
          "value": 44
        },
        {
          "name": "k_EResultAccountNotFeatured",
          "value": 45
        },
        {
          "name": "k_EResultAdministratorOK",
          "value": 46
        },
        {
          "name": "k_EResultContentVersion",
          "value": 47
        },
        {
          "name": "k_EResultTryAnotherCM",
          "value": 48
        },
        {
          "name": "k_EResultPasswordRequiredToKickSession",
          "value": 49
        },
        {
          "name": "k_EResultAlreadyLoggedInElsewhere",
          "value": 50
        },
        {
          "name": "k_EResultSuspended",
          "value": 51
        },
        {
          "name": "k_EResultCancelled",
          "value": 52
        },
        {
          "name": "k_EResultDataCorruption",
          "value": 53
        },
        {
          "name": "k_EResultDiskFull",
          "value": 54
        },
        {
          "name": "k_EResultRemoteCallFailed",
          "value": 55
        },
        {
          "name": "k_EResultPasswordUnset",
          "value": 56
        },
        {
          "name": "k_EResultExternalAccountUnlinked",
          "value": 57
        },
        {
          "name": "k_EResultPSNTicketInvalid",
          "value": 58
        },
        {
          "name": "k_EResultExternalAccountAlreadyLinked",
          "value": 59
        },
        {
          "name": "k_EResultRemoteFileConflict",
          "value": 60
        },
        {
          "name": "k_EResultIllegalPassword",
          "value": 61
        },
        {
          "name": "k_EResultSameAsPreviousValue",
          "value": 62
        },
        {
          "name": "k_EResultAccountLogonDenied",
          "value": 63
        },
        {
          "name": "k_EResultCannotUseOldPassword",
          "value": 64
        },
        {
          "name": "k_EResultInvalidLoginAuthCode",
          "value": 65
        },
        {
          "name": "k_EResultAccountLogonDeniedNoMail",
          "value": 66
        },
        {
          "name": "k_EResultHardwareNotCapableOfIPT",
          "value": 67
        },
        {
          "name": "k_EResultIPTInitError",
          "value": 68
        },
        {
          "name": "k_EResultParentalControlRestricted",
          "value": 69
        },
        {
          "name": "k_EResultFacebookQueryError",
          "value": 70
        },
        {
          "name": "k_EResultExpiredLoginAuthCode",
          "value": 71
        },
        {
          "name": "k_EResultIPLoginRestrictionFailed",
          "value": 72
        },
        {
          "name": "k_EResultAccountLockedDown",
          "value": 73
        },
        {
          "name": "k_EResultAccountLogonDeniedVerifiedEmailRequired",
          "value": 74
        },
        {
          "name": "k_EResultNoMatchingURL",
          "value": 75
        },
        {
          "name": "k_EResultBadResponse",
          "value": 76
        },
        {
          "name": "k_EResultRequirePasswordReEntry",
          "value": 77
        },
        {
          "name": "k_EResultValueOutOfRange",
          "value": 78
        },
        {
          "name": "k_EResultUnexpectedError",
          "value": 79
        },
        {
          "name": "k_EResultDisabled",
          "value": 80
        },
        {
          "name": "k_EResultInvalidCEGSubmission",
          "value": 81
        },
        {
          "name": "k_EResultRestrictedDevice",
          "value": 82
        },
        {
          "name": "k_EResultRegionLocked",
          "value": 83
        },
        {
          "name": "k_EResultRateLimitExceeded",
          "value": 84
        },
        {
          "name": "k_EResultAccountLoginDeniedNeedTwoFactor",
          "value": 85
        },
        {
          "name": "k_EResultItemDeleted",
          "value": 86
        },
        {
          "name": "k_EResultAccountLoginDeniedThrottle",
          "value": 87
        },
        {
          "name": "k_EResultTwoFactorCodeMismatch",
          "value": 88
        },
        {
          "name": "k_EResultTwoFactorActivationCodeMismatch",
          "value": 89
        },
        {
          "name": "k_EResultAccountAssociatedToMultiplePartners",
          "value": 90
        },
        {
          "name": "k_EResultNotModified",
          "value": 91
        },
        {
          "name": "k_EResultNoMobileDevice",
          "value": 92
        },
        {
          "name": "k_EResultTimeNotSynced",
          "value": 93
        },
        {
          "name": "k_EResultSmsCodeFailed",
          "value": 94
        },
        {
          "name": "k_EResultAccountLimitExceeded",
          "value": 95
        },
        {
          "name": "k_EResultAccountActivityLimitExceeded",
          "value": 96
        },
        {
          "name": "k_EResultPhoneActivityLimitExceeded",
          "value": 97
        },
        {
          "name": "k_EResultRefundToWallet",
          "value": 98
        },
        {
          "name": "k_EResultEmailSendFailure",
          "value": 99
        },
        {
          "name": "k_EResultNotSettled",
          "value": 100
        },
        {
          "name": "k_EResultNeedCaptcha",
          "value": 101
        },
        {
          "name": "k_EResultGSLTDenied",
          "value": 102
        },
        {
          "name": "k_EResultGSOwnerDenied",
          "value": 103
        },
        {
          "name": "k_EResultInvalidItemType",
          "value": 104
        },
        {
          "name": "k_EResultIPBanned",
          "value": 105
        },
        {
          "name": "k_EResultGSLTExpired",
          "value": 106
        },
        {
          "name": "k_EResultInsufficientFunds",
          "value": 107
        },
        {
          "name": "k_EResultTooManyPending",
          "value": 108
        },
        {
          "name": "k_EResultNoSiteLicensesFound",
          "value": 109
        },
        {
          "name": "k_EResultWGNetworkSendExceeded",
          "value": 110
        },
        {
          "name": "k_EResultAccountNotFriends",
          "value": 111
        },
        {
          "name": "k_EResultLimitedUserAccount",
          "value": 112
        },
        {
          "name": "k_EResultCantRemoveItem",
          "value": 113
        },
        {
          "name": "k_EResultAccountDeleted",
          "value": 114
        },
        {
          "name": "k_EResultExistingUserCancelledLicense",
          "value": 115
        }
      ]
    },
    {
      "enumname": "EVoiceResult",
      "values": [
        {
          "name": "k_EVoiceResultOK",
          "value": 0
        },
        {
          "name": "k_EVoiceResultNotInitialized",
          "value": 1
        },
        {
          "name": "k_EVoiceResultNotRecording",
          "value": 2
        },
        {
          "name": "k_EVoiceResultNoData",
          "value": 3
        },
        {
          "name": "k_EVoiceResultBufferTooSmall",
          "value": 4
        },
        {
          "name": "k_EVoiceResultDataCorrupted",
          "value": 5
        },
        {
          "name": "k_EVoiceResultRestricted",
          "value": 6
        },
        {
          "name": "k_EVoiceResultUnsupportedCodec",
          "value": 7
        },
        {
          "name": "k_EVoiceResultReceiverOutOfDate",
          "value": 8
        },
        {
          "name": "k_EVoiceResultReceiverDidNotAnswer",
          "value": 9
        }
      ]
    },
    {
      "enumname": "EDenyReason",
      "values": [
        {
          "name": "k_EDenyInvalid",
          "value": 0
        },
        {
          "name": "k_EDenyInvalidVersion",
          "value": 1
        },
        {
          "name": "k_EDenyGeneric",
          "value": 2
        },
        {
          "name": "k_EDenyNotLoggedOn",
          "value": 3
        },
        {
          "name": "k_EDenyNoLicense",
          "value": 4
        },
        {
          "name": "k_EDenyCheater",
          "value": 5
        },
        {
          "name": "k_EDenyLoggedInElseWhere",
          "value": 6
        },
        {
          "name": "k_EDenyUnknownText",
          "value": 7
        },
        {
          "name": "k_EDenyIncompatibleAnticheat",
          "value": 8
        },
        {
          "name": "k_EDenyMemoryCorruption",
          "value": 9
        },
        {
          "name": "k_EDenyIncompatibleSoftware",
          "value": 10
        },
        {
          "name": "k_EDenySteamConnectionLost",
          "value": 11
        },
        {
          "name": "k_EDenySteamConnectionError",
          "value": 12
        },
        {
          "name": "k_EDenySteamResponseTimedOut",
          "value": 13
        },
        {
          "name": "k_EDenySteamValidationStalled",
          "value": 14
        },
        {
          "name": "k_EDenySteamOwnerLeftGuestUser",
          "value": 15
        }
      ]
    },
    {
      "enumname": "EBeginAuthSessionResult",
      "values": [
        {
          "name": "k_EBeginAuthSessionResultOK",
          "value": 0
        },
        {
          "name": "k_EBeginAuthSessionResultInvalidTicket",
          "value": 1
        },
        {
          "name": "k_EBeginAuthSessionResultDuplicateRequest",
          "value": 2
        },
        {
          "name": "k_EBeginAuthSessionResultInvalidVersion",
          "value": 3
        },
        {
          "name": "k_EBeginAuthSessionResultGameMismatch",
          "value": 4
        },
        {
          "name": "k_EBeginAuthSessionResultExpiredTicket",
          "value": 5
        }
      ]
    },
    {
      "enumname": "EAuthSessionResponse",
      "values": [
        {
          "name": "k_EAuthSessionResponseOK",
          "value": 0
        },
        {
          "name": "k_EAuthSessionResponseUserNotConnectedToSteam",
          "value": 1
        },
        {
          "name": "k_EAuthSessionResponseNoLicenseOrExpired",
          "value": 2
        },
        {
          "name": "k_EAuthSessionResponseVACBanned",
          "value": 3
        },
        {
          "name": "k_EAuthSessionResponseLoggedInElseWhere",
          "value": 4
        },
        {
          "name": "k_EAuthSessionResponseVACCheckTimedOut",
          "value": 5
        },
        {
          "name": "k_EAuthSessionResponseAuthTicketCanceled",
          "value": 6
        },
        {
          "name": "k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed",
          "value": 7
        },
        {
          "name": "k_EAuthSessionResponseAuthTicketInvalid",
          "value": 8
        },
        {
          "name": "k_EAuthSessionResponsePublisherIssuedBan",
          "value": 9
        }
      ]
    },
    {
      "enumname": "EUserHasLicenseForAppResult",
      "values": [
        {
          "name": "k_EUserHasLicenseResultHasLicense",
          "value": 0
        },
        {
          "name": "k_EUserHasLicenseResultDoesNotHaveLicense",
          "value": 1
        },
        {
          "name": "k_EUserHasLicenseResultNoAuth",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EAccountType",
      "values": [
        {
          "name": "k_EAccountTypeInvalid",
          "value": 0
        },
        {
          "name": "k_EAccountTypeIndividual",
          "value": 1
        },
        {
          "name": "k_EAccountTypeMultiseat",
          "value": 2
        },
        {
          "name": "k_EAccountTypeGameServer",
          "value": 3
        },
        {
          "name": "k_EAccountTypeAnonGameServer",
          "value": 4
        },
        {
          "name": "k_EAccountTypePending",
          "value": 5
        },
        {
          "name": "k_EAccountTypeContentServer",
          "value": 6
        },
        {
          "name": "k_EAccountTypeClan",
          "value": 7
        },
        {
          "name": "k_EAccountTypeChat",
          "value": 8
        },
        {
          "name": "k_EAccountTypeConsoleUser",
          "value": 9
        },
        {
          "name": "k_EAccountTypeAnonUser",
          "value": 10
        },
        {
          "name": "k_EAccountTypeMax",
          "value": 11
        }
      ]
    },
    {
      "enumname": "EAppReleaseState",
      "values": [
        {
          "name": "k_EAppReleaseState_Unknown",
          "value": 0
        },
        {
          "name": "k_EAppReleaseState_Unavailable",
          "value": 1
        },
        {
          "name": "k_EAppReleaseState_Prerelease",
          "value": 2
        },
        {
          "name": "k_EAppReleaseState_PreloadOnly",
          "value": 3
        },
        {
          "name": "k_EAppReleaseState_Released",
          "value": 4
        }
      ]
    },
    {
      "enumname": "EAppOwnershipFlags",
      "values": [
        {
          "name": "k_EAppOwnershipFlags_None",
          "value": 0
        },
        {
          "name": "k_EAppOwnershipFlags_OwnsLicense",
          "value": 1
        },
        {
          "name": "k_EAppOwnershipFlags_FreeLicense",
          "value": 2
        },
        {
          "name": "k_EAppOwnershipFlags_RegionRestricted",
          "value": 4
        },
        {
          "name": "k_EAppOwnershipFlags_LowViolence",
          "value": 8
        },
        {
          "name": "k_EAppOwnershipFlags_InvalidPlatform",
          "value": 16
        },
        {
          "name": "k_EAppOwnershipFlags_SharedLicense",
          "value": 32
        },
        {
          "name": "k_EAppOwnershipFlags_FreeWeekend",
          "value": 64
        },
        {
          "name": "k_EAppOwnershipFlags_RetailLicense",
          "value": 128
        },
        {
          "name": "k_EAppOwnershipFlags_LicenseLocked",
          "value": 256
        },
        {
          "name": "k_EAppOwnershipFlags_LicensePending",
          "value": 512
        },
        {
          "name": "k_EAppOwnershipFlags_LicenseExpired",
          "value": 1024
        },
        {
          "name": "k_EAppOwnershipFlags_LicensePermanent",
          "value": 2048
        },
        {
          "name": "k_EAppOwnershipFlags_LicenseRecurring",
          "value": 4096
        },
        {
          "name": "k_EAppOwnershipFlags_LicenseCanceled",
          "value": 8192
        },
        {
          "name": "k_EAppOwnershipFlags_AutoGrant",
          "value": 16384
        },
        {
          "name": "k_EAppOwnershipFlags_PendingGift",
          "value": 32768
        },
        {
          "name": "k_EAppOwnershipFlags_RentalNotActivated",
          "value": 65536
        },
        {
          "name": "k_EAppOwnershipFlags_Rental",
          "value": 131072
        },
        {
          "name": "k_EAppOwnershipFlags_SiteLicense",
          "value": 262144
        },
        {
          "name": "k_EAppOwnershipFlags_LegacyFreeSub",
          "value": 524288
        },
        {
          "name": "k_EAppOwnershipFlags_InvalidOSType",
          "value": 1048576
        }
      ]
    },
    {
      "enumname": "EAppType",
      "values": [
        {
          "name": "k_EAppType_Invalid",
          "value": 0
        },
        {
          "name": "k_EAppType_Game",
          "value": 1
        },
        {
          "name": "k_EAppType_Application",
          "value": 2
        },
        {
          "name": "k_EAppType_Tool",
          "value": 4
        },
        {
          "name": "k_EAppType_Demo",
          "value": 8
        },
        {
          "name": "k_EAppType_Media_DEPRECATED",
          "value": 16
        },
        {
          "name": "k_EAppType_DLC",
          "value": 32
        },
        {
          "name": "k_EAppType_Guide",
          "value": 64
        },
        {
          "name": "k_EAppType_Driver",
          "value": 128
        },
        {
          "name": "k_EAppType_Config",
          "value": 256
        },
        {
          "name": "k_EAppType_Hardware",
          "value": 512
        },
        {
          "name": "k_EAppType_Franchise",
          "value": 1024
        },
        {
          "name": "k_EAppType_Video",
          "value": 2048
        },
        {
          "name": "k_EAppType_Plugin",
          "value": 4096
        },
        {
          "name": "k_EAppType_MusicAlbum",
          "value": 8192
        },
        {
          "name": "k_EAppType_Series",
          "value": 16384
        },
        {
          "name": "k_EAppType_Comic_UNUSED",
          "value": 32768
        },
        {
          "name": "k_EAppType_Beta",
          "value": 65536
        },
        {
          "name": "k_EAppType_Shortcut",
          "value": 1073741824
        },
        {
          "name": "k_EAppType_DepotOnly",
          "value": -2147483648
        }
      ]
    },
    {
      "enumname": "ESteamUserStatType",
      "values": [
        {
          "name": "k_ESteamUserStatTypeINVALID",
          "value": 0
        },
        {
          "name": "k_ESteamUserStatTypeINT",
          "value": 1
        },
        {
          "name": "k_ESteamUserStatTypeFLOAT",
          "value": 2
        },
        {
          "name": "k_ESteamUserStatTypeAVGRATE",
          "value": 3
        },
        {
          "name": "k_ESteamUserStatTypeACHIEVEMENTS",
          "value": 4
        },
        {
          "name": "k_ESteamUserStatTypeGROUPACHIEVEMENTS",
          "value": 5
        },
        {
          "name": "k_ESteamUserStatTypeMAX",
          "value": 6
        }
      ]
    },
    {
      "enumname": "EChatEntryType",
      "values": [
        {
          "name": "k_EChatEntryTypeInvalid",
          "value": 0
        },
        {
          "name": "k_EChatEntryTypeChatMsg",
          "value": 1
        },
        {
          "name": "k_EChatEntryTypeTyping",
          "value": 2
        },
        {
          "name": "k_EChatEntryTypeInviteGame",
          "value": 3
        },
        {
          "name": "k_EChatEntryTypeEmote",
          "value": 4
        },
        {
          "name": "k_EChatEntryTypeLeftConversation",
          "value": 6
        },
        {
          "name": "k_EChatEntryTypeEntered",
          "value": 7
        },
        {
          "name": "k_EChatEntryTypeWasKicked",
          "value": 8
        },
        {
          "name": "k_EChatEntryTypeWasBanned",
          "value": 9
        },
        {
          "name": "k_EChatEntryTypeDisconnected",
          "value": 10
        },
        {
          "name": "k_EChatEntryTypeHistoricalChat",
          "value": 11
        },
        {
          "name": "k_EChatEntryTypeLinkBlocked",
          "value": 14
        }
      ]
    },
    {
      "enumname": "EChatRoomEnterResponse",
      "values": [
        {
          "name": "k_EChatRoomEnterResponseSuccess",
          "value": 1
        },
        {
          "name": "k_EChatRoomEnterResponseDoesntExist",
          "value": 2
        },
        {
          "name": "k_EChatRoomEnterResponseNotAllowed",
          "value": 3
        },
        {
          "name": "k_EChatRoomEnterResponseFull",
          "value": 4
        },
        {
          "name": "k_EChatRoomEnterResponseError",
          "value": 5
        },
        {
          "name": "k_EChatRoomEnterResponseBanned",
          "value": 6
        },
        {
          "name": "k_EChatRoomEnterResponseLimited",
          "value": 7
        },
        {
          "name": "k_EChatRoomEnterResponseClanDisabled",
          "value": 8
        },
        {
          "name": "k_EChatRoomEnterResponseCommunityBan",
          "value": 9
        },
        {
          "name": "k_EChatRoomEnterResponseMemberBlockedYou",
          "value": 10
        },
        {
          "name": "k_EChatRoomEnterResponseYouBlockedMember",
          "value": 11
        },
        {
          "name": "k_EChatRoomEnterResponseRatelimitExceeded",
          "value": 15
        }
      ]
    },
    {
      "enumname": "EChatSteamIDInstanceFlags",
      "values": [
        {
          "name": "k_EChatAccountInstanceMask",
          "value": 4095
        },
        {
          "name": "k_EChatInstanceFlagClan",
          "value": 524288
        },
        {
          "name": "k_EChatInstanceFlagLobby",
          "value": 262144
        },
        {
          "name": "k_EChatInstanceFlagMMSLobby",
          "value": 131072
        }
      ]
    },
    {
      "enumname": "EMarketingMessageFlags",
      "values": [
        {
          "name": "k_EMarketingMessageFlagsNone",
          "value": 0
        },
        {
          "name": "k_EMarketingMessageFlagsHighPriority",
          "value": 1
        },
        {
          "name": "k_EMarketingMessageFlagsPlatformWindows",
          "value": 2
        },
        {
          "name": "k_EMarketingMessageFlagsPlatformMac",
          "value": 4
        },
        {
          "name": "k_EMarketingMessageFlagsPlatformLinux",
          "value": 8
        },
        {
          "name": "k_EMarketingMessageFlagsPlatformRestrictions",
          "value": 14
        }
      ]
    },
    {
      "enumname": "ENotificationPosition",
      "values": [
        {
          "name": "k_EPositionTopLeft",
          "value": 0
        },
        {
          "name": "k_EPositionTopRight",
          "value": 1
        },
        {
          "name": "k_EPositionBottomLeft",
          "value": 2
        },
        {
          "name": "k_EPositionBottomRight",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EBroadcastUploadResult",
      "values": [
        {
          "name": "k_EBroadcastUploadResultNone",
          "value": 0
        },
        {
          "name": "k_EBroadcastUploadResultOK",
          "value": 1
        },
        {
          "name": "k_EBroadcastUploadResultInitFailed",
          "value": 2
        },
        {
          "name": "k_EBroadcastUploadResultFrameFailed",
          "value": 3
        },
        {
          "name": "k_EBroadcastUploadResultTimeout",
          "value": 4
        },
        {
          "name": "k_EBroadcastUploadResultBandwidthExceeded",
          "value": 5
        },
        {
          "name": "k_EBroadcastUploadResultLowFPS",
          "value": 6
        },
        {
          "name": "k_EBroadcastUploadResultMissingKeyFrames",
          "value": 7
        },
        {
          "name": "k_EBroadcastUploadResultNoConnection",
          "value": 8
        },
        {
          "name": "k_EBroadcastUploadResultRelayFailed",
          "value": 9
        },
        {
          "name": "k_EBroadcastUploadResultSettingsChanged",
          "value": 10
        },
        {
          "name": "k_EBroadcastUploadResultMissingAudio",
          "value": 11
        },
        {
          "name": "k_EBroadcastUploadResultTooFarBehind",
          "value": 12
        },
        {
          "name": "k_EBroadcastUploadResultTranscodeBehind",
          "value": 13
        },
        {
          "name": "k_EBroadcastUploadResultNotAllowedToPlay",
          "value": 14
        },
        {
          "name": "k_EBroadcastUploadResultBusy",
          "value": 15
        },
        {
          "name": "k_EBroadcastUploadResultBanned",
          "value": 16
        },
        {
          "name": "k_EBroadcastUploadResultAlreadyActive",
          "value": 17
        },
        {
          "name": "k_EBroadcastUploadResultForcedOff",
          "value": 18
        },
        {
          "name": "k_EBroadcastUploadResultAudioBehind",
          "value": 19
        },
        {
          "name": "k_EBroadcastUploadResultShutdown",
          "value": 20
        },
        {
          "name": "k_EBroadcastUploadResultDisconnect",
          "value": 21
        },
        {
          "name": "k_EBroadcastUploadResultVideoInitFailed",
          "value": 22
        },
        {
          "name": "k_EBroadcastUploadResultAudioInitFailed",
          "value": 23
        }
      ]
    },
    {
      "enumname": "ELaunchOptionType",
      "values": [
        {
          "name": "k_ELaunchOptionType_None",
          "value": 0
        },
        {
          "name": "k_ELaunchOptionType_Default",
          "value": 1
        },
        {
          "name": "k_ELaunchOptionType_SafeMode",
          "value": 2
        },
        {
          "name": "k_ELaunchOptionType_Multiplayer",
          "value": 3
        },
        {
          "name": "k_ELaunchOptionType_Config",
          "value": 4
        },
        {
          "name": "k_ELaunchOptionType_OpenVR",
          "value": 5
        },
        {
          "name": "k_ELaunchOptionType_Server",
          "value": 6
        },
        {
          "name": "k_ELaunchOptionType_Editor",
          "value": 7
        },
        {
          "name": "k_ELaunchOptionType_Manual",
          "value": 8
        },
        {
          "name": "k_ELaunchOptionType_Benchmark",
          "value": 9
        },
        {
          "name": "k_ELaunchOptionType_Option1",
          "value": 10
        },
        {
          "name": "k_ELaunchOptionType_Option2",
          "value": 11
        },
        {
          "name": "k_ELaunchOptionType_Option3",
          "value": 12
        },
        {
          "name": "k_ELaunchOptionType_OculusVR",
          "value": 13
        },
        {
          "name": "k_ELaunchOptionType_OpenVROverlay",
          "value": 14
        },
        {
          "name": "k_ELaunchOptionType_OSVR",
          "value": 15
        },
        {
          "name": "k_ELaunchOptionType_Dialog",
          "value": 1000
        }
      ]
    },
    {
      "enumname": "EVRHMDType",
      "values": [
        {
          "name": "k_eEVRHMDType_None",
          "value": -1
        },
        {
          "name": "k_eEVRHMDType_Unknown",
          "value": 0
        },
        {
          "name": "k_eEVRHMDType_HTC_Dev",
          "value": 1
        },
        {
          "name": "k_eEVRHMDType_HTC_VivePre",
          "value": 2
        },
        {
          "name": "k_eEVRHMDType_HTC_Vive",
          "value": 3
        },
        {
          "name": "k_eEVRHMDType_HTC_VivePro",
          "value": 4
        },
        {
          "name": "k_eEVRHMDType_HTC_ViveCosmos",
          "value": 5
        },
        {
          "name": "k_eEVRHMDType_HTC_Unknown",
          "value": 20
        },
        {
          "name": "k_eEVRHMDType_Oculus_DK1",
          "value": 21
        },
        {
          "name": "k_eEVRHMDType_Oculus_DK2",
          "value": 22
        },
        {
          "name": "k_eEVRHMDType_Oculus_Rift",
          "value": 23
        },
        {
          "name": "k_eEVRHMDType_Oculus_RiftS",
          "value": 24
        },
        {
          "name": "k_eEVRHMDType_Oculus_Quest",
          "value": 25
        },
        {
          "name": "k_eEVRHMDType_Oculus_Unknown",
          "value": 40
        },
        {
          "name": "k_eEVRHMDType_Acer_Unknown",
          "value": 50
        },
        {
          "name": "k_eEVRHMDType_Acer_WindowsMR",
          "value": 51
        },
        {
          "name": "k_eEVRHMDType_Dell_Unknown",
          "value": 60
        },
        {
          "name": "k_eEVRHMDType_Dell_Visor",
          "value": 61
        },
        {
          "name": "k_eEVRHMDType_Lenovo_Unknown",
          "value": 70
        },
        {
          "name": "k_eEVRHMDType_Lenovo_Explorer",
          "value": 71
        },
        {
          "name": "k_eEVRHMDType_HP_Unknown",
          "value": 80
        },
        {
          "name": "k_eEVRHMDType_HP_WindowsMR",
          "value": 81
        },
        {
          "name": "k_eEVRHMDType_HP_Reverb",
          "value": 82
        },
        {
          "name": "k_eEVRHMDType_Samsung_Unknown",
          "value": 90
        },
        {
          "name": "k_eEVRHMDType_Samsung_Odyssey",
          "value": 91
        },
        {
          "name": "k_eEVRHMDType_Unannounced_Unknown",
          "value": 100
        },
        {
          "name": "k_eEVRHMDType_Unannounced_WindowsMR",
          "value": 101
        },
        {
          "name": "k_eEVRHMDType_vridge",
          "value": 110
        },
        {
          "name": "k_eEVRHMDType_Huawei_Unknown",
          "value": 120
        },
        {
          "name": "k_eEVRHMDType_Huawei_VR2",
          "value": 121
        },
        {
          "name": "k_eEVRHMDType_Huawei_EndOfRange",
          "value": 129
        },
        {
          "name": "k_eEVRHmdType_Valve_Unknown",
          "value": 130
        },
        {
          "name": "k_eEVRHmdType_Valve_Index",
          "value": 131
        }
      ]
    },
    {
      "enumname": "EMarketNotAllowedReasonFlags",
      "values": [
        {
          "name": "k_EMarketNotAllowedReason_None",
          "value": 0
        },
        {
          "name": "k_EMarketNotAllowedReason_TemporaryFailure",
          "value": 1
        },
        {
          "name": "k_EMarketNotAllowedReason_AccountDisabled",
          "value": 2
        },
        {
          "name": "k_EMarketNotAllowedReason_AccountLockedDown",
          "value": 4
        },
        {
          "name": "k_EMarketNotAllowedReason_AccountLimited",
          "value": 8
        },
        {
          "name": "k_EMarketNotAllowedReason_TradeBanned",
          "value": 16
        },
        {
          "name": "k_EMarketNotAllowedReason_AccountNotTrusted",
          "value": 32
        },
        {
          "name": "k_EMarketNotAllowedReason_SteamGuardNotEnabled",
          "value": 64
        },
        {
          "name": "k_EMarketNotAllowedReason_SteamGuardOnlyRecentlyEnabled",
          "value": 128
        },
        {
          "name": "k_EMarketNotAllowedReason_RecentPasswordReset",
          "value": 256
        },
        {
          "name": "k_EMarketNotAllowedReason_NewPaymentMethod",
          "value": 512
        },
        {
          "name": "k_EMarketNotAllowedReason_InvalidCookie",
          "value": 1024
        },
        {
          "name": "k_EMarketNotAllowedReason_UsingNewDevice",
          "value": 2048
        },
        {
          "name": "k_EMarketNotAllowedReason_RecentSelfRefund",
          "value": 4096
        },
        {
          "name": "k_EMarketNotAllowedReason_NewPaymentMethodCannotBeVerified",
          "value": 8192
        },
        {
          "name": "k_EMarketNotAllowedReason_NoRecentPurchases",
          "value": 16384
        },
        {
          "name": "k_EMarketNotAllowedReason_AcceptedWalletGift",
          "value": 32768
        }
      ]
    },
    {
      "enumname": "EDurationControlProgress",
      "values": [
        {
          "name": "k_EDurationControlProgress_Full",
          "value": 0
        },
        {
          "name": "k_EDurationControlProgress_Half",
          "value": 1
        },
        {
          "name": "k_EDurationControlProgress_None",
          "value": 2
        },
        {
          "name": "k_EDurationControl_ExitSoon_3h",
          "value": 3
        },
        {
          "name": "k_EDurationControl_ExitSoon_5h",
          "value": 4
        },
        {
          "name": "k_EDurationControl_ExitSoon_Night",
          "value": 5
        }
      ]
    },
    {
      "enumname": "EDurationControlNotification",
      "values": [
        {
          "name": "k_EDurationControlNotification_None",
          "value": 0
        },
        {
          "name": "k_EDurationControlNotification_1Hour",
          "value": 1
        },
        {
          "name": "k_EDurationControlNotification_3Hours",
          "value": 2
        },
        {
          "name": "k_EDurationControlNotification_HalfProgress",
          "value": 3
        },
        {
          "name": "k_EDurationControlNotification_NoProgress",
          "value": 4
        },
        {
          "name": "k_EDurationControlNotification_ExitSoon_3h",
          "value": 5
        },
        {
          "name": "k_EDurationControlNotification_ExitSoon_5h",
          "value": 6
        },
        {
          "name": "k_EDurationControlNotification_ExitSoon_Night",
          "value": 7
        }
      ]
    },
    {
      "enumname": "EGameSearchErrorCode_t",
      "values": [
        {
          "name": "k_EGameSearchErrorCode_OK",
          "value": 1
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_Search_Already_In_Progress",
          "value": 2
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_No_Search_In_Progress",
          "value": 3
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_Not_Lobby_Leader",
          "value": 4
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_No_Host_Available",
          "value": 5
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_Search_Params_Invalid",
          "value": 6
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_Offline",
          "value": 7
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_NotAuthorized",
          "value": 8
        },
        {
          "name": "k_EGameSearchErrorCode_Failed_Unknown_Error",
          "value": 9
        }
      ]
    },
    {
      "enumname": "EPlayerResult_t",
      "values": [
        {
          "name": "k_EPlayerResultFailedToConnect",
          "value": 1
        },
        {
          "name": "k_EPlayerResultAbandoned",
          "value": 2
        },
        {
          "name": "k_EPlayerResultKicked",
          "value": 3
        },
        {
          "name": "k_EPlayerResultIncomplete",
          "value": 4
        },
        {
          "name": "k_EPlayerResultCompleted",
          "value": 5
        }
      ]
    },
    {
      "enumname": "ESteamIPv6ConnectivityProtocol",
      "values": [
        {
          "name": "k_ESteamIPv6ConnectivityProtocol_Invalid",
          "value": 0
        },
        {
          "name": "k_ESteamIPv6ConnectivityProtocol_HTTP",
          "value": 1
        },
        {
          "name": "k_ESteamIPv6ConnectivityProtocol_UDP",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ESteamIPv6ConnectivityState",
      "values": [
        {
          "name": "k_ESteamIPv6ConnectivityState_Unknown",
          "value": 0
        },
        {
          "name": "k_ESteamIPv6ConnectivityState_Good",
          "value": 1
        },
        {
          "name": "k_ESteamIPv6ConnectivityState_Bad",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EFailureType",
      "values": [
        {
          "name": "k_EFailureFlushedCallbackQueue",
          "value": 0
        },
        {
          "name": "k_EFailurePipeFail",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EFriendRelationship",
      "values": [
        {
          "name": "k_EFriendRelationshipNone",
          "value": 0
        },
        {
          "name": "k_EFriendRelationshipBlocked",
          "value": 1
        },
        {
          "name": "k_EFriendRelationshipRequestRecipient",
          "value": 2
        },
        {
          "name": "k_EFriendRelationshipFriend",
          "value": 3
        },
        {
          "name": "k_EFriendRelationshipRequestInitiator",
          "value": 4
        },
        {
          "name": "k_EFriendRelationshipIgnored",
          "value": 5
        },
        {
          "name": "k_EFriendRelationshipIgnoredFriend",
          "value": 6
        },
        {
          "name": "k_EFriendRelationshipSuggested_DEPRECATED",
          "value": 7
        },
        {
          "name": "k_EFriendRelationshipMax",
          "value": 8
        }
      ]
    },
    {
      "enumname": "EPersonaState",
      "values": [
        {
          "name": "k_EPersonaStateOffline",
          "value": 0
        },
        {
          "name": "k_EPersonaStateOnline",
          "value": 1
        },
        {
          "name": "k_EPersonaStateBusy",
          "value": 2
        },
        {
          "name": "k_EPersonaStateAway",
          "value": 3
        },
        {
          "name": "k_EPersonaStateSnooze",
          "value": 4
        },
        {
          "name": "k_EPersonaStateLookingToTrade",
          "value": 5
        },
        {
          "name": "k_EPersonaStateLookingToPlay",
          "value": 6
        },
        {
          "name": "k_EPersonaStateInvisible",
          "value": 7
        },
        {
          "name": "k_EPersonaStateMax",
          "value": 8
        }
      ]
    },
    {
      "enumname": "EFriendFlags",
      "values": [
        {
          "name": "k_EFriendFlagNone",
          "value": 0
        },
        {
          "name": "k_EFriendFlagBlocked",
          "value": 1
        },
        {
          "name": "k_EFriendFlagFriendshipRequested",
          "value": 2
        },
        {
          "name": "k_EFriendFlagImmediate",
          "value": 4
        },
        {
          "name": "k_EFriendFlagClanMember",
          "value": 8
        },
        {
          "name": "k_EFriendFlagOnGameServer",
          "value": 16
        },
        {
          "name": "k_EFriendFlagRequestingFriendship",
          "value": 128
        },
        {
          "name": "k_EFriendFlagRequestingInfo",
          "value": 256
        },
        {
          "name": "k_EFriendFlagIgnored",
          "value": 512
        },
        {
          "name": "k_EFriendFlagIgnoredFriend",
          "value": 1024
        },
        {
          "name": "k_EFriendFlagChatMember",
          "value": 4096
        },
        {
          "name": "k_EFriendFlagAll",
          "value": 65535
        }
      ]
    },
    {
      "enumname": "EUserRestriction",
      "values": [
        {
          "name": "k_nUserRestrictionNone",
          "value": 0
        },
        {
          "name": "k_nUserRestrictionUnknown",
          "value": 1
        },
        {
          "name": "k_nUserRestrictionAnyChat",
          "value": 2
        },
        {
          "name": "k_nUserRestrictionVoiceChat",
          "value": 4
        },
        {
          "name": "k_nUserRestrictionGroupChat",
          "value": 8
        },
        {
          "name": "k_nUserRestrictionRating",
          "value": 16
        },
        {
          "name": "k_nUserRestrictionGameInvites",
          "value": 32
        },
        {
          "name": "k_nUserRestrictionTrading",
          "value": 64
        }
      ]
    },
    {
      "enumname": "EOverlayToStoreFlag",
      "values": [
        {
          "name": "k_EOverlayToStoreFlag_None",
          "value": 0
        },
        {
          "name": "k_EOverlayToStoreFlag_AddToCart",
          "value": 1
        },
        {
          "name": "k_EOverlayToStoreFlag_AddToCartAndShow",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EActivateGameOverlayToWebPageMode",
      "values": [
        {
          "name": "k_EActivateGameOverlayToWebPageMode_Default",
          "value": 0
        },
        {
          "name": "k_EActivateGameOverlayToWebPageMode_Modal",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EPersonaChange",
      "values": [
        {
          "name": "k_EPersonaChangeName",
          "value": 1
        },
        {
          "name": "k_EPersonaChangeStatus",
          "value": 2
        },
        {
          "name": "k_EPersonaChangeComeOnline",
          "value": 4
        },
        {
          "name": "k_EPersonaChangeGoneOffline",
          "value": 8
        },
        {
          "name": "k_EPersonaChangeGamePlayed",
          "value": 16
        },
        {
          "name": "k_EPersonaChangeGameServer",
          "value": 32
        },
        {
          "name": "k_EPersonaChangeAvatar",
          "value": 64
        },
        {
          "name": "k_EPersonaChangeJoinedSource",
          "value": 128
        },
        {
          "name": "k_EPersonaChangeLeftSource",
          "value": 256
        },
        {
          "name": "k_EPersonaChangeRelationshipChanged",
          "value": 512
        },
        {
          "name": "k_EPersonaChangeNameFirstSet",
          "value": 1024
        },
        {
          "name": "k_EPersonaChangeBroadcast",
          "value": 2048
        },
        {
          "name": "k_EPersonaChangeNickname",
          "value": 4096
        },
        {
          "name": "k_EPersonaChangeSteamLevel",
          "value": 8192
        },
        {
          "name": "k_EPersonaChangeRichPresence",
          "value": 16384
        }
      ]
    },
    {
      "enumname": "ESteamAPICallFailure",
      "values": [
        {
          "name": "k_ESteamAPICallFailureNone",
          "value": -1
        },
        {
          "name": "k_ESteamAPICallFailureSteamGone",
          "value": 0
        },
        {
          "name": "k_ESteamAPICallFailureNetworkFailure",
          "value": 1
        },
        {
          "name": "k_ESteamAPICallFailureInvalidHandle",
          "value": 2
        },
        {
          "name": "k_ESteamAPICallFailureMismatchedCallback",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EGamepadTextInputMode",
      "values": [
        {
          "name": "k_EGamepadTextInputModeNormal",
          "value": 0
        },
        {
          "name": "k_EGamepadTextInputModePassword",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EGamepadTextInputLineMode",
      "values": [
        {
          "name": "k_EGamepadTextInputLineModeSingleLine",
          "value": 0
        },
        {
          "name": "k_EGamepadTextInputLineModeMultipleLines",
          "value": 1
        }
      ]
    },
    {
      "enumname": "ECheckFileSignature",
      "values": [
        {
          "name": "k_ECheckFileSignatureInvalidSignature",
          "value": 0
        },
        {
          "name": "k_ECheckFileSignatureValidSignature",
          "value": 1
        },
        {
          "name": "k_ECheckFileSignatureFileNotFound",
          "value": 2
        },
        {
          "name": "k_ECheckFileSignatureNoSignaturesFoundForThisApp",
          "value": 3
        },
        {
          "name": "k_ECheckFileSignatureNoSignaturesFoundForThisFile",
          "value": 4
        }
      ]
    },
    {
      "enumname": "EMatchMakingServerResponse",
      "values": [
        {
          "name": "eServerResponded",
          "value": 0
        },
        {
          "name": "eServerFailedToRespond",
          "value": 1
        },
        {
          "name": "eNoServersListedOnMasterServer",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ELobbyType",
      "values": [
        {
          "name": "k_ELobbyTypePrivate",
          "value": 0
        },
        {
          "name": "k_ELobbyTypeFriendsOnly",
          "value": 1
        },
        {
          "name": "k_ELobbyTypePublic",
          "value": 2
        },
        {
          "name": "k_ELobbyTypeInvisible",
          "value": 3
        },
        {
          "name": "k_ELobbyTypePrivateUnique",
          "value": 4
        }
      ]
    },
    {
      "enumname": "ELobbyComparison",
      "values": [
        {
          "name": "k_ELobbyComparisonEqualToOrLessThan",
          "value": -2
        },
        {
          "name": "k_ELobbyComparisonLessThan",
          "value": -1
        },
        {
          "name": "k_ELobbyComparisonEqual",
          "value": 0
        },
        {
          "name": "k_ELobbyComparisonGreaterThan",
          "value": 1
        },
        {
          "name": "k_ELobbyComparisonEqualToOrGreaterThan",
          "value": 2
        },
        {
          "name": "k_ELobbyComparisonNotEqual",
          "value": 3
        }
      ]
    },
    {
      "enumname": "ELobbyDistanceFilter",
      "values": [
        {
          "name": "k_ELobbyDistanceFilterClose",
          "value": 0
        },
        {
          "name": "k_ELobbyDistanceFilterDefault",
          "value": 1
        },
        {
          "name": "k_ELobbyDistanceFilterFar",
          "value": 2
        },
        {
          "name": "k_ELobbyDistanceFilterWorldwide",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EChatMemberStateChange",
      "values": [
        {
          "name": "k_EChatMemberStateChangeEntered",
          "value": 1
        },
        {
          "name": "k_EChatMemberStateChangeLeft",
          "value": 2
        },
        {
          "name": "k_EChatMemberStateChangeDisconnected",
          "value": 4
        },
        {
          "name": "k_EChatMemberStateChangeKicked",
          "value": 8
        },
        {
          "name": "k_EChatMemberStateChangeBanned",
          "value": 16
        }
      ]
    },
    {
      "enumname": "ESteamPartyBeaconLocationType",
      "values": [
        {
          "name": "k_ESteamPartyBeaconLocationType_Invalid",
          "value": 0
        },
        {
          "name": "k_ESteamPartyBeaconLocationType_ChatGroup",
          "value": 1
        },
        {
          "name": "k_ESteamPartyBeaconLocationType_Max",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ESteamPartyBeaconLocationData",
      "values": [
        {
          "name": "k_ESteamPartyBeaconLocationDataInvalid",
          "value": 0
        },
        {
          "name": "k_ESteamPartyBeaconLocationDataName",
          "value": 1
        },
        {
          "name": "k_ESteamPartyBeaconLocationDataIconURLSmall",
          "value": 2
        },
        {
          "name": "k_ESteamPartyBeaconLocationDataIconURLMedium",
          "value": 3
        },
        {
          "name": "k_ESteamPartyBeaconLocationDataIconURLLarge",
          "value": 4
        }
      ]
    },
    {
      "enumname": "PlayerAcceptState_t",
      "values": [
        {
          "name": "k_EStateUnknown",
          "value": 0
        },
        {
          "name": "k_EStatePlayerAccepted",
          "value": 1
        },
        {
          "name": "k_EStatePlayerDeclined",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ERemoteStoragePlatform",
      "values": [
        {
          "name": "k_ERemoteStoragePlatformNone",
          "value": 0
        },
        {
          "name": "k_ERemoteStoragePlatformWindows",
          "value": 1
        },
        {
          "name": "k_ERemoteStoragePlatformOSX",
          "value": 2
        },
        {
          "name": "k_ERemoteStoragePlatformPS3",
          "value": 4
        },
        {
          "name": "k_ERemoteStoragePlatformLinux",
          "value": 8
        },
        {
          "name": "k_ERemoteStoragePlatformSwitch",
          "value": 16
        },
        {
          "name": "k_ERemoteStoragePlatformAndroid",
          "value": 32
        },
        {
          "name": "k_ERemoteStoragePlatformIOS",
          "value": 64
        },
        {
          "name": "k_ERemoteStoragePlatformAll",
          "value": -1
        }
      ]
    },
    {
      "enumname": "ERemoteStoragePublishedFileVisibility",
      "values": [
        {
          "name": "k_ERemoteStoragePublishedFileVisibilityPublic",
          "value": 0
        },
        {
          "name": "k_ERemoteStoragePublishedFileVisibilityFriendsOnly",
          "value": 1
        },
        {
          "name": "k_ERemoteStoragePublishedFileVisibilityPrivate",
          "value": 2
        },
        {
          "name": "k_ERemoteStoragePublishedFileVisibilityUnlisted",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EWorkshopFileType",
      "values": [
        {
          "name": "k_EWorkshopFileTypeFirst",
          "value": 0
        },
        {
          "name": "k_EWorkshopFileTypeCommunity",
          "value": 0
        },
        {
          "name": "k_EWorkshopFileTypeMicrotransaction",
          "value": 1
        },
        {
          "name": "k_EWorkshopFileTypeCollection",
          "value": 2
        },
        {
          "name": "k_EWorkshopFileTypeArt",
          "value": 3
        },
        {
          "name": "k_EWorkshopFileTypeVideo",
          "value": 4
        },
        {
          "name": "k_EWorkshopFileTypeScreenshot",
          "value": 5
        },
        {
          "name": "k_EWorkshopFileTypeGame",
          "value": 6
        },
        {
          "name": "k_EWorkshopFileTypeSoftware",
          "value": 7
        },
        {
          "name": "k_EWorkshopFileTypeConcept",
          "value": 8
        },
        {
          "name": "k_EWorkshopFileTypeWebGuide",
          "value": 9
        },
        {
          "name": "k_EWorkshopFileTypeIntegratedGuide",
          "value": 10
        },
        {
          "name": "k_EWorkshopFileTypeMerch",
          "value": 11
        },
        {
          "name": "k_EWorkshopFileTypeControllerBinding",
          "value": 12
        },
        {
          "name": "k_EWorkshopFileTypeSteamworksAccessInvite",
          "value": 13
        },
        {
          "name": "k_EWorkshopFileTypeSteamVideo",
          "value": 14
        },
        {
          "name": "k_EWorkshopFileTypeGameManagedItem",
          "value": 15
        },
        {
          "name": "k_EWorkshopFileTypeMax",
          "value": 16
        }
      ]
    },
    {
      "enumname": "EWorkshopVote",
      "values": [
        {
          "name": "k_EWorkshopVoteUnvoted",
          "value": 0
        },
        {
          "name": "k_EWorkshopVoteFor",
          "value": 1
        },
        {
          "name": "k_EWorkshopVoteAgainst",
          "value": 2
        },
        {
          "name": "k_EWorkshopVoteLater",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EWorkshopFileAction",
      "values": [
        {
          "name": "k_EWorkshopFileActionPlayed",
          "value": 0
        },
        {
          "name": "k_EWorkshopFileActionCompleted",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EWorkshopEnumerationType",
      "values": [
        {
          "name": "k_EWorkshopEnumerationTypeRankedByVote",
          "value": 0
        },
        {
          "name": "k_EWorkshopEnumerationTypeRecent",
          "value": 1
        },
        {
          "name": "k_EWorkshopEnumerationTypeTrending",
          "value": 2
        },
        {
          "name": "k_EWorkshopEnumerationTypeFavoritesOfFriends",
          "value": 3
        },
        {
          "name": "k_EWorkshopEnumerationTypeVotedByFriends",
          "value": 4
        },
        {
          "name": "k_EWorkshopEnumerationTypeContentByFriends",
          "value": 5
        },
        {
          "name": "k_EWorkshopEnumerationTypeRecentFromFollowedUsers",
          "value": 6
        }
      ]
    },
    {
      "enumname": "EWorkshopVideoProvider",
      "values": [
        {
          "name": "k_EWorkshopVideoProviderNone",
          "value": 0
        },
        {
          "name": "k_EWorkshopVideoProviderYoutube",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EUGCReadAction",
      "values": [
        {
          "name": "k_EUGCRead_ContinueReadingUntilFinished",
          "value": 0
        },
        {
          "name": "k_EUGCRead_ContinueReading",
          "value": 1
        },
        {
          "name": "k_EUGCRead_Close",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ELeaderboardDataRequest",
      "values": [
        {
          "name": "k_ELeaderboardDataRequestGlobal",
          "value": 0
        },
        {
          "name": "k_ELeaderboardDataRequestGlobalAroundUser",
          "value": 1
        },
        {
          "name": "k_ELeaderboardDataRequestFriends",
          "value": 2
        },
        {
          "name": "k_ELeaderboardDataRequestUsers",
          "value": 3
        }
      ]
    },
    {
      "enumname": "ELeaderboardSortMethod",
      "values": [
        {
          "name": "k_ELeaderboardSortMethodNone",
          "value": 0
        },
        {
          "name": "k_ELeaderboardSortMethodAscending",
          "value": 1
        },
        {
          "name": "k_ELeaderboardSortMethodDescending",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ELeaderboardDisplayType",
      "values": [
        {
          "name": "k_ELeaderboardDisplayTypeNone",
          "value": 0
        },
        {
          "name": "k_ELeaderboardDisplayTypeNumeric",
          "value": 1
        },
        {
          "name": "k_ELeaderboardDisplayTypeTimeSeconds",
          "value": 2
        },
        {
          "name": "k_ELeaderboardDisplayTypeTimeMilliSeconds",
          "value": 3
        }
      ]
    },
    {
      "enumname": "ELeaderboardUploadScoreMethod",
      "values": [
        {
          "name": "k_ELeaderboardUploadScoreMethodNone",
          "value": 0
        },
        {
          "name": "k_ELeaderboardUploadScoreMethodKeepBest",
          "value": 1
        },
        {
          "name": "k_ELeaderboardUploadScoreMethodForceUpdate",
          "value": 2
        }
      ]
    },
    {
      "enumname": "ERegisterActivationCodeResult",
      "values": [
        {
          "name": "k_ERegisterActivationCodeResultOK",
          "value": 0
        },
        {
          "name": "k_ERegisterActivationCodeResultFail",
          "value": 1
        },
        {
          "name": "k_ERegisterActivationCodeResultAlreadyRegistered",
          "value": 2
        },
        {
          "name": "k_ERegisterActivationCodeResultTimeout",
          "value": 3
        },
        {
          "name": "k_ERegisterActivationCodeAlreadyOwned",
          "value": 4
        }
      ]
    },
    {
      "enumname": "EP2PSessionError",
      "values": [
        {
          "name": "k_EP2PSessionErrorNone",
          "value": 0
        },
        {
          "name": "k_EP2PSessionErrorNotRunningApp",
          "value": 1
        },
        {
          "name": "k_EP2PSessionErrorNoRightsToApp",
          "value": 2
        },
        {
          "name": "k_EP2PSessionErrorDestinationNotLoggedIn",
          "value": 3
        },
        {
          "name": "k_EP2PSessionErrorTimeout",
          "value": 4
        },
        {
          "name": "k_EP2PSessionErrorMax",
          "value": 5
        }
      ]
    },
    {
      "enumname": "EP2PSend",
      "values": [
        {
          "name": "k_EP2PSendUnreliable",
          "value": 0
        },
        {
          "name": "k_EP2PSendUnreliableNoDelay",
          "value": 1
        },
        {
          "name": "k_EP2PSendReliable",
          "value": 2
        },
        {
          "name": "k_EP2PSendReliableWithBuffering",
          "value": 3
        }
      ]
    },
    {
      "enumname": "ESNetSocketState",
      "values": [
        {
          "name": "k_ESNetSocketStateInvalid",
          "value": 0
        },
        {
          "name": "k_ESNetSocketStateConnected",
          "value": 1
        },
        {
          "name": "k_ESNetSocketStateInitiated",
          "value": 10
        },
        {
          "name": "k_ESNetSocketStateLocalCandidatesFound",
          "value": 11
        },
        {
          "name": "k_ESNetSocketStateReceivedRemoteCandidates",
          "value": 12
        },
        {
          "name": "k_ESNetSocketStateChallengeHandshake",
          "value": 15
        },
        {
          "name": "k_ESNetSocketStateDisconnecting",
          "value": 21
        },
        {
          "name": "k_ESNetSocketStateLocalDisconnect",
          "value": 22
        },
        {
          "name": "k_ESNetSocketStateTimeoutDuringConnect",
          "value": 23
        },
        {
          "name": "k_ESNetSocketStateRemoteEndDisconnected",
          "value": 24
        },
        {
          "name": "k_ESNetSocketStateConnectionBroken",
          "value": 25
        }
      ]
    },
    {
      "enumname": "ESNetSocketConnectionType",
      "values": [
        {
          "name": "k_ESNetSocketConnectionTypeNotConnected",
          "value": 0
        },
        {
          "name": "k_ESNetSocketConnectionTypeUDP",
          "value": 1
        },
        {
          "name": "k_ESNetSocketConnectionTypeUDPRelay",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EVRScreenshotType",
      "values": [
        {
          "name": "k_EVRScreenshotType_None",
          "value": 0
        },
        {
          "name": "k_EVRScreenshotType_Mono",
          "value": 1
        },
        {
          "name": "k_EVRScreenshotType_Stereo",
          "value": 2
        },
        {
          "name": "k_EVRScreenshotType_MonoCubemap",
          "value": 3
        },
        {
          "name": "k_EVRScreenshotType_MonoPanorama",
          "value": 4
        },
        {
          "name": "k_EVRScreenshotType_StereoPanorama",
          "value": 5
        }
      ]
    },
    {
      "enumname": "AudioPlayback_Status",
      "values": [
        {
          "name": "AudioPlayback_Undefined",
          "value": 0
        },
        {
          "name": "AudioPlayback_Playing",
          "value": 1
        },
        {
          "name": "AudioPlayback_Paused",
          "value": 2
        },
        {
          "name": "AudioPlayback_Idle",
          "value": 3
        }
      ]
    },
    {
      "enumname": "EHTTPMethod",
      "values": [
        {
          "name": "k_EHTTPMethodInvalid",
          "value": 0
        },
        {
          "name": "k_EHTTPMethodGET",
          "value": 1
        },
        {
          "name": "k_EHTTPMethodHEAD",
          "value": 2
        },
        {
          "name": "k_EHTTPMethodPOST",
          "value": 3
        },
        {
          "name": "k_EHTTPMethodPUT",
          "value": 4
        },
        {
          "name": "k_EHTTPMethodDELETE",
          "value": 5
        },
        {
          "name": "k_EHTTPMethodOPTIONS",
          "value": 6
        },
        {
          "name": "k_EHTTPMethodPATCH",
          "value": 7
        }
      ]
    },
    {
      "enumname": "EHTTPStatusCode",
      "values": [
        {
          "name": "k_EHTTPStatusCodeInvalid",
          "value": 0
        },
        {
          "name": "k_EHTTPStatusCode100Continue",
          "value": 100
        },
        {
          "name": "k_EHTTPStatusCode101SwitchingProtocols",
          "value": 101
        },
        {
          "name": "k_EHTTPStatusCode200OK",
          "value": 200
        },
        {
          "name": "k_EHTTPStatusCode201Created",
          "value": 201
        },
        {
          "name": "k_EHTTPStatusCode202Accepted",
          "value": 202
        },
        {
          "name": "k_EHTTPStatusCode203NonAuthoritative",
          "value": 203
        },
        {
          "name": "k_EHTTPStatusCode204NoContent",
          "value": 204
        },
        {
          "name": "k_EHTTPStatusCode205ResetContent",
          "value": 205
        },
        {
          "name": "k_EHTTPStatusCode206PartialContent",
          "value": 206
        },
        {
          "name": "k_EHTTPStatusCode300MultipleChoices",
          "value": 300
        },
        {
          "name": "k_EHTTPStatusCode301MovedPermanently",
          "value": 301
        },
        {
          "name": "k_EHTTPStatusCode302Found",
          "value": 302
        },
        {
          "name": "k_EHTTPStatusCode303SeeOther",
          "value": 303
        },
        {
          "name": "k_EHTTPStatusCode304NotModified",
          "value": 304
        },
        {
          "name": "k_EHTTPStatusCode305UseProxy",
          "value": 305
        },
        {
          "name": "k_EHTTPStatusCode307TemporaryRedirect",
          "value": 307
        },
        {
          "name": "k_EHTTPStatusCode400BadRequest",
          "value": 400
        },
        {
          "name": "k_EHTTPStatusCode401Unauthorized",
          "value": 401
        },
        {
          "name": "k_EHTTPStatusCode402PaymentRequired",
          "value": 402
        },
        {
          "name": "k_EHTTPStatusCode403Forbidden",
          "value": 403
        },
        {
          "name": "k_EHTTPStatusCode404NotFound",
          "value": 404
        },
        {
          "name": "k_EHTTPStatusCode405MethodNotAllowed",
          "value": 405
        },
        {
          "name": "k_EHTTPStatusCode406NotAcceptable",
          "value": 406
        },
        {
          "name": "k_EHTTPStatusCode407ProxyAuthRequired",
          "value": 407
        },
        {
          "name": "k_EHTTPStatusCode408RequestTimeout",
          "value": 408
        },
        {
          "name": "k_EHTTPStatusCode409Conflict",
          "value": 409
        },
        {
          "name": "k_EHTTPStatusCode410Gone",
          "value": 410
        },
        {
          "name": "k_EHTTPStatusCode411LengthRequired",
          "value": 411
        },
        {
          "name": "k_EHTTPStatusCode412PreconditionFailed",
          "value": 412
        },
        {
          "name": "k_EHTTPStatusCode413RequestEntityTooLarge",
          "value": 413
        },
        {
          "name": "k_EHTTPStatusCode414RequestURITooLong",
          "value": 414
        },
        {
          "name": "k_EHTTPStatusCode415UnsupportedMediaType",
          "value": 415
        },
        {
          "name": "k_EHTTPStatusCode416RequestedRangeNotSatisfiable",
          "value": 416
        },
        {
          "name": "k_EHTTPStatusCode417ExpectationFailed",
          "value": 417
        },
        {
          "name": "k_EHTTPStatusCode4xxUnknown",
          "value": 418
        },
        {
          "name": "k_EHTTPStatusCode429TooManyRequests",
          "value": 429
        },
        {
          "name": "k_EHTTPStatusCode500InternalServerError",
          "value": 500
        },
        {
          "name": "k_EHTTPStatusCode501NotImplemented",
          "value": 501
        },
        {
          "name": "k_EHTTPStatusCode502BadGateway",
          "value": 502
        },
        {
          "name": "k_EHTTPStatusCode503ServiceUnavailable",
          "value": 503
        },
        {
          "name": "k_EHTTPStatusCode504GatewayTimeout",
          "value": 504
        },
        {
          "name": "k_EHTTPStatusCode505HTTPVersionNotSupported",
          "value": 505
        },
        {
          "name": "k_EHTTPStatusCode5xxUnknown",
          "value": 599
        }
      ]
    },
    {
      "enumname": "EInputSourceMode",
      "values": [
        {
          "name": "k_EInputSourceMode_None",
          "value": 0
        },
        {
          "name": "k_EInputSourceMode_Dpad",
          "value": 1
        },
        {
          "name": "k_EInputSourceMode_Buttons",
          "value": 2
        },
        {
          "name": "k_EInputSourceMode_FourButtons",
          "value": 3
        },
        {
          "name": "k_EInputSourceMode_AbsoluteMouse",
          "value": 4
        },
        {
          "name": "k_EInputSourceMode_RelativeMouse",
          "value": 5
        },
        {
          "name": "k_EInputSourceMode_JoystickMove",
          "value": 6
        },
        {
          "name": "k_EInputSourceMode_JoystickMouse",
          "value": 7
        },
        {
          "name": "k_EInputSourceMode_JoystickCamera",
          "value": 8
        },
        {
          "name": "k_EInputSourceMode_ScrollWheel",
          "value": 9
        },
        {
          "name": "k_EInputSourceMode_Trigger",
          "value": 10
        },
        {
          "name": "k_EInputSourceMode_TouchMenu",
          "value": 11
        },
        {
          "name": "k_EInputSourceMode_MouseJoystick",
          "value": 12
        },
        {
          "name": "k_EInputSourceMode_MouseRegion",
          "value": 13
        },
        {
          "name": "k_EInputSourceMode_RadialMenu",
          "value": 14
        },
        {
          "name": "k_EInputSourceMode_SingleButton",
          "value": 15
        },
        {
          "name": "k_EInputSourceMode_Switches",
          "value": 16
        }
      ]
    },
    {
      "enumname": "EInputActionOrigin",
      "values": [
        {
          "name": "k_EInputActionOrigin_None",
          "value": 0
        },
        {
          "name": "k_EInputActionOrigin_SteamController_A",
          "value": 1
        },
        {
          "name": "k_EInputActionOrigin_SteamController_B",
          "value": 2
        },
        {
          "name": "k_EInputActionOrigin_SteamController_X",
          "value": 3
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Y",
          "value": 4
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftBumper",
          "value": 5
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightBumper",
          "value": 6
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftGrip",
          "value": 7
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightGrip",
          "value": 8
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Start",
          "value": 9
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Back",
          "value": 10
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_Touch",
          "value": 11
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_Swipe",
          "value": 12
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_Click",
          "value": 13
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_DPadNorth",
          "value": 14
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_DPadSouth",
          "value": 15
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_DPadWest",
          "value": 16
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftPad_DPadEast",
          "value": 17
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_Touch",
          "value": 18
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_Swipe",
          "value": 19
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_Click",
          "value": 20
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_DPadNorth",
          "value": 21
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_DPadSouth",
          "value": 22
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_DPadWest",
          "value": 23
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightPad_DPadEast",
          "value": 24
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftTrigger_Pull",
          "value": 25
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftTrigger_Click",
          "value": 26
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightTrigger_Pull",
          "value": 27
        },
        {
          "name": "k_EInputActionOrigin_SteamController_RightTrigger_Click",
          "value": 28
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_Move",
          "value": 29
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_Click",
          "value": 30
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_DPadNorth",
          "value": 31
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_DPadSouth",
          "value": 32
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_DPadWest",
          "value": 33
        },
        {
          "name": "k_EInputActionOrigin_SteamController_LeftStick_DPadEast",
          "value": 34
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Gyro_Move",
          "value": 35
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Gyro_Pitch",
          "value": 36
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Gyro_Yaw",
          "value": 37
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Gyro_Roll",
          "value": 38
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved0",
          "value": 39
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved1",
          "value": 40
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved2",
          "value": 41
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved3",
          "value": 42
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved4",
          "value": 43
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved5",
          "value": 44
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved6",
          "value": 45
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved7",
          "value": 46
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved8",
          "value": 47
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved9",
          "value": 48
        },
        {
          "name": "k_EInputActionOrigin_SteamController_Reserved10",
          "value": 49
        },
        {
          "name": "k_EInputActionOrigin_PS4_X",
          "value": 50
        },
        {
          "name": "k_EInputActionOrigin_PS4_Circle",
          "value": 51
        },
        {
          "name": "k_EInputActionOrigin_PS4_Triangle",
          "value": 52
        },
        {
          "name": "k_EInputActionOrigin_PS4_Square",
          "value": 53
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftBumper",
          "value": 54
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightBumper",
          "value": 55
        },
        {
          "name": "k_EInputActionOrigin_PS4_Options",
          "value": 56
        },
        {
          "name": "k_EInputActionOrigin_PS4_Share",
          "value": 57
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_Touch",
          "value": 58
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_Swipe",
          "value": 59
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_Click",
          "value": 60
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_DPadNorth",
          "value": 61
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_DPadSouth",
          "value": 62
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_DPadWest",
          "value": 63
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftPad_DPadEast",
          "value": 64
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_Touch",
          "value": 65
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_Swipe",
          "value": 66
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_Click",
          "value": 67
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_DPadNorth",
          "value": 68
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_DPadSouth",
          "value": 69
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_DPadWest",
          "value": 70
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightPad_DPadEast",
          "value": 71
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_Touch",
          "value": 72
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_Swipe",
          "value": 73
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_Click",
          "value": 74
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_DPadNorth",
          "value": 75
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_DPadSouth",
          "value": 76
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_DPadWest",
          "value": 77
        },
        {
          "name": "k_EInputActionOrigin_PS4_CenterPad_DPadEast",
          "value": 78
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftTrigger_Pull",
          "value": 79
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftTrigger_Click",
          "value": 80
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightTrigger_Pull",
          "value": 81
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightTrigger_Click",
          "value": 82
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_Move",
          "value": 83
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_Click",
          "value": 84
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_DPadNorth",
          "value": 85
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_DPadSouth",
          "value": 86
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_DPadWest",
          "value": 87
        },
        {
          "name": "k_EInputActionOrigin_PS4_LeftStick_DPadEast",
          "value": 88
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_Move",
          "value": 89
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_Click",
          "value": 90
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_DPadNorth",
          "value": 91
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_DPadSouth",
          "value": 92
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_DPadWest",
          "value": 93
        },
        {
          "name": "k_EInputActionOrigin_PS4_RightStick_DPadEast",
          "value": 94
        },
        {
          "name": "k_EInputActionOrigin_PS4_DPad_North",
          "value": 95
        },
        {
          "name": "k_EInputActionOrigin_PS4_DPad_South",
          "value": 96
        },
        {
          "name": "k_EInputActionOrigin_PS4_DPad_West",
          "value": 97
        },
        {
          "name": "k_EInputActionOrigin_PS4_DPad_East",
          "value": 98
        },
        {
          "name": "k_EInputActionOrigin_PS4_Gyro_Move",
          "value": 99
        },
        {
          "name": "k_EInputActionOrigin_PS4_Gyro_Pitch",
          "value": 100
        },
        {
          "name": "k_EInputActionOrigin_PS4_Gyro_Yaw",
          "value": 101
        },
        {
          "name": "k_EInputActionOrigin_PS4_Gyro_Roll",
          "value": 102
        },
        {
          "name": "k_EInputActionOrigin_PS4_DPad_Move",
          "value": 103
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved1",
          "value": 104
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved2",
          "value": 105
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved3",
          "value": 106
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved4",
          "value": 107
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved5",
          "value": 108
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved6",
          "value": 109
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved7",
          "value": 110
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved8",
          "value": 111
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved9",
          "value": 112
        },
        {
          "name": "k_EInputActionOrigin_PS4_Reserved10",
          "value": 113
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_A",
          "value": 114
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_B",
          "value": 115
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_X",
          "value": 116
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Y",
          "value": 117
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftBumper",
          "value": 118
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightBumper",
          "value": 119
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Menu",
          "value": 120
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_View",
          "value": 121
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftTrigger_Pull",
          "value": 122
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftTrigger_Click",
          "value": 123
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightTrigger_Pull",
          "value": 124
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightTrigger_Click",
          "value": 125
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_Move",
          "value": 126
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_Click",
          "value": 127
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_DPadNorth",
          "value": 128
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_DPadSouth",
          "value": 129
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_DPadWest",
          "value": 130
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_LeftStick_DPadEast",
          "value": 131
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_Move",
          "value": 132
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_Click",
          "value": 133
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_DPadNorth",
          "value": 134
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_DPadSouth",
          "value": 135
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_DPadWest",
          "value": 136
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_RightStick_DPadEast",
          "value": 137
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_DPad_North",
          "value": 138
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_DPad_South",
          "value": 139
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_DPad_West",
          "value": 140
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_DPad_East",
          "value": 141
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_DPad_Move",
          "value": 142
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved1",
          "value": 143
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved2",
          "value": 144
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved3",
          "value": 145
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved4",
          "value": 146
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved5",
          "value": 147
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved6",
          "value": 148
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved7",
          "value": 149
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved8",
          "value": 150
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved9",
          "value": 151
        },
        {
          "name": "k_EInputActionOrigin_XBoxOne_Reserved10",
          "value": 152
        },
        {
          "name": "k_EInputActionOrigin_XBox360_A",
          "value": 153
        },
        {
          "name": "k_EInputActionOrigin_XBox360_B",
          "value": 154
        },
        {
          "name": "k_EInputActionOrigin_XBox360_X",
          "value": 155
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Y",
          "value": 156
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftBumper",
          "value": 157
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightBumper",
          "value": 158
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Start",
          "value": 159
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Back",
          "value": 160
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftTrigger_Pull",
          "value": 161
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftTrigger_Click",
          "value": 162
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightTrigger_Pull",
          "value": 163
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightTrigger_Click",
          "value": 164
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_Move",
          "value": 165
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_Click",
          "value": 166
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_DPadNorth",
          "value": 167
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_DPadSouth",
          "value": 168
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_DPadWest",
          "value": 169
        },
        {
          "name": "k_EInputActionOrigin_XBox360_LeftStick_DPadEast",
          "value": 170
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_Move",
          "value": 171
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_Click",
          "value": 172
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_DPadNorth",
          "value": 173
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_DPadSouth",
          "value": 174
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_DPadWest",
          "value": 175
        },
        {
          "name": "k_EInputActionOrigin_XBox360_RightStick_DPadEast",
          "value": 176
        },
        {
          "name": "k_EInputActionOrigin_XBox360_DPad_North",
          "value": 177
        },
        {
          "name": "k_EInputActionOrigin_XBox360_DPad_South",
          "value": 178
        },
        {
          "name": "k_EInputActionOrigin_XBox360_DPad_West",
          "value": 179
        },
        {
          "name": "k_EInputActionOrigin_XBox360_DPad_East",
          "value": 180
        },
        {
          "name": "k_EInputActionOrigin_XBox360_DPad_Move",
          "value": 181
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved1",
          "value": 182
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved2",
          "value": 183
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved3",
          "value": 184
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved4",
          "value": 185
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved5",
          "value": 186
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved6",
          "value": 187
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved7",
          "value": 188
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved8",
          "value": 189
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved9",
          "value": 190
        },
        {
          "name": "k_EInputActionOrigin_XBox360_Reserved10",
          "value": 191
        },
        {
          "name": "k_EInputActionOrigin_Switch_A",
          "value": 192
        },
        {
          "name": "k_EInputActionOrigin_Switch_B",
          "value": 193
        },
        {
          "name": "k_EInputActionOrigin_Switch_X",
          "value": 194
        },
        {
          "name": "k_EInputActionOrigin_Switch_Y",
          "value": 195
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftBumper",
          "value": 196
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightBumper",
          "value": 197
        },
        {
          "name": "k_EInputActionOrigin_Switch_Plus",
          "value": 198
        },
        {
          "name": "k_EInputActionOrigin_Switch_Minus",
          "value": 199
        },
        {
          "name": "k_EInputActionOrigin_Switch_Capture",
          "value": 200
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftTrigger_Pull",
          "value": 201
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftTrigger_Click",
          "value": 202
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightTrigger_Pull",
          "value": 203
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightTrigger_Click",
          "value": 204
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_Move",
          "value": 205
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_Click",
          "value": 206
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_DPadNorth",
          "value": 207
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_DPadSouth",
          "value": 208
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_DPadWest",
          "value": 209
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftStick_DPadEast",
          "value": 210
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_Move",
          "value": 211
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_Click",
          "value": 212
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_DPadNorth",
          "value": 213
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_DPadSouth",
          "value": 214
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_DPadWest",
          "value": 215
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightStick_DPadEast",
          "value": 216
        },
        {
          "name": "k_EInputActionOrigin_Switch_DPad_North",
          "value": 217
        },
        {
          "name": "k_EInputActionOrigin_Switch_DPad_South",
          "value": 218
        },
        {
          "name": "k_EInputActionOrigin_Switch_DPad_West",
          "value": 219
        },
        {
          "name": "k_EInputActionOrigin_Switch_DPad_East",
          "value": 220
        },
        {
          "name": "k_EInputActionOrigin_Switch_ProGyro_Move",
          "value": 221
        },
        {
          "name": "k_EInputActionOrigin_Switch_ProGyro_Pitch",
          "value": 222
        },
        {
          "name": "k_EInputActionOrigin_Switch_ProGyro_Yaw",
          "value": 223
        },
        {
          "name": "k_EInputActionOrigin_Switch_ProGyro_Roll",
          "value": 224
        },
        {
          "name": "k_EInputActionOrigin_Switch_DPad_Move",
          "value": 225
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved1",
          "value": 226
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved2",
          "value": 227
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved3",
          "value": 228
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved4",
          "value": 229
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved5",
          "value": 230
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved6",
          "value": 231
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved7",
          "value": 232
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved8",
          "value": 233
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved9",
          "value": 234
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved10",
          "value": 235
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGyro_Move",
          "value": 236
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGyro_Pitch",
          "value": 237
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGyro_Yaw",
          "value": 238
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGyro_Roll",
          "value": 239
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGyro_Move",
          "value": 240
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGyro_Pitch",
          "value": 241
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGyro_Yaw",
          "value": 242
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGyro_Roll",
          "value": 243
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGrip_Lower",
          "value": 244
        },
        {
          "name": "k_EInputActionOrigin_Switch_LeftGrip_Upper",
          "value": 245
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGrip_Lower",
          "value": 246
        },
        {
          "name": "k_EInputActionOrigin_Switch_RightGrip_Upper",
          "value": 247
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved11",
          "value": 248
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved12",
          "value": 249
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved13",
          "value": 250
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved14",
          "value": 251
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved15",
          "value": 252
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved16",
          "value": 253
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved17",
          "value": 254
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved18",
          "value": 255
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved19",
          "value": 256
        },
        {
          "name": "k_EInputActionOrigin_Switch_Reserved20",
          "value": 257
        },
        {
          "name": "k_EInputActionOrigin_Count",
          "value": 258
        },
        {
          "name": "k_EInputActionOrigin_MaximumPossibleValue",
          "value": 32767
        }
      ]
    },
    {
      "enumname": "EXboxOrigin",
      "values": [
        {
          "name": "k_EXboxOrigin_A",
          "value": 0
        },
        {
          "name": "k_EXboxOrigin_B",
          "value": 1
        },
        {
          "name": "k_EXboxOrigin_X",
          "value": 2
        },
        {
          "name": "k_EXboxOrigin_Y",
          "value": 3
        },
        {
          "name": "k_EXboxOrigin_LeftBumper",
          "value": 4
        },
        {
          "name": "k_EXboxOrigin_RightBumper",
          "value": 5
        },
        {
          "name": "k_EXboxOrigin_Menu",
          "value": 6
        },
        {
          "name": "k_EXboxOrigin_View",
          "value": 7
        },
        {
          "name": "k_EXboxOrigin_LeftTrigger_Pull",
          "value": 8
        },
        {
          "name": "k_EXboxOrigin_LeftTrigger_Click",
          "value": 9
        },
        {
          "name": "k_EXboxOrigin_RightTrigger_Pull",
          "value": 10
        },
        {
          "name": "k_EXboxOrigin_RightTrigger_Click",
          "value": 11
        },
        {
          "name": "k_EXboxOrigin_LeftStick_Move",
          "value": 12
        },
        {
          "name": "k_EXboxOrigin_LeftStick_Click",
          "value": 13
        },
        {
          "name": "k_EXboxOrigin_LeftStick_DPadNorth",
          "value": 14
        },
        {
          "name": "k_EXboxOrigin_LeftStick_DPadSouth",
          "value": 15
        },
        {
          "name": "k_EXboxOrigin_LeftStick_DPadWest",
          "value": 16
        },
        {
          "name": "k_EXboxOrigin_LeftStick_DPadEast",
          "value": 17
        },
        {
          "name": "k_EXboxOrigin_RightStick_Move",
          "value": 18
        },
        {
          "name": "k_EXboxOrigin_RightStick_Click",
          "value": 19
        },
        {
          "name": "k_EXboxOrigin_RightStick_DPadNorth",
          "value": 20
        },
        {
          "name": "k_EXboxOrigin_RightStick_DPadSouth",
          "value": 21
        },
        {
          "name": "k_EXboxOrigin_RightStick_DPadWest",
          "value": 22
        },
        {
          "name": "k_EXboxOrigin_RightStick_DPadEast",
          "value": 23
        },
        {
          "name": "k_EXboxOrigin_DPad_North",
          "value": 24
        },
        {
          "name": "k_EXboxOrigin_DPad_South",
          "value": 25
        },
        {
          "name": "k_EXboxOrigin_DPad_West",
          "value": 26
        },
        {
          "name": "k_EXboxOrigin_DPad_East",
          "value": 27
        },
        {
          "name": "k_EXboxOrigin_Count",
          "value": 28
        }
      ]
    },
    {
      "enumname": "ESteamControllerPad",
      "values": [
        {
          "name": "k_ESteamControllerPad_Left",
          "value": 0
        },
        {
          "name": "k_ESteamControllerPad_Right",
          "value": 1
        }
      ]
    },
    {
      "enumname": "ESteamInputType",
      "values": [
        {
          "name": "k_ESteamInputType_Unknown",
          "value": 0
        },
        {
          "name": "k_ESteamInputType_SteamController",
          "value": 1
        },
        {
          "name": "k_ESteamInputType_XBox360Controller",
          "value": 2
        },
        {
          "name": "k_ESteamInputType_XBoxOneController",
          "value": 3
        },
        {
          "name": "k_ESteamInputType_GenericGamepad",
          "value": 4
        },
        {
          "name": "k_ESteamInputType_PS4Controller",
          "value": 5
        },
        {
          "name": "k_ESteamInputType_AppleMFiController",
          "value": 6
        },
        {
          "name": "k_ESteamInputType_AndroidController",
          "value": 7
        },
        {
          "name": "k_ESteamInputType_SwitchJoyConPair",
          "value": 8
        },
        {
          "name": "k_ESteamInputType_SwitchJoyConSingle",
          "value": 9
        },
        {
          "name": "k_ESteamInputType_SwitchProController",
          "value": 10
        },
        {
          "name": "k_ESteamInputType_MobileTouch",
          "value": 11
        },
        {
          "name": "k_ESteamInputType_PS3Controller",
          "value": 12
        },
        {
          "name": "k_ESteamInputType_Count",
          "value": 13
        },
        {
          "name": "k_ESteamInputType_MaximumPossibleValue",
          "value": 255
        }
      ]
    },
    {
      "enumname": "ESteamInputLEDFlag",
      "values": [
        {
          "name": "k_ESteamInputLEDFlag_SetColor",
          "value": 0
        },
        {
          "name": "k_ESteamInputLEDFlag_RestoreUserDefault",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EControllerActionOrigin",
      "values": [
        {
          "name": "k_EControllerActionOrigin_None",
          "value": 0
        },
        {
          "name": "k_EControllerActionOrigin_A",
          "value": 1
        },
        {
          "name": "k_EControllerActionOrigin_B",
          "value": 2
        },
        {
          "name": "k_EControllerActionOrigin_X",
          "value": 3
        },
        {
          "name": "k_EControllerActionOrigin_Y",
          "value": 4
        },
        {
          "name": "k_EControllerActionOrigin_LeftBumper",
          "value": 5
        },
        {
          "name": "k_EControllerActionOrigin_RightBumper",
          "value": 6
        },
        {
          "name": "k_EControllerActionOrigin_LeftGrip",
          "value": 7
        },
        {
          "name": "k_EControllerActionOrigin_RightGrip",
          "value": 8
        },
        {
          "name": "k_EControllerActionOrigin_Start",
          "value": 9
        },
        {
          "name": "k_EControllerActionOrigin_Back",
          "value": 10
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_Touch",
          "value": 11
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_Swipe",
          "value": 12
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_Click",
          "value": 13
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_DPadNorth",
          "value": 14
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_DPadSouth",
          "value": 15
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_DPadWest",
          "value": 16
        },
        {
          "name": "k_EControllerActionOrigin_LeftPad_DPadEast",
          "value": 17
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_Touch",
          "value": 18
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_Swipe",
          "value": 19
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_Click",
          "value": 20
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_DPadNorth",
          "value": 21
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_DPadSouth",
          "value": 22
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_DPadWest",
          "value": 23
        },
        {
          "name": "k_EControllerActionOrigin_RightPad_DPadEast",
          "value": 24
        },
        {
          "name": "k_EControllerActionOrigin_LeftTrigger_Pull",
          "value": 25
        },
        {
          "name": "k_EControllerActionOrigin_LeftTrigger_Click",
          "value": 26
        },
        {
          "name": "k_EControllerActionOrigin_RightTrigger_Pull",
          "value": 27
        },
        {
          "name": "k_EControllerActionOrigin_RightTrigger_Click",
          "value": 28
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_Move",
          "value": 29
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_Click",
          "value": 30
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_DPadNorth",
          "value": 31
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_DPadSouth",
          "value": 32
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_DPadWest",
          "value": 33
        },
        {
          "name": "k_EControllerActionOrigin_LeftStick_DPadEast",
          "value": 34
        },
        {
          "name": "k_EControllerActionOrigin_Gyro_Move",
          "value": 35
        },
        {
          "name": "k_EControllerActionOrigin_Gyro_Pitch",
          "value": 36
        },
        {
          "name": "k_EControllerActionOrigin_Gyro_Yaw",
          "value": 37
        },
        {
          "name": "k_EControllerActionOrigin_Gyro_Roll",
          "value": 38
        },
        {
          "name": "k_EControllerActionOrigin_PS4_X",
          "value": 39
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Circle",
          "value": 40
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Triangle",
          "value": 41
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Square",
          "value": 42
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftBumper",
          "value": 43
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightBumper",
          "value": 44
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Options",
          "value": 45
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Share",
          "value": 46
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_Touch",
          "value": 47
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_Swipe",
          "value": 48
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_Click",
          "value": 49
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_DPadNorth",
          "value": 50
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_DPadSouth",
          "value": 51
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_DPadWest",
          "value": 52
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftPad_DPadEast",
          "value": 53
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_Touch",
          "value": 54
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_Swipe",
          "value": 55
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_Click",
          "value": 56
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_DPadNorth",
          "value": 57
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_DPadSouth",
          "value": 58
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_DPadWest",
          "value": 59
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightPad_DPadEast",
          "value": 60
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_Touch",
          "value": 61
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_Swipe",
          "value": 62
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_Click",
          "value": 63
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_DPadNorth",
          "value": 64
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_DPadSouth",
          "value": 65
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_DPadWest",
          "value": 66
        },
        {
          "name": "k_EControllerActionOrigin_PS4_CenterPad_DPadEast",
          "value": 67
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftTrigger_Pull",
          "value": 68
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftTrigger_Click",
          "value": 69
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightTrigger_Pull",
          "value": 70
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightTrigger_Click",
          "value": 71
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_Move",
          "value": 72
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_Click",
          "value": 73
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_DPadNorth",
          "value": 74
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_DPadSouth",
          "value": 75
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_DPadWest",
          "value": 76
        },
        {
          "name": "k_EControllerActionOrigin_PS4_LeftStick_DPadEast",
          "value": 77
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_Move",
          "value": 78
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_Click",
          "value": 79
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_DPadNorth",
          "value": 80
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_DPadSouth",
          "value": 81
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_DPadWest",
          "value": 82
        },
        {
          "name": "k_EControllerActionOrigin_PS4_RightStick_DPadEast",
          "value": 83
        },
        {
          "name": "k_EControllerActionOrigin_PS4_DPad_North",
          "value": 84
        },
        {
          "name": "k_EControllerActionOrigin_PS4_DPad_South",
          "value": 85
        },
        {
          "name": "k_EControllerActionOrigin_PS4_DPad_West",
          "value": 86
        },
        {
          "name": "k_EControllerActionOrigin_PS4_DPad_East",
          "value": 87
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Gyro_Move",
          "value": 88
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Gyro_Pitch",
          "value": 89
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Gyro_Yaw",
          "value": 90
        },
        {
          "name": "k_EControllerActionOrigin_PS4_Gyro_Roll",
          "value": 91
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_A",
          "value": 92
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_B",
          "value": 93
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_X",
          "value": 94
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_Y",
          "value": 95
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftBumper",
          "value": 96
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightBumper",
          "value": 97
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_Menu",
          "value": 98
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_View",
          "value": 99
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftTrigger_Pull",
          "value": 100
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftTrigger_Click",
          "value": 101
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightTrigger_Pull",
          "value": 102
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightTrigger_Click",
          "value": 103
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_Move",
          "value": 104
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_Click",
          "value": 105
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_DPadNorth",
          "value": 106
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_DPadSouth",
          "value": 107
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_DPadWest",
          "value": 108
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_LeftStick_DPadEast",
          "value": 109
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_Move",
          "value": 110
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_Click",
          "value": 111
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_DPadNorth",
          "value": 112
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_DPadSouth",
          "value": 113
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_DPadWest",
          "value": 114
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_RightStick_DPadEast",
          "value": 115
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_DPad_North",
          "value": 116
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_DPad_South",
          "value": 117
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_DPad_West",
          "value": 118
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_DPad_East",
          "value": 119
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_A",
          "value": 120
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_B",
          "value": 121
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_X",
          "value": 122
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_Y",
          "value": 123
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftBumper",
          "value": 124
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightBumper",
          "value": 125
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_Start",
          "value": 126
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_Back",
          "value": 127
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftTrigger_Pull",
          "value": 128
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftTrigger_Click",
          "value": 129
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightTrigger_Pull",
          "value": 130
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightTrigger_Click",
          "value": 131
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_Move",
          "value": 132
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_Click",
          "value": 133
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_DPadNorth",
          "value": 134
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_DPadSouth",
          "value": 135
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_DPadWest",
          "value": 136
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_LeftStick_DPadEast",
          "value": 137
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_Move",
          "value": 138
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_Click",
          "value": 139
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_DPadNorth",
          "value": 140
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_DPadSouth",
          "value": 141
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_DPadWest",
          "value": 142
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_RightStick_DPadEast",
          "value": 143
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_DPad_North",
          "value": 144
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_DPad_South",
          "value": 145
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_DPad_West",
          "value": 146
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_DPad_East",
          "value": 147
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_A",
          "value": 148
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_B",
          "value": 149
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_X",
          "value": 150
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Y",
          "value": 151
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftBumper",
          "value": 152
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightBumper",
          "value": 153
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftGrip_Lower",
          "value": 154
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftGrip_Upper",
          "value": 155
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightGrip_Lower",
          "value": 156
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightGrip_Upper",
          "value": 157
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftBumper_Pressure",
          "value": 158
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightBumper_Pressure",
          "value": 159
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftGrip_Pressure",
          "value": 160
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightGrip_Pressure",
          "value": 161
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftGrip_Upper_Pressure",
          "value": 162
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightGrip_Upper_Pressure",
          "value": 163
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Start",
          "value": 164
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Back",
          "value": 165
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_Touch",
          "value": 166
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_Swipe",
          "value": 167
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_Click",
          "value": 168
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_Pressure",
          "value": 169
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_DPadNorth",
          "value": 170
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_DPadSouth",
          "value": 171
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_DPadWest",
          "value": 172
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftPad_DPadEast",
          "value": 173
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_Touch",
          "value": 174
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_Swipe",
          "value": 175
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_Click",
          "value": 176
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_Pressure",
          "value": 177
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_DPadNorth",
          "value": 178
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_DPadSouth",
          "value": 179
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_DPadWest",
          "value": 180
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightPad_DPadEast",
          "value": 181
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftTrigger_Pull",
          "value": 182
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftTrigger_Click",
          "value": 183
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightTrigger_Pull",
          "value": 184
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_RightTrigger_Click",
          "value": 185
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_Move",
          "value": 186
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_Click",
          "value": 187
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_DPadNorth",
          "value": 188
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_DPadSouth",
          "value": 189
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_DPadWest",
          "value": 190
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_LeftStick_DPadEast",
          "value": 191
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Gyro_Move",
          "value": 192
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Gyro_Pitch",
          "value": 193
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Gyro_Yaw",
          "value": 194
        },
        {
          "name": "k_EControllerActionOrigin_SteamV2_Gyro_Roll",
          "value": 195
        },
        {
          "name": "k_EControllerActionOrigin_Switch_A",
          "value": 196
        },
        {
          "name": "k_EControllerActionOrigin_Switch_B",
          "value": 197
        },
        {
          "name": "k_EControllerActionOrigin_Switch_X",
          "value": 198
        },
        {
          "name": "k_EControllerActionOrigin_Switch_Y",
          "value": 199
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftBumper",
          "value": 200
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightBumper",
          "value": 201
        },
        {
          "name": "k_EControllerActionOrigin_Switch_Plus",
          "value": 202
        },
        {
          "name": "k_EControllerActionOrigin_Switch_Minus",
          "value": 203
        },
        {
          "name": "k_EControllerActionOrigin_Switch_Capture",
          "value": 204
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftTrigger_Pull",
          "value": 205
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftTrigger_Click",
          "value": 206
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightTrigger_Pull",
          "value": 207
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightTrigger_Click",
          "value": 208
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_Move",
          "value": 209
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_Click",
          "value": 210
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_DPadNorth",
          "value": 211
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_DPadSouth",
          "value": 212
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_DPadWest",
          "value": 213
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftStick_DPadEast",
          "value": 214
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_Move",
          "value": 215
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_Click",
          "value": 216
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_DPadNorth",
          "value": 217
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_DPadSouth",
          "value": 218
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_DPadWest",
          "value": 219
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightStick_DPadEast",
          "value": 220
        },
        {
          "name": "k_EControllerActionOrigin_Switch_DPad_North",
          "value": 221
        },
        {
          "name": "k_EControllerActionOrigin_Switch_DPad_South",
          "value": 222
        },
        {
          "name": "k_EControllerActionOrigin_Switch_DPad_West",
          "value": 223
        },
        {
          "name": "k_EControllerActionOrigin_Switch_DPad_East",
          "value": 224
        },
        {
          "name": "k_EControllerActionOrigin_Switch_ProGyro_Move",
          "value": 225
        },
        {
          "name": "k_EControllerActionOrigin_Switch_ProGyro_Pitch",
          "value": 226
        },
        {
          "name": "k_EControllerActionOrigin_Switch_ProGyro_Yaw",
          "value": 227
        },
        {
          "name": "k_EControllerActionOrigin_Switch_ProGyro_Roll",
          "value": 228
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGyro_Move",
          "value": 229
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGyro_Pitch",
          "value": 230
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGyro_Yaw",
          "value": 231
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGyro_Roll",
          "value": 232
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGyro_Move",
          "value": 233
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGyro_Pitch",
          "value": 234
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGyro_Yaw",
          "value": 235
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGyro_Roll",
          "value": 236
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGrip_Lower",
          "value": 237
        },
        {
          "name": "k_EControllerActionOrigin_Switch_LeftGrip_Upper",
          "value": 238
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGrip_Lower",
          "value": 239
        },
        {
          "name": "k_EControllerActionOrigin_Switch_RightGrip_Upper",
          "value": 240
        },
        {
          "name": "k_EControllerActionOrigin_PS4_DPad_Move",
          "value": 241
        },
        {
          "name": "k_EControllerActionOrigin_XBoxOne_DPad_Move",
          "value": 242
        },
        {
          "name": "k_EControllerActionOrigin_XBox360_DPad_Move",
          "value": 243
        },
        {
          "name": "k_EControllerActionOrigin_Switch_DPad_Move",
          "value": 244
        },
        {
          "name": "k_EControllerActionOrigin_Count",
          "value": 245
        },
        {
          "name": "k_EControllerActionOrigin_MaximumPossibleValue",
          "value": 32767
        }
      ]
    },
    {
      "enumname": "ESteamControllerLEDFlag",
      "values": [
        {
          "name": "k_ESteamControllerLEDFlag_SetColor",
          "value": 0
        },
        {
          "name": "k_ESteamControllerLEDFlag_RestoreUserDefault",
          "value": 1
        }
      ]
    },
    {
      "enumname": "EUGCMatchingUGCType",
      "values": [
        {
          "name": "k_EUGCMatchingUGCType_Items",
          "value": 0
        },
        {
          "name": "k_EUGCMatchingUGCType_Items_Mtx",
          "value": 1
        },
        {
          "name": "k_EUGCMatchingUGCType_Items_ReadyToUse",
          "value": 2
        },
        {
          "name": "k_EUGCMatchingUGCType_Collections",
          "value": 3
        },
        {
          "name": "k_EUGCMatchingUGCType_Artwork",
          "value": 4
        },
        {
          "name": "k_EUGCMatchingUGCType_Videos",
          "value": 5
        },
        {
          "name": "k_EUGCMatchingUGCType_Screenshots",
          "value": 6
        },
        {
          "name": "k_EUGCMatchingUGCType_AllGuides",
          "value": 7
        },
        {
          "name": "k_EUGCMatchingUGCType_WebGuides",
          "value": 8
        },
        {
          "name": "k_EUGCMatchingUGCType_IntegratedGuides",
          "value": 9
        },
        {
          "name": "k_EUGCMatchingUGCType_UsableInGame",
          "value": 10
        },
        {
          "name": "k_EUGCMatchingUGCType_ControllerBindings",
          "value": 11
        },
        {
          "name": "k_EUGCMatchingUGCType_GameManagedItems",
          "value": 12
        },
        {
          "name": "k_EUGCMatchingUGCType_All",
          "value": -1
        }
      ]
    },
    {
      "enumname": "EUserUGCList",
      "values": [
        {
          "name": "k_EUserUGCList_Published",
          "value": 0
        },
        {
          "name": "k_EUserUGCList_VotedOn",
          "value": 1
        },
        {
          "name": "k_EUserUGCList_VotedUp",
          "value": 2
        },
        {
          "name": "k_EUserUGCList_VotedDown",
          "value": 3
        },
        {
          "name": "k_EUserUGCList_WillVoteLater",
          "value": 4
        },
        {
          "name": "k_EUserUGCList_Favorited",
          "value": 5
        },
        {
          "name": "k_EUserUGCList_Subscribed",
          "value": 6
        },
        {
          "name": "k_EUserUGCList_UsedOrPlayed",
          "value": 7
        },
        {
          "name": "k_EUserUGCList_Followed",
          "value": 8
        }
      ]
    },
    {
      "enumname": "EUserUGCListSortOrder",
      "values": [
        {
          "name": "k_EUserUGCListSortOrder_CreationOrderDesc",
          "value": 0
        },
        {
          "name": "k_EUserUGCListSortOrder_CreationOrderAsc",
          "value": 1
        },
        {
          "name": "k_EUserUGCListSortOrder_TitleAsc",
          "value": 2
        },
        {
          "name": "k_EUserUGCListSortOrder_LastUpdatedDesc",
          "value": 3
        },
        {
          "name": "k_EUserUGCListSortOrder_SubscriptionDateDesc",
          "value": 4
        },
        {
          "name": "k_EUserUGCListSortOrder_VoteScoreDesc",
          "value": 5
        },
        {
          "name": "k_EUserUGCListSortOrder_ForModeration",
          "value": 6
        }
      ]
    },
    {
      "enumname": "EUGCQuery",
      "values": [
        {
          "name": "k_EUGCQuery_RankedByVote",
          "value": 0
        },
        {
          "name": "k_EUGCQuery_RankedByPublicationDate",
          "value": 1
        },
        {
          "name": "k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate",
          "value": 2
        },
        {
          "name": "k_EUGCQuery_RankedByTrend",
          "value": 3
        },
        {
          "name": "k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate",
          "value": 4
        },
        {
          "name": "k_EUGCQuery_CreatedByFriendsRankedByPublicationDate",
          "value": 5
        },
        {
          "name": "k_EUGCQuery_RankedByNumTimesReported",
          "value": 6
        },
        {
          "name": "k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate",
          "value": 7
        },
        {
          "name": "k_EUGCQuery_NotYetRated",
          "value": 8
        },
        {
          "name": "k_EUGCQuery_RankedByTotalVotesAsc",
          "value": 9
        },
        {
          "name": "k_EUGCQuery_RankedByVotesUp",
          "value": 10
        },
        {
          "name": "k_EUGCQuery_RankedByTextSearch",
          "value": 11
        },
        {
          "name": "k_EUGCQuery_RankedByTotalUniqueSubscriptions",
          "value": 12
        },
        {
          "name": "k_EUGCQuery_RankedByPlaytimeTrend",
          "value": 13
        },
        {
          "name": "k_EUGCQuery_RankedByTotalPlaytime",
          "value": 14
        },
        {
          "name": "k_EUGCQuery_RankedByAveragePlaytimeTrend",
          "value": 15
        },
        {
          "name": "k_EUGCQuery_RankedByLifetimeAveragePlaytime",
          "value": 16
        },
        {
          "name": "k_EUGCQuery_RankedByPlaytimeSessionsTrend",
          "value": 17
        },
        {
          "name": "k_EUGCQuery_RankedByLifetimePlaytimeSessions",
          "value": 18
        }
      ]
    },
    {
      "enumname": "EItemUpdateStatus",
      "values": [
        {
          "name": "k_EItemUpdateStatusInvalid",
          "value": 0
        },
        {
          "name": "k_EItemUpdateStatusPreparingConfig",
          "value": 1
        },
        {
          "name": "k_EItemUpdateStatusPreparingContent",
          "value": 2
        },
        {
          "name": "k_EItemUpdateStatusUploadingContent",
          "value": 3
        },
        {
          "name": "k_EItemUpdateStatusUploadingPreviewFile",
          "value": 4
        },
        {
          "name": "k_EItemUpdateStatusCommittingChanges",
          "value": 5
        }
      ]
    },
    {
      "enumname": "EItemState",
      "values": [
        {
          "name": "k_EItemStateNone",
          "value": 0
        },
        {
          "name": "k_EItemStateSubscribed",
          "value": 1
        },
        {
          "name": "k_EItemStateLegacyItem",
          "value": 2
        },
        {
          "name": "k_EItemStateInstalled",
          "value": 4
        },
        {
          "name": "k_EItemStateNeedsUpdate",
          "value": 8
        },
        {
          "name": "k_EItemStateDownloading",
          "value": 16
        },
        {
          "name": "k_EItemStateDownloadPending",
          "value": 32
        }
      ]
    },
    {
      "enumname": "EItemStatistic",
      "values": [
        {
          "name": "k_EItemStatistic_NumSubscriptions",
          "value": 0
        },
        {
          "name": "k_EItemStatistic_NumFavorites",
          "value": 1
        },
        {
          "name": "k_EItemStatistic_NumFollowers",
          "value": 2
        },
        {
          "name": "k_EItemStatistic_NumUniqueSubscriptions",
          "value": 3
        },
        {
          "name": "k_EItemStatistic_NumUniqueFavorites",
          "value": 4
        },
        {
          "name": "k_EItemStatistic_NumUniqueFollowers",
          "value": 5
        },
        {
          "name": "k_EItemStatistic_NumUniqueWebsiteViews",
          "value": 6
        },
        {
          "name": "k_EItemStatistic_ReportScore",
          "value": 7
        },
        {
          "name": "k_EItemStatistic_NumSecondsPlayed",
          "value": 8
        },
        {
          "name": "k_EItemStatistic_NumPlaytimeSessions",
          "value": 9
        },
        {
          "name": "k_EItemStatistic_NumComments",
          "value": 10
        },
        {
          "name": "k_EItemStatistic_NumSecondsPlayedDuringTimePeriod",
          "value": 11
        },
        {
          "name": "k_EItemStatistic_NumPlaytimeSessionsDuringTimePeriod",
          "value": 12
        }
      ]
    },
    {
      "enumname": "EItemPreviewType",
      "values": [
        {
          "name": "k_EItemPreviewType_Image",
          "value": 0
        },
        {
          "name": "k_EItemPreviewType_YouTubeVideo",
          "value": 1
        },
        {
          "name": "k_EItemPreviewType_Sketchfab",
          "value": 2
        },
        {
          "name": "k_EItemPreviewType_EnvironmentMap_HorizontalCross",
          "value": 3
        },
        {
          "name": "k_EItemPreviewType_EnvironmentMap_LatLong",
          "value": 4
        },
        {
          "name": "k_EItemPreviewType_ReservedMax",
          "value": 255
        }
      ]
    },
    {
      "enumname": "EHTMLMouseButton",
      "values": [
        {
          "name": "eHTMLMouseButton_Left",
          "value": 0
        },
        {
          "name": "eHTMLMouseButton_Right",
          "value": 1
        },
        {
          "name": "eHTMLMouseButton_Middle",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EMouseCursor",
      "values": [
        {
          "name": "dc_user",
          "value": 0
        },
        {
          "name": "dc_none",
          "value": 1
        },
        {
          "name": "dc_arrow",
          "value": 2
        },
        {
          "name": "dc_ibeam",
          "value": 3
        },
        {
          "name": "dc_hourglass",
          "value": 4
        },
        {
          "name": "dc_waitarrow",
          "value": 5
        },
        {
          "name": "dc_crosshair",
          "value": 6
        },
        {
          "name": "dc_up",
          "value": 7
        },
        {
          "name": "dc_sizenw",
          "value": 8
        },
        {
          "name": "dc_sizese",
          "value": 9
        },
        {
          "name": "dc_sizene",
          "value": 10
        },
        {
          "name": "dc_sizesw",
          "value": 11
        },
        {
          "name": "dc_sizew",
          "value": 12
        },
        {
          "name": "dc_sizee",
          "value": 13
        },
        {
          "name": "dc_sizen",
          "value": 14
        },
        {
          "name": "dc_sizes",
          "value": 15
        },
        {
          "name": "dc_sizewe",
          "value": 16
        },
        {
          "name": "dc_sizens",
          "value": 17
        },
        {
          "name": "dc_sizeall",
          "value": 18
        },
        {
          "name": "dc_no",
          "value": 19
        },
        {
          "name": "dc_hand",
          "value": 20
        },
        {
          "name": "dc_blank",
          "value": 21
        },
        {
          "name": "dc_middle_pan",
          "value": 22
        },
        {
          "name": "dc_north_pan",
          "value": 23
        },
        {
          "name": "dc_north_east_pan",
          "value": 24
        },
        {
          "name": "dc_east_pan",
          "value": 25
        },
        {
          "name": "dc_south_east_pan",
          "value": 26
        },
        {
          "name": "dc_south_pan",
          "value": 27
        },
        {
          "name": "dc_south_west_pan",
          "value": 28
        },
        {
          "name": "dc_west_pan",
          "value": 29
        },
        {
          "name": "dc_north_west_pan",
          "value": 30
        },
        {
          "name": "dc_alias",
          "value": 31
        },
        {
          "name": "dc_cell",
          "value": 32
        },
        {
          "name": "dc_colresize",
          "value": 33
        },
        {
          "name": "dc_copycur",
          "value": 34
        },
        {
          "name": "dc_verticaltext",
          "value": 35
        },
        {
          "name": "dc_rowresize",
          "value": 36
        },
        {
          "name": "dc_zoomin",
          "value": 37
        },
        {
          "name": "dc_zoomout",
          "value": 38
        },
        {
          "name": "dc_help",
          "value": 39
        },
        {
          "name": "dc_custom",
          "value": 40
        },
        {
          "name": "dc_last",
          "value": 41
        }
      ]
    },
    {
      "enumname": "EHTMLKeyModifiers",
      "values": [
        {
          "name": "k_eHTMLKeyModifier_None",
          "value": 0
        },
        {
          "name": "k_eHTMLKeyModifier_AltDown",
          "value": 1
        },
        {
          "name": "k_eHTMLKeyModifier_CtrlDown",
          "value": 2
        },
        {
          "name": "k_eHTMLKeyModifier_ShiftDown",
          "value": 4
        }
      ]
    },
    {
      "enumname": "ESteamItemFlags",
      "values": [
        {
          "name": "k_ESteamItemNoTrade",
          "value": 1
        },
        {
          "name": "k_ESteamItemRemoved",
          "value": 256
        },
        {
          "name": "k_ESteamItemConsumed",
          "value": 512
        }
      ]
    },
    {
      "enumname": "ESteamTVRegionBehavior",
      "values": [
        {
          "name": "k_ESteamVideoRegionBehaviorInvalid",
          "value": -1
        },
        {
          "name": "k_ESteamVideoRegionBehaviorHover",
          "value": 0
        },
        {
          "name": "k_ESteamVideoRegionBehaviorClickPopup",
          "value": 1
        },
        {
          "name": "k_ESteamVideoRegionBehaviorClickSurroundingRegion",
          "value": 2
        }
      ]
    },
    {
      "enumname": "EParentalFeature",
      "values": [
        {
          "name": "k_EFeatureInvalid",
          "value": 0
        },
        {
          "name": "k_EFeatureStore",
          "value": 1
        },
        {
          "name": "k_EFeatureCommunity",
          "value": 2
        },
        {
          "name": "k_EFeatureProfile",
          "value": 3
        },
        {
          "name": "k_EFeatureFriends",
          "value": 4
        },
        {
          "name": "k_EFeatureNews",
          "value": 5
        },
        {
          "name": "k_EFeatureTrading",
          "value": 6
        },
        {
          "name": "k_EFeatureSettings",
          "value": 7
        },
        {
          "name": "k_EFeatureConsole",
          "value": 8
        },
        {
          "name": "k_EFeatureBrowser",
          "value": 9
        },
        {
          "name": "k_EFeatureParentalSetup",
          "value": 10
        },
        {
          "name": "k_EFeatureLibrary",
          "value": 11
        },
        {
          "name": "k_EFeatureTest",
          "value": 12
        },
        {
          "name": "k_EFeatureSiteLicense",
          "value": 13
        },
        {
          "name": "k_EFeatureMax",
          "value": 14
        }
      ]
    },
    {
      "enumname": "ESteamDeviceFormFactor",
      "values": [
        {
          "name": "k_ESteamDeviceFormFactorUnknown",
          "value": 0
        },
        {
          "name": "k_ESteamDeviceFormFactorPhone",
          "value": 1
        },
        {
          "name": "k_ESteamDeviceFormFactorTablet",
          "value": 2
        },
        {
          "name": "k_ESteamDeviceFormFactorComputer",
          "value": 3
        },
        {
          "name": "k_ESteamDeviceFormFactorTV",
          "value": 4
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingAvailability",
      "values": [
        {
          "name": "k_ESteamNetworkingAvailability_CannotTry",
          "value": -102
        },
        {
          "name": "k_ESteamNetworkingAvailability_Failed",
          "value": -101
        },
        {
          "name": "k_ESteamNetworkingAvailability_Previously",
          "value": -100
        },
        {
          "name": "k_ESteamNetworkingAvailability_Retrying",
          "value": -10
        },
        {
          "name": "k_ESteamNetworkingAvailability_NeverTried",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingAvailability_Waiting",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingAvailability_Attempting",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingAvailability_Current",
          "value": 100
        },
        {
          "name": "k_ESteamNetworkingAvailability_Unknown",
          "value": 0
        },
        {
          "name": "k_ESteamNetworkingAvailability__Force32bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingIdentityType",
      "values": [
        {
          "name": "k_ESteamNetworkingIdentityType_Invalid",
          "value": 0
        },
        {
          "name": "k_ESteamNetworkingIdentityType_SteamID",
          "value": 16
        },
        {
          "name": "k_ESteamNetworkingIdentityType_XboxPairwiseID",
          "value": 17
        },
        {
          "name": "k_ESteamNetworkingIdentityType_IPAddress",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingIdentityType_GenericString",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingIdentityType_GenericBytes",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingIdentityType_UnknownType",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingIdentityType__Force32bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingConnectionState",
      "values": [
        {
          "name": "k_ESteamNetworkingConnectionState_None",
          "value": 0
        },
        {
          "name": "k_ESteamNetworkingConnectionState_Connecting",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingConnectionState_FindingRoute",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingConnectionState_Connected",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingConnectionState_ClosedByPeer",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingConnectionState_ProblemDetectedLocally",
          "value": 5
        },
        {
          "name": "k_ESteamNetworkingConnectionState_FinWait",
          "value": -1
        },
        {
          "name": "k_ESteamNetworkingConnectionState_Linger",
          "value": -2
        },
        {
          "name": "k_ESteamNetworkingConnectionState_Dead",
          "value": -3
        },
        {
          "name": "k_ESteamNetworkingConnectionState__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetConnectionEnd",
      "values": [
        {
          "name": "k_ESteamNetConnectionEnd_Invalid",
          "value": 0
        },
        {
          "name": "k_ESteamNetConnectionEnd_App_Min",
          "value": 1000
        },
        {
          "name": "k_ESteamNetConnectionEnd_App_Generic",
          "value": 1000
        },
        {
          "name": "k_ESteamNetConnectionEnd_App_Max",
          "value": 1999
        },
        {
          "name": "k_ESteamNetConnectionEnd_AppException_Min",
          "value": 2000
        },
        {
          "name": "k_ESteamNetConnectionEnd_AppException_Generic",
          "value": 2000
        },
        {
          "name": "k_ESteamNetConnectionEnd_AppException_Max",
          "value": 2999
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_Min",
          "value": 3000
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_OfflineMode",
          "value": 3001
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_ManyRelayConnectivity",
          "value": 3002
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_HostedServerPrimaryRelay",
          "value": 3003
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_NetworkConfig",
          "value": 3004
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_Rights",
          "value": 3005
        },
        {
          "name": "k_ESteamNetConnectionEnd_Local_Max",
          "value": 3999
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_Min",
          "value": 4000
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_Timeout",
          "value": 4001
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_BadCrypt",
          "value": 4002
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_BadCert",
          "value": 4003
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_NotLoggedIn",
          "value": 4004
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_NotRunningApp",
          "value": 4005
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_BadProtocolVersion",
          "value": 4006
        },
        {
          "name": "k_ESteamNetConnectionEnd_Remote_Max",
          "value": 4999
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_Min",
          "value": 5000
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_Generic",
          "value": 5001
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_InternalError",
          "value": 5002
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_Timeout",
          "value": 5003
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_RelayConnectivity",
          "value": 5004
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_SteamConnectivity",
          "value": 5005
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_NoRelaySessionsToClient",
          "value": 5006
        },
        {
          "name": "k_ESteamNetConnectionEnd_Misc_Max",
          "value": 5999
        },
        {
          "name": "k_ESteamNetConnectionEnd__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingConfigScope",
      "values": [
        {
          "name": "k_ESteamNetworkingConfig_Global",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingConfig_SocketsInterface",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingConfig_ListenSocket",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingConfig_Connection",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingConfigScope__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingConfigDataType",
      "values": [
        {
          "name": "k_ESteamNetworkingConfig_Int32",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingConfig_Int64",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingConfig_Float",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingConfig_String",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingConfig_FunctionPtr",
          "value": 5
        },
        {
          "name": "k_ESteamNetworkingConfigDataType__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingConfigValue",
      "values": [
        {
          "name": "k_ESteamNetworkingConfig_Invalid",
          "value": 0
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketLoss_Send",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketLoss_Recv",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketLag_Send",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketLag_Recv",
          "value": 5
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketReorder_Send",
          "value": 6
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketReorder_Recv",
          "value": 7
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketReorder_Time",
          "value": 8
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketDup_Send",
          "value": 26
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketDup_Recv",
          "value": 27
        },
        {
          "name": "k_ESteamNetworkingConfig_FakePacketDup_TimeMax",
          "value": 28
        },
        {
          "name": "k_ESteamNetworkingConfig_TimeoutInitial",
          "value": 24
        },
        {
          "name": "k_ESteamNetworkingConfig_TimeoutConnected",
          "value": 25
        },
        {
          "name": "k_ESteamNetworkingConfig_SendBufferSize",
          "value": 9
        },
        {
          "name": "k_ESteamNetworkingConfig_SendRateMin",
          "value": 10
        },
        {
          "name": "k_ESteamNetworkingConfig_SendRateMax",
          "value": 11
        },
        {
          "name": "k_ESteamNetworkingConfig_NagleTime",
          "value": 12
        },
        {
          "name": "k_ESteamNetworkingConfig_IP_AllowWithoutAuth",
          "value": 23
        },
        {
          "name": "k_ESteamNetworkingConfig_MTU_PacketSize",
          "value": 32
        },
        {
          "name": "k_ESteamNetworkingConfig_MTU_DataSize",
          "value": 33
        },
        {
          "name": "k_ESteamNetworkingConfig_Unencrypted",
          "value": 34
        },
        {
          "name": "k_ESteamNetworkingConfig_EnumerateDevVars",
          "value": 35
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFailInitial",
          "value": 19
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_ConsecutitivePingTimeoutsFail",
          "value": 20
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_MinPingsBeforePingAccurate",
          "value": 21
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_SingleSocket",
          "value": 22
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_ForceRelayCluster",
          "value": 29
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_DebugTicketAddress",
          "value": 30
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_ForceProxyAddr",
          "value": 31
        },
        {
          "name": "k_ESteamNetworkingConfig_SDRClient_FakeClusterPing",
          "value": 36
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_AckRTT",
          "value": 13
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_PacketDecode",
          "value": 14
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_Message",
          "value": 15
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_PacketGaps",
          "value": 16
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_P2PRendezvous",
          "value": 17
        },
        {
          "name": "k_ESteamNetworkingConfig_LogLevel_SDRRelayPings",
          "value": 18
        },
        {
          "name": "k_ESteamNetworkingConfigValue__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingGetConfigValueResult",
      "values": [
        {
          "name": "k_ESteamNetworkingGetConfigValue_BadValue",
          "value": -1
        },
        {
          "name": "k_ESteamNetworkingGetConfigValue_BadScopeObj",
          "value": -2
        },
        {
          "name": "k_ESteamNetworkingGetConfigValue_BufferTooSmall",
          "value": -3
        },
        {
          "name": "k_ESteamNetworkingGetConfigValue_OK",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingGetConfigValue_OKInherited",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingGetConfigValueResult__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "ESteamNetworkingSocketsDebugOutputType",
      "values": [
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_None",
          "value": 0
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Bug",
          "value": 1
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Error",
          "value": 2
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Important",
          "value": 3
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Warning",
          "value": 4
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Msg",
          "value": 5
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Verbose",
          "value": 6
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Debug",
          "value": 7
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType_Everything",
          "value": 8
        },
        {
          "name": "k_ESteamNetworkingSocketsDebugOutputType__Force32Bit",
          "value": 2147483647
        }
      ]
    },
    {
      "enumname": "EServerMode",
      "values": [
        {
          "name": "eServerModeInvalid",
          "value": 0
        },
        {
          "name": "eServerModeNoAuthentication",
          "value": 1
        },
        {
          "name": "eServerModeAuthentication",
          "value": 2
        },
        {
          "name": "eServerModeAuthenticationAndSecure",
          "value": 3
        }
      ]
    }
  ],
  "structs": [
    {
      "fields": [
        {
          "fieldname": "m_rgubIPv6",
          "fieldtype": "uint8 [16]"
        },
        {
          "fieldname": "m_eType",
          "fieldtype": "ESteamIPType"
        }
      ],
      "struct": "SteamIPAddress_t",
      "methods": [
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsSet",
          "flat_name": "SteamAPI_SteamIPAddress_t_IsSet"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_gameID",
          "fieldtype": "CGameID"
        },
        {
          "fieldname": "m_unGameIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_usGamePort",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_usQueryPort",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_steamIDLobby",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "FriendGameInfo_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_uiOnlineSessionInstances",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_uiPublishedToFriendsSessionInstance",
          "fieldtype": "uint8"
        }
      ],
      "struct": "FriendSessionStateInfo_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_szKey",
          "fieldtype": "char [256]"
        },
        {
          "fieldname": "m_szValue",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "MatchMakingKeyValuePair_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_usConnectionPort",
          "fieldtype": "uint16",
          "private": true
        },
        {
          "fieldname": "m_usQueryPort",
          "fieldtype": "uint16",
          "private": true
        },
        {
          "fieldname": "m_unIP",
          "fieldtype": "uint32",
          "private": true
        }
      ],
      "struct": "servernetadr_t",
      "methods": [
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "unsigned int",
              "paramname": "ip"
            },
            {
              "paramtype": "uint16",
              "paramname": "usQueryPort"
            },
            {
              "paramtype": "uint16",
              "paramname": "usConnectionPort"
            }
          ],
          "methodname": "Init",
          "flat_name": "SteamAPI_servernetadr_t_Init"
        },
        {
          "returntype": "uint16",
          "params": [],
          "methodname": "GetQueryPort",
          "flat_name": "SteamAPI_servernetadr_t_GetQueryPort"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            }
          ],
          "methodname": "SetQueryPort",
          "flat_name": "SteamAPI_servernetadr_t_SetQueryPort"
        },
        {
          "returntype": "uint16",
          "params": [],
          "methodname": "GetConnectionPort",
          "flat_name": "SteamAPI_servernetadr_t_GetConnectionPort"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint16",
              "paramname": "usPort"
            }
          ],
          "methodname": "SetConnectionPort",
          "flat_name": "SteamAPI_servernetadr_t_SetConnectionPort"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetIP",
          "flat_name": "SteamAPI_servernetadr_t_GetIP"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": ""
            }
          ],
          "methodname": "SetIP",
          "flat_name": "SteamAPI_servernetadr_t_SetIP"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetConnectionAddressString",
          "flat_name": "SteamAPI_servernetadr_t_GetConnectionAddressString"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetQueryAddressString",
          "flat_name": "SteamAPI_servernetadr_t_GetQueryAddressString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const servernetadr_t &",
              "paramname": "netadr"
            }
          ],
          "methodname": "operator<",
          "flat_name": "SteamAPI_servernetadr_t_IsLessThan"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const servernetadr_t &",
              "paramname": "that"
            }
          ],
          "methodname": "operator=",
          "flat_name": "SteamAPI_servernetadr_t_Assign"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_NetAdr",
          "fieldtype": "servernetadr_t"
        },
        {
          "fieldname": "m_nPing",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_bHadSuccessfulResponse",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bDoNotRefresh",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_szGameDir",
          "fieldtype": "char [32]"
        },
        {
          "fieldname": "m_szMap",
          "fieldtype": "char [32]"
        },
        {
          "fieldname": "m_szGameDescription",
          "fieldtype": "char [64]"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nPlayers",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_nMaxPlayers",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_nBotPlayers",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_bPassword",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bSecure",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_ulTimeLastPlayed",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nServerVersion",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_szServerName",
          "fieldtype": "char [64]",
          "private": true
        },
        {
          "fieldname": "m_szGameTags",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "m_steamID",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "gameserveritem_t",
      "methods": [
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetName",
          "flat_name": "SteamAPI_gameserveritem_t_GetName"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pName"
            }
          ],
          "methodname": "SetName",
          "flat_name": "SteamAPI_gameserveritem_t_SetName"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_eType",
          "fieldtype": "ESteamPartyBeaconLocationType"
        },
        {
          "fieldname": "m_ulLocationID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "SteamPartyBeaconLocation_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_ppStrings",
          "fieldtype": "const char **"
        },
        {
          "fieldname": "m_nNumStrings",
          "fieldtype": "int32"
        }
      ],
      "struct": "SteamParamStringArray_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_nGlobalRank",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nScore",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_cDetails",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_hUGC",
          "fieldtype": "UGCHandle_t"
        }
      ],
      "struct": "LeaderboardEntry_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_bConnectionActive",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_bConnecting",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_eP2PSessionError",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_bUsingRelay",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_nBytesQueuedForSend",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nPacketsQueuedForSend",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nRemoteIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nRemotePort",
          "fieldtype": "uint16"
        }
      ],
      "struct": "P2PSessionState_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "eMode",
          "fieldtype": "EInputSourceMode"
        },
        {
          "fieldname": "x",
          "fieldtype": "float"
        },
        {
          "fieldname": "y",
          "fieldtype": "float"
        },
        {
          "fieldname": "bActive",
          "fieldtype": "bool"
        }
      ],
      "struct": "InputAnalogActionData_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "bState",
          "fieldtype": "bool"
        },
        {
          "fieldname": "bActive",
          "fieldtype": "bool"
        }
      ],
      "struct": "InputDigitalActionData_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "rotQuatX",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotQuatY",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotQuatZ",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotQuatW",
          "fieldtype": "float"
        },
        {
          "fieldname": "posAccelX",
          "fieldtype": "float"
        },
        {
          "fieldname": "posAccelY",
          "fieldtype": "float"
        },
        {
          "fieldname": "posAccelZ",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotVelX",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotVelY",
          "fieldtype": "float"
        },
        {
          "fieldname": "rotVelZ",
          "fieldtype": "float"
        }
      ],
      "struct": "InputMotionData_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_eFileType",
          "fieldtype": "EWorkshopFileType"
        },
        {
          "fieldname": "m_nCreatorAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_nConsumerAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_rgchTitle",
          "fieldtype": "char [129]"
        },
        {
          "fieldname": "m_rgchDescription",
          "fieldtype": "char [8000]"
        },
        {
          "fieldname": "m_ulSteamIDOwner",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_rtimeCreated",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_rtimeUpdated",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_rtimeAddedToUserList",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_eVisibility",
          "fieldtype": "ERemoteStoragePublishedFileVisibility"
        },
        {
          "fieldname": "m_bBanned",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bAcceptedForUse",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bTagsTruncated",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_rgchTags",
          "fieldtype": "char [1025]"
        },
        {
          "fieldname": "m_hFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_hPreviewFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_pchFileName",
          "fieldtype": "char [260]"
        },
        {
          "fieldname": "m_nFileSize",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nPreviewFileSize",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgchURL",
          "fieldtype": "char [256]"
        },
        {
          "fieldname": "m_unVotesUp",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_unVotesDown",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_flScore",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_unNumChildren",
          "fieldtype": "uint32"
        }
      ],
      "struct": "SteamUGCDetails_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_itemId",
          "fieldtype": "SteamItemInstanceID_t"
        },
        {
          "fieldname": "m_iDefinition",
          "fieldtype": "SteamItemDef_t"
        },
        {
          "fieldname": "m_unQuantity",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_unFlags",
          "fieldtype": "uint16"
        }
      ],
      "struct": "SteamItemDetails_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "unMinX",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unMinY",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unMaxX",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unMaxY",
          "fieldtype": "uint32"
        }
      ],
      "struct": "SteamTVRegion_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_ipv6",
          "fieldtype": "uint8 [16]"
        },
        {
          "fieldname": "m_port",
          "fieldtype": "uint16"
        }
      ],
      "struct": "SteamNetworkingIPAddr",
      "methods": [
        {
          "returntype": "void",
          "params": [],
          "methodname": "Clear",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_Clear"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsIPv6AllZeros",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const uint8 *",
              "paramname": "ipv6"
            },
            {
              "paramtype": "uint16",
              "paramname": "nPort"
            }
          ],
          "methodname": "SetIPv6",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_SetIPv6"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint32",
              "paramname": "nIP"
            },
            {
              "paramtype": "uint16",
              "paramname": "nPort"
            }
          ],
          "methodname": "SetIPv4",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_SetIPv4"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsIPv4",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_IsIPv4"
        },
        {
          "returntype": "uint32",
          "params": [],
          "methodname": "GetIPv4",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_GetIPv4"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint16",
              "paramname": "nPort"
            }
          ],
          "methodname": "SetIPv6LocalHost",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsLocalHost",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_IsLocalHost"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "buf"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBuf"
            },
            {
              "paramtype": "bool",
              "paramname": "bWithPort"
            }
          ],
          "methodname": "ToString",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_ToString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszStr"
            }
          ],
          "methodname": "ParseString",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_ParseString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const SteamNetworkingIPAddr &",
              "paramname": "x"
            }
          ],
          "methodname": "operator==",
          "flat_name": "SteamAPI_SteamNetworkingIPAddr_IsEqualTo"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_eType",
          "fieldtype": "ESteamNetworkingIdentityType"
        },
        {
          "fieldname": "m_cbSize",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_reserved",
          "fieldtype": "uint32 [ 32 ]"
        }
      ],
      "struct": "SteamNetworkingIdentity",
      "methods": [
        {
          "returntype": "void",
          "params": [],
          "methodname": "Clear",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_Clear"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsInvalid",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_IsInvalid"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "CSteamID",
              "paramname": "steamID"
            }
          ],
          "methodname": "SetSteamID",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetSteamID"
        },
        {
          "returntype": "CSteamID",
          "params": [],
          "methodname": "GetSteamID",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetSteamID"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "uint64",
              "paramname": "steamID"
            }
          ],
          "methodname": "SetSteamID64",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetSteamID64"
        },
        {
          "returntype": "uint64",
          "params": [],
          "methodname": "GetSteamID64",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetSteamID64"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszString"
            }
          ],
          "methodname": "SetXboxPairwiseID",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetXboxPairwiseID"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetXboxPairwiseID",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetXboxPairwiseID"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "const SteamNetworkingIPAddr &",
              "paramname": "addr"
            }
          ],
          "methodname": "SetIPAddr",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetIPAddr"
        },
        {
          "returntype": "const SteamNetworkingIPAddr *",
          "params": [],
          "methodname": "GetIPAddr",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetIPAddr"
        },
        {
          "returntype": "void",
          "params": [],
          "methodname": "SetLocalHost",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetLocalHost"
        },
        {
          "returntype": "bool",
          "params": [],
          "methodname": "IsLocalHost",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_IsLocalHost"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszString"
            }
          ],
          "methodname": "SetGenericString",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetGenericString"
        },
        {
          "returntype": "const char *",
          "params": [],
          "methodname": "GetGenericString",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetGenericString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const void *",
              "paramname": "data"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbLen"
            }
          ],
          "methodname": "SetGenericBytes",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_SetGenericBytes"
        },
        {
          "returntype": "const uint8 *",
          "params": [
            {
              "paramtype": "int &",
              "paramname": "cbLen"
            }
          ],
          "methodname": "GetGenericBytes",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_GetGenericBytes"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const SteamNetworkingIdentity &",
              "paramname": "x"
            }
          ],
          "methodname": "operator==",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_IsEqualTo"
        },
        {
          "returntype": "void",
          "params": [
            {
              "paramtype": "char *",
              "paramname": "buf"
            },
            {
              "paramtype": "uint32",
              "paramname": "cbBuf"
            }
          ],
          "methodname": "ToString",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_ToString"
        },
        {
          "returntype": "bool",
          "params": [
            {
              "paramtype": "const char *",
              "paramname": "pszStr"
            }
          ],
          "methodname": "ParseString",
          "flat_name": "SteamAPI_SteamNetworkingIdentity_ParseString"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_identityRemote",
          "fieldtype": "SteamNetworkingIdentity"
        },
        {
          "fieldname": "m_nUserData",
          "fieldtype": "int64"
        },
        {
          "fieldname": "m_hListenSocket",
          "fieldtype": "HSteamListenSocket"
        },
        {
          "fieldname": "m_addrRemote",
          "fieldtype": "SteamNetworkingIPAddr"
        },
        {
          "fieldname": "m__pad1",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_idPOPRemote",
          "fieldtype": "SteamNetworkingPOPID"
        },
        {
          "fieldname": "m_idPOPRelay",
          "fieldtype": "SteamNetworkingPOPID"
        },
        {
          "fieldname": "m_eState",
          "fieldtype": "ESteamNetworkingConnectionState"
        },
        {
          "fieldname": "m_eEndReason",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_szEndDebug",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "m_szConnectionDescription",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "reserved",
          "fieldtype": "uint32 [64]"
        }
      ],
      "struct": "SteamNetConnectionInfo_t",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_eState",
          "fieldtype": "ESteamNetworkingConnectionState"
        },
        {
          "fieldname": "m_nPing",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_flConnectionQualityLocal",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_flConnectionQualityRemote",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_flOutPacketsPerSec",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_flOutBytesPerSec",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_flInPacketsPerSec",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_flInBytesPerSec",
          "fieldtype": "float"
        },
        {
          "fieldname": "m_nSendRateBytesPerSecond",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cbPendingUnreliable",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cbPendingReliable",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cbSentUnackedReliable",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_usecQueueTime",
          "fieldtype": "SteamNetworkingMicroseconds"
        },
        {
          "fieldname": "reserved",
          "fieldtype": "uint32 [16]"
        }
      ],
      "struct": "SteamNetworkingQuickConnectionStatus",
      "methods": []
    },
    {
      "fields": [
        {
          "fieldname": "m_pData",
          "fieldtype": "void *"
        },
        {
          "fieldname": "m_cbSize",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_conn",
          "fieldtype": "HSteamNetConnection"
        },
        {
          "fieldname": "m_identityPeer",
          "fieldtype": "SteamNetworkingIdentity"
        },
        {
          "fieldname": "m_nConnUserData",
          "fieldtype": "int64"
        },
        {
          "fieldname": "m_usecTimeReceived",
          "fieldtype": "SteamNetworkingMicroseconds"
        },
        {
          "fieldname": "m_nMessageNumber",
          "fieldtype": "int64"
        },
        {
          "fieldname": "m_pfnFreeData",
          "fieldtype": "void (*)(SteamNetworkingMessage_t *)"
        },
        {
          "fieldname": "m_pfnRelease",
          "fieldtype": "void (*)(SteamNetworkingMessage_t *)"
        },
        {
          "fieldname": "m_nChannel",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_nFlags",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_nUserData",
          "fieldtype": "int64"
        }
      ],
      "struct": "SteamNetworkingMessage_t",
      "methods": [
        {
          "returntype": "void",
          "params": [],
          "methodname": "Release",
          "flat_name": "SteamAPI_SteamNetworkingMessage_t_Release"
        }
      ]
    },
    {
      "fields": [
        {
          "fieldname": "m_data",
          "fieldtype": "uint8 [512]"
        }
      ],
      "struct": "SteamNetworkPingLocation_t",
      "methods": []
    }
  ],
  "callback_structs": [
    {
      "callback_id": 101,
      "fields": [],
      "struct": "SteamServersConnected_t",
      "methods": []
    },
    {
      "callback_id": 102,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_bStillRetrying",
          "fieldtype": "bool"
        }
      ],
      "struct": "SteamServerConnectFailure_t",
      "methods": []
    },
    {
      "callback_id": 103,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "SteamServersDisconnected_t",
      "methods": []
    },
    {
      "callback_id": 113,
      "fields": [
        {
          "fieldname": "m_uAppID",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_unGameServerIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_usGameServerPort",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_bSecure",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_uReason",
          "fieldtype": "uint32"
        }
      ],
      "struct": "ClientGameServerDeny_t",
      "methods": []
    },
    {
      "callback_id": 117,
      "fields": [
        {
          "fieldname": "m_eFailureType",
          "fieldtype": "uint8"
        }
      ],
      "struct": "IPCFailure_t",
      "methods": []
    },
    {
      "callback_id": 125,
      "fields": [],
      "struct": "LicensesUpdated_t",
      "methods": []
    },
    {
      "callback_id": 143,
      "fields": [
        {
          "fieldname": "m_SteamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eAuthSessionResponse",
          "fieldtype": "EAuthSessionResponse"
        },
        {
          "fieldname": "m_OwnerSteamID",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "ValidateAuthTicketResponse_t",
      "methods": []
    },
    {
      "callback_id": 152,
      "fields": [
        {
          "fieldname": "m_unAppID",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_ulOrderID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_bAuthorized",
          "fieldtype": "uint8"
        }
      ],
      "struct": "MicroTxnAuthorizationResponse_t",
      "methods": []
    },
    {
      "callback_id": 154,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "EncryptedAppTicketResponse_t",
      "methods": []
    },
    {
      "callback_id": 163,
      "fields": [
        {
          "fieldname": "m_hAuthTicket",
          "fieldtype": "HAuthTicket"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "GetAuthSessionTicketResponse_t",
      "methods": []
    },
    {
      "callback_id": 164,
      "fields": [
        {
          "fieldname": "m_szURL",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "GameWebCallback_t",
      "methods": []
    },
    {
      "callback_id": 165,
      "fields": [
        {
          "fieldname": "m_szURL",
          "fieldtype": "char [512]"
        }
      ],
      "struct": "StoreAuthURLResponse_t",
      "methods": []
    },
    {
      "callback_id": 166,
      "fields": [
        {
          "fieldname": "m_bAllowed",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_eNotAllowedReason",
          "fieldtype": "EMarketNotAllowedReasonFlags"
        },
        {
          "fieldname": "m_rtAllowedAtTime",
          "fieldtype": "RTime32"
        },
        {
          "fieldname": "m_cdaySteamGuardRequiredDays",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cdayNewDeviceCooldown",
          "fieldtype": "int"
        }
      ],
      "struct": "MarketEligibilityResponse_t",
      "methods": []
    },
    {
      "callback_id": 167,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_appid",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_bApplicable",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_csecsLast5h",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_progress",
          "fieldtype": "EDurationControlProgress"
        },
        {
          "fieldname": "m_notification",
          "fieldtype": "EDurationControlNotification"
        },
        {
          "fieldname": "m_csecsToday",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_csecsRemaining",
          "fieldtype": "int32"
        }
      ],
      "struct": "DurationControl_t",
      "methods": []
    },
    {
      "callback_id": 304,
      "fields": [
        {
          "fieldname": "m_ulSteamID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_nChangeFlags",
          "fieldtype": "int"
        }
      ],
      "struct": "PersonaStateChange_t",
      "methods": []
    },
    {
      "callback_id": 331,
      "fields": [
        {
          "fieldname": "m_bActive",
          "fieldtype": "uint8"
        }
      ],
      "struct": "GameOverlayActivated_t",
      "methods": []
    },
    {
      "callback_id": 332,
      "fields": [
        {
          "fieldname": "m_rgchServer",
          "fieldtype": "char [64]"
        },
        {
          "fieldname": "m_rgchPassword",
          "fieldtype": "char [64]"
        }
      ],
      "struct": "GameServerChangeRequested_t",
      "methods": []
    },
    {
      "callback_id": 333,
      "fields": [
        {
          "fieldname": "m_steamIDLobby",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_steamIDFriend",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GameLobbyJoinRequested_t",
      "methods": []
    },
    {
      "callback_id": 334,
      "fields": [
        {
          "fieldname": "m_steamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_iImage",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_iWide",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_iTall",
          "fieldtype": "int"
        }
      ],
      "struct": "AvatarImageLoaded_t",
      "methods": []
    },
    {
      "callback_id": 335,
      "fields": [
        {
          "fieldname": "m_steamIDClan",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_cOfficers",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "uint8"
        }
      ],
      "struct": "ClanOfficerListResponse_t",
      "methods": []
    },
    {
      "callback_id": 336,
      "fields": [
        {
          "fieldname": "m_steamIDFriend",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "FriendRichPresenceUpdate_t",
      "methods": []
    },
    {
      "callback_id": 337,
      "fields": [
        {
          "fieldname": "m_steamIDFriend",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_rgchConnect",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "GameRichPresenceJoinRequested_t",
      "methods": []
    },
    {
      "callback_id": 338,
      "fields": [
        {
          "fieldname": "m_steamIDClanChat",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_iMessageID",
          "fieldtype": "int"
        }
      ],
      "struct": "GameConnectedClanChatMsg_t",
      "methods": []
    },
    {
      "callback_id": 339,
      "fields": [
        {
          "fieldname": "m_steamIDClanChat",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GameConnectedChatJoin_t",
      "methods": []
    },
    {
      "callback_id": 340,
      "fields": [
        {
          "fieldname": "m_steamIDClanChat",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_bKicked",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bDropped",
          "fieldtype": "bool"
        }
      ],
      "struct": "GameConnectedChatLeave_t",
      "methods": []
    },
    {
      "callback_id": 341,
      "fields": [
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "bool"
        }
      ],
      "struct": "DownloadClanActivityCountsResult_t",
      "methods": []
    },
    {
      "callback_id": 342,
      "fields": [
        {
          "fieldname": "m_steamIDClanChat",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eChatRoomEnterResponse",
          "fieldtype": "EChatRoomEnterResponse"
        }
      ],
      "struct": "JoinClanChatRoomCompletionResult_t",
      "methods": []
    },
    {
      "callback_id": 343,
      "fields": [
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_iMessageID",
          "fieldtype": "int"
        }
      ],
      "struct": "GameConnectedFriendChatMsg_t",
      "methods": []
    },
    {
      "callback_id": 344,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_nCount",
          "fieldtype": "int"
        }
      ],
      "struct": "FriendsGetFollowerCount_t",
      "methods": []
    },
    {
      "callback_id": 345,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_bIsFollowing",
          "fieldtype": "bool"
        }
      ],
      "struct": "FriendsIsFollowing_t",
      "methods": []
    },
    {
      "callback_id": 346,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_rgSteamID",
          "fieldtype": "CSteamID [50]"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        }
      ],
      "struct": "FriendsEnumerateFollowingList_t",
      "methods": []
    },
    {
      "callback_id": 347,
      "fields": [
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bLocalSuccess",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_result",
          "fieldtype": "EResult"
        }
      ],
      "struct": "SetPersonaNameResponse_t",
      "methods": []
    },
    {
      "callback_id": 348,
      "fields": [],
      "struct": "UnreadChatMessagesChanged_t",
      "methods": []
    },
    {
      "callback_id": 701,
      "fields": [],
      "struct": "IPCountry_t",
      "methods": []
    },
    {
      "callback_id": 702,
      "fields": [
        {
          "fieldname": "m_nMinutesBatteryLeft",
          "fieldtype": "uint8"
        }
      ],
      "struct": "LowBatteryPower_t",
      "methods": []
    },
    {
      "callback_id": 703,
      "fields": [
        {
          "fieldname": "m_hAsyncCall",
          "fieldtype": "SteamAPICall_t"
        },
        {
          "fieldname": "m_iCallback",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cubParam",
          "fieldtype": "uint32"
        }
      ],
      "struct": "SteamAPICallCompleted_t",
      "methods": []
    },
    {
      "callback_id": 704,
      "fields": [],
      "struct": "SteamShutdown_t",
      "methods": []
    },
    {
      "callback_id": 705,
      "fields": [
        {
          "fieldname": "m_eCheckFileSignature",
          "fieldtype": "ECheckFileSignature"
        }
      ],
      "struct": "CheckFileSignature_t",
      "methods": []
    },
    {
      "callback_id": 714,
      "fields": [
        {
          "fieldname": "m_bSubmitted",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_unSubmittedText",
          "fieldtype": "uint32"
        }
      ],
      "struct": "GamepadTextInputDismissed_t",
      "methods": []
    },
    {
      "callback_id": 502,
      "fields": [
        {
          "fieldname": "m_nIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nQueryPort",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nConnPort",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nFlags",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_bAdd",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_unAccountId",
          "fieldtype": "AccountID_t"
        }
      ],
      "struct": "FavoritesListChanged_t",
      "methods": []
    },
    {
      "callback_id": 503,
      "fields": [
        {
          "fieldname": "m_ulSteamIDUser",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulGameID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "LobbyInvite_t",
      "methods": []
    },
    {
      "callback_id": 504,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_rgfChatPermissions",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_bLocked",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_EChatRoomEnterResponse",
          "fieldtype": "uint32"
        }
      ],
      "struct": "LobbyEnter_t",
      "methods": []
    },
    {
      "callback_id": 505,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDMember",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "uint8"
        }
      ],
      "struct": "LobbyDataUpdate_t",
      "methods": []
    },
    {
      "callback_id": 506,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDUserChanged",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDMakingChange",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_rgfChatMemberStateChange",
          "fieldtype": "uint32"
        }
      ],
      "struct": "LobbyChatUpdate_t",
      "methods": []
    },
    {
      "callback_id": 507,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDUser",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eChatEntryType",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_iChatID",
          "fieldtype": "uint32"
        }
      ],
      "struct": "LobbyChatMsg_t",
      "methods": []
    },
    {
      "callback_id": 509,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDGameServer",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_unIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_usPort",
          "fieldtype": "uint16"
        }
      ],
      "struct": "LobbyGameCreated_t",
      "methods": []
    },
    {
      "callback_id": 510,
      "fields": [
        {
          "fieldname": "m_nLobbiesMatching",
          "fieldtype": "uint32"
        }
      ],
      "struct": "LobbyMatchList_t",
      "methods": []
    },
    {
      "callback_id": 512,
      "fields": [
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulSteamIDAdmin",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_bKickedDueToDisconnect",
          "fieldtype": "uint8"
        }
      ],
      "struct": "LobbyKicked_t",
      "methods": []
    },
    {
      "callback_id": 513,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulSteamIDLobby",
          "fieldtype": "uint64"
        }
      ],
      "struct": "LobbyCreated_t",
      "methods": []
    },
    {
      "callback_id": 515,
      "fields": [
        {
          "fieldname": "m_bGameBootInviteExists",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_steamIDLobby",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "PSNGameBootInviteResult_t",
      "methods": []
    },
    {
      "callback_id": 516,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "FavoritesListAccountsUpdated_t",
      "methods": []
    },
    {
      "callback_id": 5201,
      "fields": [
        {
          "fieldname": "m_ullSearchID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_lobbyID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_steamIDEndedSearch",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_nSecondsRemainingEstimate",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_cPlayersSearching",
          "fieldtype": "int32"
        }
      ],
      "struct": "SearchForGameProgressCallback_t",
      "methods": []
    },
    {
      "callback_id": 5202,
      "fields": [
        {
          "fieldname": "m_ullSearchID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nCountPlayersInGame",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nCountAcceptedGame",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_steamIDHost",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_bFinalCallback",
          "fieldtype": "bool"
        }
      ],
      "struct": "SearchForGameResultCallback_t",
      "methods": []
    },
    {
      "callback_id": 5211,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ullSearchID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "RequestPlayersForGameProgressCallback_t",
      "methods": []
    },
    {
      "callback_id": 5212,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ullSearchID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_SteamIDPlayerFound",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_SteamIDLobby",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_ePlayerAcceptState",
          "fieldtype": "RequestPlayersForGameResultCallback_t_PlayerAcceptState_t"
        },
        {
          "fieldname": "m_nPlayerIndex",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalPlayersFound",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalPlayersAcceptedGame",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nSuggestedTeamIndex",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_ullUniqueGameID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "RequestPlayersForGameResultCallback_t",
      "methods": []
    },
    {
      "callback_id": 5213,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ullSearchID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ullUniqueGameID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "RequestPlayersForGameFinalResultCallback_t",
      "methods": []
    },
    {
      "callback_id": 5214,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "ullUniqueGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "steamIDPlayer",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "SubmitPlayerResultResultCallback_t",
      "methods": []
    },
    {
      "callback_id": 5215,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "ullUniqueGameID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "EndGameResultCallback_t",
      "methods": []
    },
    {
      "callback_id": 5301,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulBeaconID",
          "fieldtype": "PartyBeaconID_t"
        },
        {
          "fieldname": "m_SteamIDBeaconOwner",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_rgchConnectString",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "JoinPartyCallback_t",
      "methods": []
    },
    {
      "callback_id": 5302,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulBeaconID",
          "fieldtype": "PartyBeaconID_t"
        }
      ],
      "struct": "CreateBeaconCallback_t",
      "methods": []
    },
    {
      "callback_id": 5303,
      "fields": [
        {
          "fieldname": "m_ulBeaconID",
          "fieldtype": "PartyBeaconID_t"
        },
        {
          "fieldname": "m_steamIDJoiner",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "ReservationNotificationCallback_t",
      "methods": []
    },
    {
      "callback_id": 5304,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "ChangeNumOpenSlotsCallback_t",
      "methods": []
    },
    {
      "callback_id": 5305,
      "fields": [],
      "struct": "AvailableBeaconLocationsUpdated_t",
      "methods": []
    },
    {
      "callback_id": 5306,
      "fields": [],
      "struct": "ActiveBeaconsUpdated_t",
      "methods": []
    },
    {
      "callback_id": 1301,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unNumDownloads",
          "fieldtype": "int"
        }
      ],
      "struct": "RemoteStorageAppSyncedClient_t",
      "methods": []
    },
    {
      "callback_id": 1302,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unNumUploads",
          "fieldtype": "int"
        }
      ],
      "struct": "RemoteStorageAppSyncedServer_t",
      "methods": []
    },
    {
      "callback_id": 1303,
      "fields": [
        {
          "fieldname": "m_rgchCurrentFile",
          "fieldtype": "char [260]"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_uBytesTransferredThisChunk",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_dAppPercentComplete",
          "fieldtype": "double"
        },
        {
          "fieldname": "m_bUploading",
          "fieldtype": "bool"
        }
      ],
      "struct": "RemoteStorageAppSyncProgress_t",
      "methods": []
    },
    {
      "callback_id": 1305,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "RemoteStorageAppSyncStatusCheck_t",
      "methods": []
    },
    {
      "callback_id": 1307,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_hFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_rgchFilename",
          "fieldtype": "char [260]"
        }
      ],
      "struct": "RemoteStorageFileShareResult_t",
      "methods": []
    },
    {
      "callback_id": 1309,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_bUserNeedsToAcceptWorkshopLegalAgreement",
          "fieldtype": "bool"
        }
      ],
      "struct": "RemoteStoragePublishFileResult_t",
      "methods": []
    },
    {
      "callback_id": 1311,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "RemoteStorageDeletePublishedFileResult_t",
      "methods": []
    },
    {
      "callback_id": 1312,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgPublishedFileId",
          "fieldtype": "PublishedFileId_t [50]"
        }
      ],
      "struct": "RemoteStorageEnumerateUserPublishedFilesResult_t",
      "methods": []
    },
    {
      "callback_id": 1313,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "RemoteStorageSubscribePublishedFileResult_t",
      "methods": []
    },
    {
      "callback_id": 1314,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgPublishedFileId",
          "fieldtype": "PublishedFileId_t [50]"
        },
        {
          "fieldname": "m_rgRTimeSubscribed",
          "fieldtype": "uint32 [50]"
        }
      ],
      "struct": "RemoteStorageEnumerateUserSubscribedFilesResult_t",
      "methods": []
    },
    {
      "callback_id": 1315,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "RemoteStorageUnsubscribePublishedFileResult_t",
      "methods": []
    },
    {
      "callback_id": 1316,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_bUserNeedsToAcceptWorkshopLegalAgreement",
          "fieldtype": "bool"
        }
      ],
      "struct": "RemoteStorageUpdatePublishedFileResult_t",
      "methods": []
    },
    {
      "callback_id": 1317,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_hFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_nSizeInBytes",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_pchFileName",
          "fieldtype": "char [260]"
        },
        {
          "fieldname": "m_ulSteamIDOwner",
          "fieldtype": "uint64"
        }
      ],
      "struct": "RemoteStorageDownloadUGCResult_t",
      "methods": []
    },
    {
      "callback_id": 1318,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nCreatorAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_nConsumerAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_rgchTitle",
          "fieldtype": "char [129]"
        },
        {
          "fieldname": "m_rgchDescription",
          "fieldtype": "char [8000]"
        },
        {
          "fieldname": "m_hFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_hPreviewFile",
          "fieldtype": "UGCHandle_t"
        },
        {
          "fieldname": "m_ulSteamIDOwner",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_rtimeCreated",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_rtimeUpdated",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_eVisibility",
          "fieldtype": "ERemoteStoragePublishedFileVisibility"
        },
        {
          "fieldname": "m_bBanned",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_rgchTags",
          "fieldtype": "char [1025]"
        },
        {
          "fieldname": "m_bTagsTruncated",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_pchFileName",
          "fieldtype": "char [260]"
        },
        {
          "fieldname": "m_nFileSize",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nPreviewFileSize",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgchURL",
          "fieldtype": "char [256]"
        },
        {
          "fieldname": "m_eFileType",
          "fieldtype": "EWorkshopFileType"
        },
        {
          "fieldname": "m_bAcceptedForUse",
          "fieldtype": "bool"
        }
      ],
      "struct": "RemoteStorageGetPublishedFileDetailsResult_t",
      "methods": []
    },
    {
      "callback_id": 1319,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgPublishedFileId",
          "fieldtype": "PublishedFileId_t [50]"
        },
        {
          "fieldname": "m_rgScore",
          "fieldtype": "float [50]"
        },
        {
          "fieldname": "m_nAppId",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_unStartIndex",
          "fieldtype": "uint32"
        }
      ],
      "struct": "RemoteStorageEnumerateWorkshopFilesResult_t",
      "methods": []
    },
    {
      "callback_id": 1320,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nVotesFor",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nVotesAgainst",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nReports",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_fScore",
          "fieldtype": "float"
        }
      ],
      "struct": "RemoteStorageGetPublishedItemVoteDetailsResult_t",
      "methods": []
    },
    {
      "callback_id": 1321,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "RemoteStoragePublishedFileSubscribed_t",
      "methods": []
    },
    {
      "callback_id": 1322,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "RemoteStoragePublishedFileUnsubscribed_t",
      "methods": []
    },
    {
      "callback_id": 1323,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "RemoteStoragePublishedFileDeleted_t",
      "methods": []
    },
    {
      "callback_id": 1324,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "RemoteStorageUpdateUserPublishedItemVoteResult_t",
      "methods": []
    },
    {
      "callback_id": 1325,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eVote",
          "fieldtype": "EWorkshopVote"
        }
      ],
      "struct": "RemoteStorageUserVoteDetails_t",
      "methods": []
    },
    {
      "callback_id": 1326,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgPublishedFileId",
          "fieldtype": "PublishedFileId_t [50]"
        }
      ],
      "struct": "RemoteStorageEnumerateUserSharedWorkshopFilesResult_t",
      "methods": []
    },
    {
      "callback_id": 1327,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eAction",
          "fieldtype": "EWorkshopFileAction"
        }
      ],
      "struct": "RemoteStorageSetUserPublishedFileActionResult_t",
      "methods": []
    },
    {
      "callback_id": 1328,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_eAction",
          "fieldtype": "EWorkshopFileAction"
        },
        {
          "fieldname": "m_nResultsReturned",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_nTotalResultCount",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_rgPublishedFileId",
          "fieldtype": "PublishedFileId_t [50]"
        },
        {
          "fieldname": "m_rgRTimeUpdated",
          "fieldtype": "uint32 [50]"
        }
      ],
      "struct": "RemoteStorageEnumeratePublishedFilesByUserActionResult_t",
      "methods": []
    },
    {
      "callback_id": 1329,
      "fields": [
        {
          "fieldname": "m_dPercentFile",
          "fieldtype": "double"
        },
        {
          "fieldname": "m_bPreview",
          "fieldtype": "bool"
        }
      ],
      "struct": "RemoteStoragePublishFileProgress_t",
      "methods": []
    },
    {
      "callback_id": 1330,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_ulUnused",
          "fieldtype": "uint64"
        }
      ],
      "struct": "RemoteStoragePublishedFileUpdated_t",
      "methods": []
    },
    {
      "callback_id": 1331,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "RemoteStorageFileWriteAsyncComplete_t",
      "methods": []
    },
    {
      "callback_id": 1332,
      "fields": [
        {
          "fieldname": "m_hFileReadAsync",
          "fieldtype": "SteamAPICall_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nOffset",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_cubRead",
          "fieldtype": "uint32"
        }
      ],
      "struct": "RemoteStorageFileReadAsyncComplete_t",
      "methods": []
    },
    {
      "callback_id": 1101,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "UserStatsReceived_t",
      "methods": []
    },
    {
      "callback_id": 1102,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "UserStatsStored_t",
      "methods": []
    },
    {
      "callback_id": 1103,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_bGroupAchievement",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_rgchAchievementName",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "m_nCurProgress",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nMaxProgress",
          "fieldtype": "uint32"
        }
      ],
      "struct": "UserAchievementStored_t",
      "methods": []
    },
    {
      "callback_id": 1104,
      "fields": [
        {
          "fieldname": "m_hSteamLeaderboard",
          "fieldtype": "SteamLeaderboard_t"
        },
        {
          "fieldname": "m_bLeaderboardFound",
          "fieldtype": "uint8"
        }
      ],
      "struct": "LeaderboardFindResult_t",
      "methods": []
    },
    {
      "callback_id": 1105,
      "fields": [
        {
          "fieldname": "m_hSteamLeaderboard",
          "fieldtype": "SteamLeaderboard_t"
        },
        {
          "fieldname": "m_hSteamLeaderboardEntries",
          "fieldtype": "SteamLeaderboardEntries_t"
        },
        {
          "fieldname": "m_cEntryCount",
          "fieldtype": "int"
        }
      ],
      "struct": "LeaderboardScoresDownloaded_t",
      "methods": []
    },
    {
      "callback_id": 1106,
      "fields": [
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_hSteamLeaderboard",
          "fieldtype": "SteamLeaderboard_t"
        },
        {
          "fieldname": "m_nScore",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_bScoreChanged",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_nGlobalRankNew",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_nGlobalRankPrevious",
          "fieldtype": "int"
        }
      ],
      "struct": "LeaderboardScoreUploaded_t",
      "methods": []
    },
    {
      "callback_id": 1107,
      "fields": [
        {
          "fieldname": "m_bSuccess",
          "fieldtype": "uint8"
        },
        {
          "fieldname": "m_cPlayers",
          "fieldtype": "int32"
        }
      ],
      "struct": "NumberOfCurrentPlayers_t",
      "methods": []
    },
    {
      "callback_id": 1108,
      "fields": [
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "UserStatsUnloaded_t",
      "methods": []
    },
    {
      "callback_id": 1109,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "CGameID"
        },
        {
          "fieldname": "m_rgchAchievementName",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "m_bAchieved",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_nIconHandle",
          "fieldtype": "int"
        }
      ],
      "struct": "UserAchievementIconFetched_t",
      "methods": []
    },
    {
      "callback_id": 1110,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "GlobalAchievementPercentagesReady_t",
      "methods": []
    },
    {
      "callback_id": 1111,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_hSteamLeaderboard",
          "fieldtype": "SteamLeaderboard_t"
        }
      ],
      "struct": "LeaderboardUGCSet_t",
      "methods": []
    },
    {
      "callback_id": 1112,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulRequiredDiskSpace",
          "fieldtype": "uint64"
        }
      ],
      "struct": "PS3TrophiesInstalled_t",
      "methods": []
    },
    {
      "callback_id": 1112,
      "fields": [
        {
          "fieldname": "m_nGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "GlobalStatsReceived_t",
      "methods": []
    },
    {
      "callback_id": 1005,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "DlcInstalled_t",
      "methods": []
    },
    {
      "callback_id": 1008,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "ERegisterActivationCodeResult"
        },
        {
          "fieldname": "m_unPackageRegistered",
          "fieldtype": "uint32"
        }
      ],
      "struct": "RegisterActivationCodeResponse_t",
      "methods": []
    },
    {
      "callback_id": 1014,
      "fields": [],
      "struct": "NewUrlLaunchParameters_t",
      "methods": []
    },
    {
      "callback_id": 1021,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_cchKeyLength",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_rgchKey",
          "fieldtype": "char [240]"
        }
      ],
      "struct": "AppProofOfPurchaseKeyResponse_t",
      "methods": []
    },
    {
      "callback_id": 1023,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulFileSize",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_FileSHA",
          "fieldtype": "uint8 [20]"
        },
        {
          "fieldname": "m_unFlags",
          "fieldtype": "uint32"
        }
      ],
      "struct": "FileDetailsResult_t",
      "methods": []
    },
    {
      "callback_id": 1202,
      "fields": [
        {
          "fieldname": "m_steamIDRemote",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "P2PSessionRequest_t",
      "methods": []
    },
    {
      "callback_id": 1203,
      "fields": [
        {
          "fieldname": "m_steamIDRemote",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eP2PSessionError",
          "fieldtype": "uint8"
        }
      ],
      "struct": "P2PSessionConnectFail_t",
      "methods": []
    },
    {
      "callback_id": 1201,
      "fields": [
        {
          "fieldname": "m_hSocket",
          "fieldtype": "SNetSocket_t"
        },
        {
          "fieldname": "m_hListenSocket",
          "fieldtype": "SNetListenSocket_t"
        },
        {
          "fieldname": "m_steamIDRemote",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eSNetSocketState",
          "fieldtype": "int"
        }
      ],
      "struct": "SocketStatusCallback_t",
      "methods": []
    },
    {
      "callback_id": 2301,
      "fields": [
        {
          "fieldname": "m_hLocal",
          "fieldtype": "ScreenshotHandle"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "ScreenshotReady_t",
      "methods": []
    },
    {
      "callback_id": 2302,
      "fields": [],
      "struct": "ScreenshotRequested_t",
      "methods": []
    },
    {
      "callback_id": 4001,
      "fields": [],
      "struct": "PlaybackStatusHasChanged_t",
      "methods": []
    },
    {
      "callback_id": 4002,
      "fields": [
        {
          "fieldname": "m_flNewVolume",
          "fieldtype": "float"
        }
      ],
      "struct": "VolumeHasChanged_t",
      "methods": []
    },
    {
      "callback_id": 4101,
      "fields": [],
      "struct": "MusicPlayerRemoteWillActivate_t",
      "methods": []
    },
    {
      "callback_id": 4102,
      "fields": [],
      "struct": "MusicPlayerRemoteWillDeactivate_t",
      "methods": []
    },
    {
      "callback_id": 4103,
      "fields": [],
      "struct": "MusicPlayerRemoteToFront_t",
      "methods": []
    },
    {
      "callback_id": 4104,
      "fields": [],
      "struct": "MusicPlayerWillQuit_t",
      "methods": []
    },
    {
      "callback_id": 4105,
      "fields": [],
      "struct": "MusicPlayerWantsPlay_t",
      "methods": []
    },
    {
      "callback_id": 4106,
      "fields": [],
      "struct": "MusicPlayerWantsPause_t",
      "methods": []
    },
    {
      "callback_id": 4107,
      "fields": [],
      "struct": "MusicPlayerWantsPlayPrevious_t",
      "methods": []
    },
    {
      "callback_id": 4108,
      "fields": [],
      "struct": "MusicPlayerWantsPlayNext_t",
      "methods": []
    },
    {
      "callback_id": 4109,
      "fields": [
        {
          "fieldname": "m_bShuffled",
          "fieldtype": "bool"
        }
      ],
      "struct": "MusicPlayerWantsShuffled_t",
      "methods": []
    },
    {
      "callback_id": 4110,
      "fields": [
        {
          "fieldname": "m_bLooped",
          "fieldtype": "bool"
        }
      ],
      "struct": "MusicPlayerWantsLooped_t",
      "methods": []
    },
    {
      "callback_id": 4011,
      "fields": [
        {
          "fieldname": "m_flNewVolume",
          "fieldtype": "float"
        }
      ],
      "struct": "MusicPlayerWantsVolume_t",
      "methods": []
    },
    {
      "callback_id": 4012,
      "fields": [
        {
          "fieldname": "nID",
          "fieldtype": "int"
        }
      ],
      "struct": "MusicPlayerSelectsQueueEntry_t",
      "methods": []
    },
    {
      "callback_id": 4013,
      "fields": [
        {
          "fieldname": "nID",
          "fieldtype": "int"
        }
      ],
      "struct": "MusicPlayerSelectsPlaylistEntry_t",
      "methods": []
    },
    {
      "callback_id": 4114,
      "fields": [
        {
          "fieldname": "m_nPlayingRepeatStatus",
          "fieldtype": "int"
        }
      ],
      "struct": "MusicPlayerWantsPlayingRepeatStatus_t",
      "methods": []
    },
    {
      "callback_id": 2101,
      "fields": [
        {
          "fieldname": "m_hRequest",
          "fieldtype": "HTTPRequestHandle"
        },
        {
          "fieldname": "m_ulContextValue",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_bRequestSuccessful",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_eStatusCode",
          "fieldtype": "EHTTPStatusCode"
        },
        {
          "fieldname": "m_unBodySize",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTTPRequestCompleted_t",
      "methods": []
    },
    {
      "callback_id": 2102,
      "fields": [
        {
          "fieldname": "m_hRequest",
          "fieldtype": "HTTPRequestHandle"
        },
        {
          "fieldname": "m_ulContextValue",
          "fieldtype": "uint64"
        }
      ],
      "struct": "HTTPRequestHeadersReceived_t",
      "methods": []
    },
    {
      "callback_id": 2103,
      "fields": [
        {
          "fieldname": "m_hRequest",
          "fieldtype": "HTTPRequestHandle"
        },
        {
          "fieldname": "m_ulContextValue",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_cOffset",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_cBytesReceived",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTTPRequestDataReceived_t",
      "methods": []
    },
    {
      "callback_id": 3401,
      "fields": [
        {
          "fieldname": "m_handle",
          "fieldtype": "UGCQueryHandle_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unNumResultsReturned",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_unTotalMatchingResults",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_bCachedData",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_rgchNextCursor",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "SteamUGCQueryCompleted_t",
      "methods": []
    },
    {
      "callback_id": 3402,
      "fields": [
        {
          "fieldname": "m_details",
          "fieldtype": "SteamUGCDetails_t"
        },
        {
          "fieldname": "m_bCachedData",
          "fieldtype": "bool"
        }
      ],
      "struct": "SteamUGCRequestUGCDetailsResult_t",
      "methods": []
    },
    {
      "callback_id": 3403,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_bUserNeedsToAcceptWorkshopLegalAgreement",
          "fieldtype": "bool"
        }
      ],
      "struct": "CreateItemResult_t",
      "methods": []
    },
    {
      "callback_id": 3404,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_bUserNeedsToAcceptWorkshopLegalAgreement",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "SubmitItemUpdateResult_t",
      "methods": []
    },
    {
      "callback_id": 3405,
      "fields": [
        {
          "fieldname": "m_unAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "ItemInstalled_t",
      "methods": []
    },
    {
      "callback_id": 3406,
      "fields": [
        {
          "fieldname": "m_unAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "DownloadItemResult_t",
      "methods": []
    },
    {
      "callback_id": 3407,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_bWasAddRequest",
          "fieldtype": "bool"
        }
      ],
      "struct": "UserFavoriteItemsListChanged_t",
      "methods": []
    },
    {
      "callback_id": 3408,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_bVoteUp",
          "fieldtype": "bool"
        }
      ],
      "struct": "SetUserItemVoteResult_t",
      "methods": []
    },
    {
      "callback_id": 3409,
      "fields": [
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_bVotedUp",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bVotedDown",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bVoteSkipped",
          "fieldtype": "bool"
        }
      ],
      "struct": "GetUserItemVoteResult_t",
      "methods": []
    },
    {
      "callback_id": 3410,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "StartPlaytimeTrackingResult_t",
      "methods": []
    },
    {
      "callback_id": 3411,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "StopPlaytimeTrackingResult_t",
      "methods": []
    },
    {
      "callback_id": 3412,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nChildPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "AddUGCDependencyResult_t",
      "methods": []
    },
    {
      "callback_id": 3413,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nChildPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "RemoveUGCDependencyResult_t",
      "methods": []
    },
    {
      "callback_id": 3414,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "AddAppDependencyResult_t",
      "methods": []
    },
    {
      "callback_id": 3415,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "RemoveAppDependencyResult_t",
      "methods": []
    },
    {
      "callback_id": 3416,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        },
        {
          "fieldname": "m_rgAppIDs",
          "fieldtype": "AppId_t [32]"
        },
        {
          "fieldname": "m_nNumAppDependencies",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_nTotalNumAppDependencies",
          "fieldtype": "uint32"
        }
      ],
      "struct": "GetAppDependenciesResult_t",
      "methods": []
    },
    {
      "callback_id": 3417,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nPublishedFileId",
          "fieldtype": "PublishedFileId_t"
        }
      ],
      "struct": "DeleteItemResult_t",
      "methods": []
    },
    {
      "callback_id": 3901,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "SteamAppInstalled_t",
      "methods": []
    },
    {
      "callback_id": 3902,
      "fields": [
        {
          "fieldname": "m_nAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "SteamAppUninstalled_t",
      "methods": []
    },
    {
      "callback_id": 4501,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        }
      ],
      "struct": "HTML_BrowserReady_t",
      "methods": []
    },
    {
      "callback_id": 4502,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pBGRA",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "unWide",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unTall",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unUpdateX",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unUpdateY",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unUpdateWide",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unUpdateTall",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unScrollX",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unScrollY",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "flPageScale",
          "fieldtype": "float"
        },
        {
          "fieldname": "unPageSerial",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTML_NeedsPaint_t",
      "methods": []
    },
    {
      "callback_id": 4503,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "pchTarget",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "pchPostData",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "bIsRedirect",
          "fieldtype": "bool"
        }
      ],
      "struct": "HTML_StartRequest_t",
      "methods": []
    },
    {
      "callback_id": 4504,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        }
      ],
      "struct": "HTML_CloseBrowser_t",
      "methods": []
    },
    {
      "callback_id": 4505,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "pchPostData",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "bIsRedirect",
          "fieldtype": "bool"
        },
        {
          "fieldname": "pchPageTitle",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "bNewNavigation",
          "fieldtype": "bool"
        }
      ],
      "struct": "HTML_URLChanged_t",
      "methods": []
    },
    {
      "callback_id": 4506,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "pchPageTitle",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_FinishedRequest_t",
      "methods": []
    },
    {
      "callback_id": 4507,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_OpenLinkInNewTab_t",
      "methods": []
    },
    {
      "callback_id": 4508,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchTitle",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_ChangedTitle_t",
      "methods": []
    },
    {
      "callback_id": 4509,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "unResults",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unCurrentMatch",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTML_SearchResults_t",
      "methods": []
    },
    {
      "callback_id": 4510,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "bCanGoBack",
          "fieldtype": "bool"
        },
        {
          "fieldname": "bCanGoForward",
          "fieldtype": "bool"
        }
      ],
      "struct": "HTML_CanGoBackAndForward_t",
      "methods": []
    },
    {
      "callback_id": 4511,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "unScrollMax",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unScrollCurrent",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "flPageScale",
          "fieldtype": "float"
        },
        {
          "fieldname": "bVisible",
          "fieldtype": "bool"
        },
        {
          "fieldname": "unPageSize",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTML_HorizontalScroll_t",
      "methods": []
    },
    {
      "callback_id": 4512,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "unScrollMax",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unScrollCurrent",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "flPageScale",
          "fieldtype": "float"
        },
        {
          "fieldname": "bVisible",
          "fieldtype": "bool"
        },
        {
          "fieldname": "unPageSize",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTML_VerticalScroll_t",
      "methods": []
    },
    {
      "callback_id": 4513,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "x",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "y",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "bInput",
          "fieldtype": "bool"
        },
        {
          "fieldname": "bLiveLink",
          "fieldtype": "bool"
        }
      ],
      "struct": "HTML_LinkAtPosition_t",
      "methods": []
    },
    {
      "callback_id": 4514,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchMessage",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_JSAlert_t",
      "methods": []
    },
    {
      "callback_id": 4515,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchMessage",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_JSConfirm_t",
      "methods": []
    },
    {
      "callback_id": 4516,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchTitle",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "pchInitialFile",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_FileOpenDialog_t",
      "methods": []
    },
    {
      "callback_id": 4521,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchURL",
          "fieldtype": "const char *"
        },
        {
          "fieldname": "unX",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unY",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unWide",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unTall",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "unNewWindow_BrowserHandle_IGNORE",
          "fieldtype": "HHTMLBrowser"
        }
      ],
      "struct": "HTML_NewWindow_t",
      "methods": []
    },
    {
      "callback_id": 4522,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "eMouseCursor",
          "fieldtype": "uint32"
        }
      ],
      "struct": "HTML_SetCursor_t",
      "methods": []
    },
    {
      "callback_id": 4523,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchMsg",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_StatusText_t",
      "methods": []
    },
    {
      "callback_id": 4524,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchMsg",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_ShowToolTip_t",
      "methods": []
    },
    {
      "callback_id": 4525,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "pchMsg",
          "fieldtype": "const char *"
        }
      ],
      "struct": "HTML_UpdateToolTip_t",
      "methods": []
    },
    {
      "callback_id": 4526,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        }
      ],
      "struct": "HTML_HideToolTip_t",
      "methods": []
    },
    {
      "callback_id": 4527,
      "fields": [
        {
          "fieldname": "unBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        },
        {
          "fieldname": "unOldBrowserHandle",
          "fieldtype": "HHTMLBrowser"
        }
      ],
      "struct": "HTML_BrowserRestarted_t",
      "methods": []
    },
    {
      "callback_id": 4700,
      "fields": [
        {
          "fieldname": "m_handle",
          "fieldtype": "SteamInventoryResult_t"
        },
        {
          "fieldname": "m_result",
          "fieldtype": "EResult"
        }
      ],
      "struct": "SteamInventoryResultReady_t",
      "methods": []
    },
    {
      "callback_id": 4701,
      "fields": [
        {
          "fieldname": "m_handle",
          "fieldtype": "SteamInventoryResult_t"
        }
      ],
      "struct": "SteamInventoryFullUpdate_t",
      "methods": []
    },
    {
      "callback_id": 4702,
      "fields": [],
      "struct": "SteamInventoryDefinitionUpdate_t",
      "methods": []
    },
    {
      "callback_id": 4703,
      "fields": [
        {
          "fieldname": "m_result",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_numEligiblePromoItemDefs",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_bCachedData",
          "fieldtype": "bool"
        }
      ],
      "struct": "SteamInventoryEligiblePromoItemDefIDs_t",
      "methods": []
    },
    {
      "callback_id": 4704,
      "fields": [
        {
          "fieldname": "m_result",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_ulOrderID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_ulTransID",
          "fieldtype": "uint64"
        }
      ],
      "struct": "SteamInventoryStartPurchaseResult_t",
      "methods": []
    },
    {
      "callback_id": 4705,
      "fields": [
        {
          "fieldname": "m_result",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_rgchCurrency",
          "fieldtype": "char [4]"
        }
      ],
      "struct": "SteamInventoryRequestPricesResult_t",
      "methods": []
    },
    {
      "callback_id": 4611,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unVideoAppID",
          "fieldtype": "AppId_t"
        },
        {
          "fieldname": "m_rgchURL",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "GetVideoURLResult_t",
      "methods": []
    },
    {
      "callback_id": 4624,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unVideoAppID",
          "fieldtype": "AppId_t"
        }
      ],
      "struct": "GetOPFSettingsResult_t",
      "methods": []
    },
    {
      "callback_id": 4604,
      "fields": [
        {
          "fieldname": "m_bIsRTMP",
          "fieldtype": "bool"
        }
      ],
      "struct": "BroadcastUploadStart_t",
      "methods": []
    },
    {
      "callback_id": 4605,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EBroadcastUploadResult"
        }
      ],
      "struct": "BroadcastUploadStop_t",
      "methods": []
    },
    {
      "callback_id": 5001,
      "fields": [],
      "struct": "SteamParentalSettingsChanged_t",
      "methods": []
    },
    {
      "callback_id": 5701,
      "fields": [
        {
          "fieldname": "m_unSessionID",
          "fieldtype": "RemotePlaySessionID_t"
        }
      ],
      "struct": "SteamRemotePlaySessionConnected_t",
      "methods": []
    },
    {
      "callback_id": 5702,
      "fields": [
        {
          "fieldname": "m_unSessionID",
          "fieldtype": "RemotePlaySessionID_t"
        }
      ],
      "struct": "SteamRemotePlaySessionDisconnected_t",
      "methods": []
    },
    {
      "callback_id": 1281,
      "fields": [
        {
          "fieldname": "m_eAvail",
          "fieldtype": "ESteamNetworkingAvailability"
        },
        {
          "fieldname": "m_bPingMeasurementInProgress",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_eAvailNetworkConfig",
          "fieldtype": "ESteamNetworkingAvailability"
        },
        {
          "fieldname": "m_eAvailAnyRelay",
          "fieldtype": "ESteamNetworkingAvailability"
        },
        {
          "fieldname": "m_debugMsg",
          "fieldtype": "char [256]"
        }
      ],
      "struct": "SteamRelayNetworkStatus_t",
      "methods": []
    },
    {
      "callback_id": 201,
      "fields": [
        {
          "fieldname": "m_SteamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_OwnerSteamID",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GSClientApprove_t",
      "methods": []
    },
    {
      "callback_id": 202,
      "fields": [
        {
          "fieldname": "m_SteamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eDenyReason",
          "fieldtype": "EDenyReason"
        },
        {
          "fieldname": "m_rgchOptionalText",
          "fieldtype": "char [128]"
        }
      ],
      "struct": "GSClientDeny_t",
      "methods": []
    },
    {
      "callback_id": 203,
      "fields": [
        {
          "fieldname": "m_SteamID",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_eDenyReason",
          "fieldtype": "EDenyReason"
        }
      ],
      "struct": "GSClientKick_t",
      "methods": []
    },
    {
      "callback_id": 206,
      "fields": [
        {
          "fieldname": "m_SteamID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_pchAchievement",
          "fieldtype": "char [128]"
        },
        {
          "fieldname": "m_bUnlocked",
          "fieldtype": "bool"
        }
      ],
      "struct": "GSClientAchievementStatus_t",
      "methods": []
    },
    {
      "callback_id": 115,
      "fields": [
        {
          "fieldname": "m_bSecure",
          "fieldtype": "uint8"
        }
      ],
      "struct": "GSPolicyResponse_t",
      "methods": []
    },
    {
      "callback_id": 207,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_nRank",
          "fieldtype": "int32"
        },
        {
          "fieldname": "m_unTotalConnects",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_unTotalMinutesPlayed",
          "fieldtype": "uint32"
        }
      ],
      "struct": "GSGameplayStats_t",
      "methods": []
    },
    {
      "callback_id": 208,
      "fields": [
        {
          "fieldname": "m_SteamIDUser",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_SteamIDGroup",
          "fieldtype": "CSteamID"
        },
        {
          "fieldname": "m_bMember",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_bOfficer",
          "fieldtype": "bool"
        }
      ],
      "struct": "GSClientGroupStatus_t",
      "methods": []
    },
    {
      "callback_id": 209,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_unReputationScore",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_bBanned",
          "fieldtype": "bool"
        },
        {
          "fieldname": "m_unBannedIP",
          "fieldtype": "uint32"
        },
        {
          "fieldname": "m_usBannedPort",
          "fieldtype": "uint16"
        },
        {
          "fieldname": "m_ulBannedGameID",
          "fieldtype": "uint64"
        },
        {
          "fieldname": "m_unBanExpires",
          "fieldtype": "uint32"
        }
      ],
      "struct": "GSReputation_t",
      "methods": []
    },
    {
      "callback_id": 210,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        }
      ],
      "struct": "AssociateWithClanResult_t",
      "methods": []
    },
    {
      "callback_id": 211,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_cPlayersThatDontLikeCandidate",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cPlayersThatCandidateDoesntLike",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_cClanPlayersThatDontLikeCandidate",
          "fieldtype": "int"
        },
        {
          "fieldname": "m_SteamIDCandidate",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "ComputeNewPlayerCompatibilityResult_t",
      "methods": []
    },
    {
      "callback_id": 1800,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GSStatsReceived_t",
      "methods": []
    },
    {
      "callback_id": 1801,
      "fields": [
        {
          "fieldname": "m_eResult",
          "fieldtype": "EResult"
        },
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GSStatsStored_t",
      "methods": []
    },
    {
      "callback_id": 1108,
      "fields": [
        {
          "fieldname": "m_steamIDUser",
          "fieldtype": "CSteamID"
        }
      ],
      "struct": "GSStatsUnloaded_t",
      "methods": []
    }
  ]
}
